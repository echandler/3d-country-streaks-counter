// ==UserScript==
// @name         3d streak counter v1.3
// @namespace    GeoGuessr scripts
// @version      1.3
// @description  Show possible countries to guess.
// @include      https://*geoguessr.com/*
// @license      MIT
// @grant        GM_addStyle
// ==/UserScript==


let currentOverlaysOnScreen = [];

let events = {};
let on = function(event, callback){
    events[event] = events[event] || [];
    let num = events[event].push(callback) -1;
    return {num, event, callback};
}
let off = function(eventObj){
    events[eventObj.event][eventObj.num] = null;
}
let fire = function(event, _a){

    google.maps.event.trigger(this, 'edited');

    if(!events[event]) { 
	console.error('Event not found ->', event);
        return;
    }
    for(let e = 0;e < events[event].length; e++){
	if (!events[event][e]) continue;
        events[event][e](_a);
    }
}
unsafeWindow._evt = { events, on, off, fire };

// let _0 = on('playingGameImmediate', function(){ console.log('stateHandler.js immedidate 0'); });
// let _1 = on('playingGameImmediate', function _hi_(){ console.log('stateHandler.js immedidate 1'); off("playingGameImmediate",_1); });
// function _hii_(){ console.log('stateHandler.js immedidate 2'); }
// let _2 = on('playingGameImmediate', _hii_);
// let _3 = on('endOfRound', function(){ console.log('stateHandler.js endOfRound'); off('playingGameImmediate',_2); });
// let _4 = on('endOfRoundScreen', function(){ console.log('stateHandler.js endOFRoundScreen'); });

        setTimeout(function(){
	    console.log("sdfsdfdfsssssssssssssssssssssss", window, window.google, google);
	}, 2000);

unsafeWindow.modifyGoogOverlay = function () {
    console.log("modify google overlay fork");
    if (google.maps.OverlayView.prototype._originalSetMap) return;
    let originalSetMap1 = google.maps.OverlayView.prototype.setMap;

    google.maps.OverlayView.prototype._originalSetMap = originalSetMap1;

    google.maps.OverlayView.prototype.setMap = geoguessrOverlaySetMap;
};

function geoguessrOverlaySetMap(...args) {
    if (args[0] !== null) _map = args[0];

    unsafeWindow.__map = _map;

//console.log("overlay setmap this", this);

    this._originalSetMap.apply(this, args);

    if (this._originalSetPosition) return;

    if (!this.alreadyPushed && !this.dontAddToArr) {
        currentOverlaysOnScreen.push(this);
        this.alreadyPushed = true;
    }

    if (this.div) {
        this.div.removeChild = (e) => {
            // -Geoguessr overlays only-
            // Hack. The DIV is gutted instead of
            // removed from the DOM. setMap(null)
            // doesn't appear to be called.
            this.remove = function(){/*Geuguessr dev's removed the .remove function, May 6, 2022*/};
            this.setMap(null);
            this.div.parentElement.removeChild.call(this.div, e);
           // fire('endOfRound', this);
        };
    }

    if (!this._originalSetPosition) {
        this._originalSetPosition = this.setPosition;
        this.setPosition = geoguesserOverlayChooseSetPosition;
    }
}

function geoguesserOverlayChooseSetPosition(...args) {
    let state = 'on'; //localStorage.getItem("streakState");
    if (!state || state == "on") {
        geoguessrSetPosition.call(this, ...args);
    } else {
        this._originalSetPosition(...args);
    }
}

async function geoguessrSetPosition(...args) {
//    console.log("geoguessr set position fork", args);

    if (!this.from) {
        this._originalSetPosition.apply(this, args);
    }

    this.setMap = function (_map_) {
        // Override .setMap for geoguessr overlays.
        if (_map_ == null) {
            // End of round.
            fire('overlaysRemoved');
	    currentOverlaysOnScreen = [];
        }

        return this._originalSetMap.call(this, _map_);
    };

    getState(currentOverlaysOnScreen);

    fire('playingGameImmediate', [this, ...args]);
}

function getState(){
    if (getState.timer) return;
    let isChallenge = /challenge/.test(location.pathname);

    getState.timer = setTimeout(function(){
            let n = currentOverlaysOnScreen;
            
            getState.timer = null;

            if (n.length === 1){
                fire('playingGame', n);
            } else if (n.length === 3 || n.length === 4){
                fire('endOfRoundScreen', n);
            } else if(isChallenge && n.length === 5){
                fire('endOfRoundScreen', n);
            } else if(n.length > 4){
                fire('endOfGameScreen', n);
            }

            fire('arrFilled', n);
    }, 50);
}
getState.timer = null; 

let _start = setInterval(function () {
    if (_start.called) return;

    if (!unsafeWindow.google) {
        console.log("_start => no google");
        return;
    }

    clearInterval(_start);

    unsafeWindow.modifyGoogOverlay();
    fire('onGoogleLoaded');
}, 1000);

let _0ldUrl = location.href;
setInterval(function(){
   if (location.href != _0ldUrl){
        unsafeWindow._evt.fire('url changed', location.href);
       _0ldUrl = location.href;
   }
}, 1000);

// end

//let neoSans_Italic = {"glyphs":{"0":{"ha":875,"x_min":0,"x_max":0,"o":"m 914 718 b 900 567 914 672 910 622 l 882 464 b 436 -11 819 108 679 -11 b 143 322 260 -11 143 100 b 157 464 143 365 149 413 l 175 567 b 621 1043 240 935 390 1043 b 914 718 799 1043 914 943 m 721 710 b 593 886 721 846 667 886 b 368 567 497 886 413 818 l 350 464 b 336 321 340 407 336 360 b 464 146 336 186 390 146 b 689 464 560 146 644 213 l 707 567 b 721 710 717 624 721 671 "},"1":{"ha":875,"x_min":0,"x_max":0,"o":"m 750 1011 b 750 1006 750 1008 750 1007 l 578 28 b 546 0 575 13 561 0 l 407 0 b 386 22 393 0 386 10 b 386 28 386 24 386 26 l 528 838 l 353 768 b 335 764 346 765 340 764 b 322 776 326 764 322 768 b 322 782 322 778 322 781 l 344 903 b 357 918 346 911 349 914 l 603 1026 b 636 1032 613 1031 621 1032 l 728 1032 b 750 1011 742 1032 750 1024 "},"2":{"ha":875,"x_min":0,"x_max":0,"o":"m 911 840 b 686 514 911 688 810 588 l 546 431 b 301 164 400 343 329 278 l 300 158 l 757 158 b 781 138 771 158 781 150 b 781 135 781 136 781 136 l 781 133 l 763 28 b 729 0 760 13 744 0 l 140 0 b 118 22 126 0 118 10 b 118 26 118 24 118 25 l 118 28 l 142 164 b 417 533 171 329 260 440 l 571 625 b 731 819 657 676 731 708 b 583 892 731 876 690 892 b 303 871 501 892 388 881 b 301 871 303 871 303 871 l 300 871 b 279 893 286 871 279 881 b 279 897 279 894 279 896 l 279 899 l 294 982 b 325 1008 297 996 310 1004 b 610 1043 400 1028 519 1043 b 911 840 811 1043 911 969 "},"3":{"ha":875,"x_min":0,"x_max":0,"o":"m 897 813 b 892 757 897 794 896 776 l 888 735 b 732 529 869 638 825 575 b 815 356 792 486 815 421 b 815 344 815 351 815 349 b 814 318 815 336 815 326 l 810 289 b 408 -11 778 68 632 -11 b 147 24 306 -11 224 4 b 125 46 136 26 125 35 b 125 50 125 47 125 49 l 140 136 b 169 161 143 151 154 161 b 172 161 169 161 171 161 b 435 142 281 151 368 142 b 617 289 543 142 604 201 l 621 318 b 624 361 624 333 624 347 b 518 458 624 415 603 458 l 272 458 b 251 479 258 458 251 467 b 251 483 251 481 251 482 l 251 485 l 267 572 b 297 599 269 588 282 599 l 543 599 b 694 735 639 599 678 649 l 699 757 b 703 797 701 771 703 785 b 567 890 703 854 671 890 b 299 871 468 890 424 882 b 296 871 297 871 296 871 b 275 890 283 871 275 878 b 275 896 275 892 275 894 l 290 982 b 321 1008 293 996 307 1006 b 593 1043 403 1028 490 1043 b 897 813 760 1043 897 967 "},"4":{"ha":875,"x_min":0,"x_max":0,"o":"m 888 379 b 888 374 888 376 888 375 l 871 276 b 839 249 868 261 854 249 l 736 249 l 697 28 b 667 0 694 13 682 0 l 524 0 b 504 21 511 0 504 10 b 504 28 504 24 504 25 l 543 249 l 126 249 b 103 272 113 249 103 258 b 103 276 103 274 103 275 l 122 389 b 146 433 125 404 133 419 l 675 1007 b 719 1032 688 1021 700 1032 l 846 1032 b 868 1010 860 1032 868 1022 b 868 1004 868 1007 868 1006 l 763 401 l 865 401 b 888 379 879 401 888 392 m 633 758 b 631 763 633 761 632 763 b 619 754 628 763 624 758 l 317 417 b 311 407 313 413 311 410 b 321 401 311 403 314 401 l 571 401 l 633 754 b 633 758 633 756 633 757 "},"5":{"ha":875,"x_min":0,"x_max":0,"o":"m 907 1007 l 907 1006 l 888 900 b 856 874 885 885 871 874 l 479 874 l 418 643 l 450 643 b 832 404 633 643 832 599 b 826 336 832 383 832 361 l 825 329 b 408 -11 781 106 664 -11 b 147 24 326 -11 222 3 b 126 47 133 28 126 35 b 126 51 126 49 126 50 b 126 54 126 53 126 53 l 140 136 b 168 161 143 150 154 161 b 171 161 169 161 169 161 l 172 161 b 435 142 279 147 368 142 b 632 329 557 142 610 221 l 633 336 b 638 379 636 353 638 367 b 417 492 638 490 526 492 l 226 492 b 215 507 218 492 215 500 b 215 511 215 508 215 510 l 215 513 l 347 1007 b 379 1032 351 1021 365 1032 l 883 1032 b 907 1010 897 1032 907 1022 b 907 1007 907 1008 907 1008 "},"6":{"ha":875,"x_min":0,"x_max":0,"o":"m 931 993 b 931 988 931 992 931 989 l 915 901 b 885 872 913 885 901 872 b 879 872 883 872 881 872 b 625 890 828 881 708 890 b 385 638 485 890 421 821 b 578 653 431 646 503 653 b 871 410 743 653 871 581 b 871 403 871 407 871 406 b 867 347 871 385 871 367 l 864 333 b 446 -11 821 115 692 -11 b 146 304 276 -11 146 92 b 157 418 146 338 150 379 l 185 578 b 651 1043 244 925 393 1043 b 904 1017 772 1043 860 1026 b 931 993 919 1014 931 1008 m 682 388 b 517 513 682 476 628 513 b 360 497 476 513 403 506 l 346 418 b 332 288 336 365 332 322 b 472 139 332 163 388 139 b 675 333 567 139 646 189 l 678 347 b 682 388 681 361 682 375 "},"7":{"ha":875,"x_min":0,"x_max":0,"o":"m 943 986 b 942 976 943 983 942 979 l 928 901 b 892 838 925 888 913 869 l 374 26 b 332 0 360 6 350 0 l 181 0 b 164 17 169 0 164 7 b 169 33 164 22 165 28 l 715 864 l 717 867 b 710 874 717 871 714 874 l 289 874 b 265 894 275 874 265 882 b 265 899 265 896 265 897 l 285 1006 b 317 1032 288 1021 301 1032 l 896 1032 b 943 986 924 1032 943 1013 "},"8":{"ha":875,"x_min":0,"x_max":0,"o":"m 936 807 b 769 538 936 682 879 601 b 860 354 828 493 860 429 b 443 -11 860 97 678 -11 l 429 -11 b 122 233 275 -11 122 71 b 296 538 122 390 196 483 b 210 706 236 582 210 640 b 614 1043 210 951 389 1043 l 624 1043 b 936 807 788 1043 936 979 m 754 790 b 599 901 754 861 704 901 l 589 901 b 389 714 467 901 389 835 b 517 606 389 650 425 606 l 574 606 b 754 790 682 606 754 685 m 671 343 b 549 464 671 403 642 464 l 492 464 b 313 261 375 464 313 368 b 454 133 313 179 349 133 l 468 133 b 671 343 607 133 671 221 "},"9":{"ha":875,"x_min":0,"x_max":0,"o":"m 910 728 b 899 614 910 694 906 653 l 871 454 b 404 -11 811 107 663 -11 b 151 15 283 -11 196 6 b 125 39 136 18 125 24 b 125 44 125 40 125 43 l 140 131 b 171 160 143 147 154 160 b 176 160 172 160 175 160 b 431 142 228 151 347 142 b 671 394 571 142 635 211 b 478 379 625 386 553 379 b 185 622 313 379 185 451 b 185 629 185 625 185 626 b 189 685 185 647 185 665 l 192 699 b 610 1043 235 917 364 1043 b 910 728 779 1043 910 940 m 724 744 b 583 893 724 869 668 893 b 381 699 489 893 410 843 l 378 685 b 374 644 375 671 374 657 b 539 519 374 556 428 519 b 696 535 579 519 653 526 l 710 614 b 724 744 719 667 724 710 "}," ":{"ha":372,"x_min":0,"x_max":0,"o":""},"&":{"ha":906,"x_min":0,"x_max":0,"o":"m 957 503 b 957 497 957 501 957 499 l 953 481 b 817 174 924 365 886 257 l 926 29 b 931 18 929 25 931 22 b 911 0 931 8 922 0 l 756 0 b 735 11 746 0 742 1 l 693 65 b 415 -11 615 17 521 -11 b 90 215 221 -11 90 75 b 333 533 90 376 203 461 l 326 544 b 235 760 260 651 235 710 b 599 1043 235 972 410 1043 b 860 850 764 1043 860 961 b 600 525 860 692 725 594 l 563 504 l 732 282 b 803 481 767 339 785 408 l 807 497 b 835 525 811 513 819 525 l 936 525 b 957 503 950 525 957 515 m 693 833 b 575 913 693 883 653 913 b 399 767 475 913 399 876 b 469 626 399 733 414 697 l 479 614 l 526 639 b 693 833 606 681 693 728 m 417 425 b 282 228 335 381 282 328 b 439 125 282 158 338 125 b 615 167 508 125 567 140 "},",":{"ha":360,"x_min":0,"x_max":0,"o":"m 315 199 b 311 185 315 194 314 190 l 139 -107 b 108 -135 129 -124 124 -135 l 13 -135 b -6 -118 1 -135 -6 -128 b -3 -107 -6 -115 -4 -111 l 133 185 b 167 211 142 201 151 211 l 300 211 b 315 199 310 211 315 207 "},"-":{"ha":446,"x_min":0,"x_max":0,"o":"m 469 476 b 469 471 469 474 469 472 l 454 383 b 422 358 451 368 438 358 l 150 358 b 128 378 136 358 128 367 b 128 383 128 381 128 382 l 143 471 b 175 497 146 486 160 497 l 447 497 b 469 476 461 497 469 489 "},".":{"ha":360,"x_min":0,"x_max":0,"o":"m 301 190 b 301 185 301 188 301 186 l 275 28 b 242 0 272 13 257 0 l 118 0 b 96 22 104 0 96 10 b 96 28 96 25 96 26 l 122 185 b 156 211 125 200 140 211 l 279 211 b 301 190 293 211 301 203 "},"A":{"ha":897,"x_min":0,"x_max":0,"o":"m 875 28 b 846 0 875 13 863 0 l 704 0 b 682 24 692 0 683 11 l 665 288 l 346 288 l 235 24 b 204 0 229 11 217 0 l 51 0 b 31 18 39 0 31 7 b 33 31 31 22 32 26 l 414 901 b 632 1043 471 1031 556 1043 b 800 901 703 1043 790 1018 l 875 31 b 875 28 875 29 875 29 m 628 858 b 610 881 626 875 624 881 b 583 858 596 881 590 875 l 411 446 l 656 446 "},"B":{"ha":903,"x_min":0,"x_max":0,"o":"m 967 815 b 961 761 967 799 965 781 l 956 733 b 790 524 932 618 871 556 b 892 351 860 492 892 421 b 889 313 892 339 892 325 l 885 289 b 410 -11 846 71 699 -11 b 172 4 297 -11 214 -4 b 115 57 135 11 115 24 b 118 79 115 64 117 71 l 272 954 b 349 1029 281 1004 303 1022 b 582 1043 386 1035 474 1043 b 967 815 822 1043 967 965 m 774 778 b 554 883 774 854 714 883 b 453 881 521 883 482 882 l 403 599 l 579 599 b 768 731 708 599 758 660 l 771 750 b 774 778 772 760 774 769 m 701 342 b 554 457 701 406 667 457 l 378 457 l 324 151 b 438 149 357 151 408 149 b 696 292 615 149 681 194 l 699 310 b 701 342 700 321 701 332 "},"C":{"ha":789,"x_min":0,"x_max":0,"o":"m 894 992 b 894 989 894 990 894 990 l 878 896 b 844 867 875 879 864 867 b 843 867 843 867 843 867 b 842 867 842 867 842 867 b 626 878 794 871 700 878 b 379 618 510 878 411 807 l 344 414 b 336 322 339 379 336 349 b 500 154 336 192 403 154 b 718 165 574 154 668 161 l 719 165 b 721 165 719 165 719 165 b 744 144 738 165 744 157 b 743 136 744 142 743 139 l 726 43 b 690 11 722 24 710 17 b 468 -11 668 6 575 -11 b 140 313 321 -11 140 68 b 150 414 140 343 144 378 l 185 618 b 653 1043 249 990 486 1043 b 869 1021 760 1043 850 1026 b 894 996 885 1017 894 1010 b 894 992 894 994 894 993 "},"D":{"ha":926,"x_min":0,"x_max":0,"o":"m 967 713 b 958 618 967 683 964 651 l 924 414 b 413 -11 875 128 707 -11 b 142 6 314 -11 182 -1 b 111 38 122 8 111 18 b 113 49 111 42 111 44 l 278 983 b 321 1026 283 1011 296 1022 b 597 1043 364 1033 499 1043 b 967 713 833 1043 967 919 m 775 706 b 569 881 775 847 693 881 b 451 876 518 881 481 878 l 325 156 b 440 151 354 154 389 151 b 732 414 579 151 699 214 l 767 618 b 775 706 772 651 775 681 "},"E":{"ha":800,"x_min":0,"x_max":0,"o":"m 893 1004 b 892 994 893 1001 892 999 l 876 906 b 843 878 874 890 858 878 l 560 878 b 429 758 479 878 446 850 l 403 608 l 779 608 b 803 585 793 608 803 597 b 803 582 803 583 803 583 l 803 581 l 785 481 b 751 453 782 465 767 453 l 375 453 l 344 274 b 340 228 342 256 340 240 b 433 154 340 172 368 154 l 717 154 b 739 132 731 154 739 144 b 739 128 739 131 739 129 l 739 126 l 724 38 b 690 8 721 18 711 11 b 424 -11 644 1 589 -11 b 147 208 267 -11 147 50 b 153 274 147 229 149 250 l 238 758 b 608 1043 282 1008 418 1043 b 869 1024 774 1043 826 1031 b 893 1004 886 1021 893 1017 "},"F":{"ha":800,"x_min":0,"x_max":0,"o":"m 893 1004 b 892 994 893 1001 892 999 l 876 906 b 843 878 874 890 858 878 l 560 878 b 429 758 479 878 446 850 l 403 608 l 779 608 b 803 585 793 608 803 599 b 803 581 803 583 803 582 l 785 481 b 751 453 782 465 767 453 l 375 453 l 301 28 b 268 0 299 13 283 0 l 132 0 b 110 22 118 0 110 10 b 110 28 110 25 110 26 l 238 758 b 608 1043 279 994 401 1043 b 869 1024 774 1043 826 1031 b 893 1004 886 1021 893 1017 "},"G":{"ha":882,"x_min":0,"x_max":0,"o":"m 954 996 b 953 989 954 993 953 992 l 936 896 b 903 867 932 876 924 867 b 900 867 901 867 901 867 l 899 867 b 619 878 836 872 753 878 b 379 615 510 878 411 801 l 344 415 b 336 325 339 381 336 351 b 476 154 336 190 408 154 b 614 158 528 154 571 156 l 676 513 b 708 540 679 528 693 540 l 846 540 b 868 518 860 540 868 531 b 868 514 868 517 868 515 l 868 513 l 786 46 b 754 13 783 28 774 17 b 447 -11 682 -1 590 -11 b 140 315 332 -11 140 65 b 150 415 140 346 143 379 l 185 615 b 636 1043 247 975 471 1043 b 931 1018 769 1043 886 1026 b 954 996 946 1015 954 1008 "},"H":{"ha":989,"x_min":0,"x_max":0,"o":"m 1063 1010 b 1063 1006 1063 1008 1063 1007 l 890 28 b 857 0 888 13 872 0 l 719 0 b 697 22 706 0 697 10 b 697 28 697 25 697 26 l 771 453 l 376 453 l 303 28 b 269 0 300 13 285 0 l 132 0 b 110 22 118 0 110 10 b 110 28 110 25 110 26 l 282 1006 b 314 1032 285 1021 299 1032 l 451 1032 b 475 1010 465 1032 475 1024 b 475 1006 475 1008 475 1007 l 407 622 l 801 622 l 869 1006 b 901 1032 872 1021 886 1032 l 1039 1032 b 1063 1010 1053 1032 1063 1024 "},"I":{"ha":401,"x_min":0,"x_max":0,"o":"m 475 1010 b 475 1006 475 1008 475 1007 l 303 28 b 269 0 300 13 285 0 l 132 0 b 110 22 118 0 110 10 b 110 28 110 25 110 26 l 282 1006 b 314 1032 285 1021 299 1032 l 451 1032 b 475 1010 465 1032 475 1024 "},"J":{"ha":401,"x_min":0,"x_max":0,"o":"m 475 1010 b 475 1006 475 1008 475 1007 l 292 -29 b 35 -232 265 -176 185 -232 b -75 -221 -7 -232 -65 -224 b -86 -206 -82 -218 -86 -212 b -86 -201 -86 -204 -86 -203 l -68 -103 b -36 -78 -65 -87 -51 -78 l 56 -78 b 99 -29 81 -78 92 -69 l 282 1006 b 314 1032 285 1021 299 1032 l 451 1032 b 475 1010 465 1032 475 1022 "},"K":{"ha":893,"x_min":0,"x_max":0,"o":"m 1033 1018 b 1019 993 1033 1011 1028 1001 l 572 532 l 842 29 b 846 15 844 24 846 19 b 822 0 846 6 838 0 l 647 0 b 618 15 631 0 624 4 l 383 489 l 303 28 b 269 0 300 13 285 0 l 132 0 b 110 22 118 0 110 10 b 110 28 110 25 110 26 l 281 1006 b 314 1032 283 1021 299 1032 l 451 1032 b 474 1011 465 1032 474 1024 b 474 1006 474 1008 474 1007 l 399 578 l 806 1021 b 840 1032 814 1031 825 1032 l 1010 1032 b 1033 1018 1026 1032 1033 1026 "},"L":{"ha":717,"x_min":0,"x_max":0,"o":"m 711 132 b 711 126 711 129 711 128 l 696 38 b 663 8 693 18 683 13 b 424 -11 619 -1 497 -11 b 149 208 300 -11 149 31 b 153 274 149 228 149 250 l 281 1004 b 314 1032 283 1019 299 1032 l 451 1032 b 474 1010 465 1032 474 1022 b 474 1004 474 1007 474 1006 l 346 274 b 342 226 343 256 342 240 b 433 154 342 172 368 154 l 689 154 b 711 132 703 154 711 144 "},"M":{"ha":1100,"x_min":0,"x_max":0,"o":"m 1169 986 b 1168 976 1169 983 1168 979 l 1000 21 b 972 0 997 7 985 0 l 832 0 b 815 22 821 0 815 10 b 815 28 815 24 815 26 l 929 674 b 931 682 929 676 931 679 b 928 688 931 686 929 688 b 918 679 925 688 921 683 l 739 414 b 690 390 729 399 708 390 l 550 390 b 510 414 532 390 515 399 l 421 679 b 415 688 419 683 418 688 b 410 674 414 688 411 683 l 296 28 b 268 0 293 14 281 0 l 128 0 b 108 17 117 0 108 6 b 108 21 108 18 108 19 l 276 976 b 342 1032 282 1007 311 1032 l 449 1032 b 494 999 471 1032 489 1018 l 629 574 b 640 554 633 561 635 554 b 660 574 646 554 651 561 l 944 999 b 1001 1032 957 1018 979 1032 l 1122 1032 b 1169 986 1150 1032 1169 1013 "},"N":{"ha":989,"x_min":0,"x_max":0,"o":"m 1063 1010 b 1063 1006 1063 1008 1063 1007 l 894 56 b 829 0 889 25 860 0 l 699 0 b 622 50 665 0 636 0 l 424 726 b 414 738 421 735 418 738 b 404 726 410 738 406 735 l 282 28 b 250 0 279 13 265 0 l 132 0 b 110 24 119 0 110 11 b 110 28 110 25 110 26 l 276 976 b 342 1032 282 1007 311 1032 l 482 1032 b 535 988 511 1032 524 1024 l 743 274 b 751 263 744 267 747 263 b 761 275 754 263 760 267 l 890 1006 b 921 1032 893 1021 906 1032 l 1040 1032 b 1063 1010 1054 1032 1063 1022 "},"O":{"ha":942,"x_min":0,"x_max":0,"o":"m 985 713 b 975 610 985 681 981 646 l 943 422 b 471 -11 888 99 714 -11 b 142 315 272 -11 142 100 b 151 422 142 349 144 383 l 183 610 b 656 1043 239 935 413 1043 b 985 713 854 1043 985 925 m 790 713 b 626 875 790 832 736 875 b 378 610 482 875 410 799 l 346 422 b 336 318 339 382 336 347 b 500 157 336 197 392 157 b 749 422 647 157 718 242 l 781 610 b 790 713 788 649 790 683 "},"P":{"ha":869,"x_min":0,"x_max":0,"o":"m 953 771 b 949 722 953 756 953 739 l 946 710 b 489 385 888 446 700 385 b 367 390 453 385 399 389 l 303 28 b 271 0 300 13 286 0 l 132 0 b 110 22 118 0 110 10 b 110 26 110 24 110 25 l 110 28 l 278 983 b 329 1025 283 1011 300 1021 b 604 1043 403 1036 503 1043 b 953 793 824 1043 953 956 b 953 771 953 786 953 778 m 763 769 b 576 883 763 854 706 883 b 451 878 547 883 476 881 l 393 547 b 517 543 415 546 493 543 b 754 710 664 543 731 606 l 757 722 b 763 769 761 740 763 756 "},"Q":{"ha":943,"x_min":0,"x_max":0,"o":"m 985 713 b 975 610 985 681 981 646 l 943 422 b 560 -6 894 140 756 21 l 556 -33 b 554 -47 554 -39 554 -43 b 589 -78 554 -72 569 -78 l 724 -78 b 753 -97 742 -78 753 -85 b 753 -100 753 -97 753 -99 l 738 -186 b 703 -215 735 -200 724 -210 b 563 -231 674 -222 607 -231 b 367 -79 446 -231 367 -187 b 371 -36 367 -67 368 -51 l 376 -1 b 142 315 232 29 142 136 b 151 422 142 349 144 383 l 183 610 b 656 1043 239 935 413 1043 b 985 713 854 1043 985 925 m 790 713 b 626 875 790 832 736 875 b 378 610 482 875 410 799 l 346 422 b 336 318 339 382 336 347 b 500 157 336 197 392 157 b 749 422 647 157 718 242 l 781 610 b 790 713 788 649 790 683 "},"R":{"ha":907,"x_min":0,"x_max":0,"o":"m 956 789 b 710 433 956 626 871 483 l 857 28 b 858 21 858 25 858 24 b 838 0 858 10 850 0 l 678 0 b 651 28 663 0 657 11 l 519 399 l 492 399 b 368 404 456 399 415 401 l 303 28 b 271 0 300 13 286 0 l 132 0 b 110 22 118 0 110 10 b 110 26 110 24 110 25 l 110 28 l 278 983 b 329 1025 283 1011 300 1021 b 604 1043 403 1036 503 1043 b 956 789 813 1043 956 963 m 761 765 b 575 878 761 850 697 878 b 451 872 546 878 476 875 l 396 560 b 519 556 418 558 496 556 b 761 765 663 556 761 608 "},"S":{"ha":792,"x_min":0,"x_max":0,"o":"m 876 996 b 876 992 876 994 876 993 l 858 889 b 831 864 856 875 844 864 b 828 864 829 864 829 864 b 556 878 738 872 658 878 b 392 761 479 878 392 854 b 485 656 392 725 415 699 l 635 563 b 782 325 747 493 782 404 b 363 -11 782 82 590 -11 b 121 14 258 -11 185 -1 b 99 38 110 17 99 25 b 99 42 99 39 99 40 l 117 142 b 147 168 119 156 132 168 b 150 168 149 168 149 168 b 394 154 206 161 343 154 b 578 299 492 154 578 188 b 483 415 578 335 556 367 l 319 525 b 197 750 225 588 197 682 b 593 1043 197 983 396 1043 b 856 1018 685 1043 810 1029 b 876 996 867 1015 876 1007 "},"T":{"ha":804,"x_min":0,"x_max":0,"o":"m 947 1010 b 947 1006 947 1008 947 1007 l 928 896 b 896 871 925 881 911 871 l 653 871 l 504 28 b 471 0 501 13 486 0 l 333 0 b 311 22 319 0 311 10 b 311 28 311 25 311 26 l 460 871 l 217 871 b 193 892 203 871 193 879 b 193 896 193 893 193 894 l 213 1006 b 244 1032 215 1021 229 1032 l 924 1032 b 947 1010 938 1032 947 1024 "},"U":{"ha":958,"x_min":0,"x_max":0,"o":"m 1039 1010 b 1039 1006 1039 1008 1039 1007 l 928 382 b 481 -11 872 71 710 -11 b 156 281 283 -11 156 81 b 164 382 156 311 157 346 l 275 1006 b 307 1032 278 1021 292 1032 l 444 1032 b 468 1010 458 1032 468 1022 b 468 1006 468 1008 468 1007 l 357 382 b 346 278 350 342 346 307 b 506 149 346 185 389 149 b 735 382 656 149 706 218 l 846 1006 b 878 1032 849 1021 863 1032 l 1015 1032 b 1039 1010 1029 1032 1039 1022 "},"V":{"ha":911,"x_min":0,"x_max":0,"o":"m 1056 1013 b 1053 1001 1056 1010 1054 1006 l 672 131 b 454 -11 615 1 514 -11 b 286 131 394 -11 297 1 l 211 1001 b 211 1004 211 1003 211 1003 b 240 1032 211 1019 225 1032 l 383 1032 b 406 1008 396 1032 404 1021 l 460 174 b 478 151 461 157 464 151 b 504 174 492 151 497 157 l 853 1008 b 883 1032 858 1021 871 1032 l 1035 1032 b 1056 1013 1047 1032 1056 1024 "},"W":{"ha":1197,"x_min":0,"x_max":0,"o":"m 1343 1015 b 1342 1008 1343 1014 1343 1011 l 1051 101 b 907 -11 1024 14 979 -11 l 836 -11 b 740 100 774 -11 746 19 l 711 558 b 706 574 710 571 711 574 b 693 558 700 574 699 571 l 503 100 b 368 -11 469 19 431 -11 l 289 -11 b 183 92 219 -11 183 13 b 183 101 183 94 183 99 l 213 1008 b 240 1032 213 1024 226 1032 l 382 1032 b 401 1008 393 1032 401 1022 l 401 1007 l 356 178 b 356 174 356 176 356 175 b 364 157 356 164 358 157 b 376 178 369 157 371 165 l 581 665 b 679 728 594 699 619 728 l 775 728 b 851 665 835 728 849 699 l 886 178 b 886 171 886 175 886 174 b 886 165 886 169 886 168 b 890 157 886 160 886 157 b 901 178 896 157 897 165 l 1147 1007 b 1175 1032 1151 1022 1164 1032 l 1322 1032 b 1343 1015 1333 1032 1343 1026 "},"X":{"ha":889,"x_min":0,"x_max":0,"o":"m 1031 1015 b 1026 1006 1031 1013 1029 1008 l 640 507 l 856 28 b 857 21 857 25 857 22 b 831 0 857 10 847 0 l 690 0 b 660 28 675 0 667 11 l 510 363 l 257 28 b 215 0 243 10 231 0 l 56 0 b 36 14 42 0 36 7 b 42 28 36 18 39 24 l 433 533 l 221 1006 b 219 1011 219 1007 219 1010 b 244 1032 219 1022 232 1032 l 385 1032 b 417 1006 400 1032 411 1018 l 565 675 l 814 1006 b 854 1032 824 1018 839 1032 l 1011 1032 b 1031 1015 1022 1032 1031 1025 "},"Y":{"ha":854,"x_min":0,"x_max":0,"o":"m 997 1014 b 993 1000 997 1010 996 1006 l 697 518 b 594 414 660 457 628 426 l 526 28 b 494 0 524 13 510 0 l 356 0 b 335 22 343 0 335 10 b 335 28 335 25 335 26 l 403 414 b 336 518 375 426 351 457 l 211 1000 b 210 1007 211 1003 210 1004 b 236 1032 210 1021 221 1032 l 382 1032 b 407 1010 394 1032 403 1026 l 501 596 b 519 571 507 572 511 571 b 550 596 533 571 536 572 l 789 1010 b 824 1032 799 1026 811 1032 l 978 1032 b 997 1014 990 1032 997 1025 "},"Z":{"ha":831,"x_min":0,"x_max":0,"o":"m 932 989 b 931 979 932 986 931 982 l 917 899 b 888 842 914 879 901 858 l 346 193 b 338 176 340 186 338 181 b 349 169 338 172 340 169 l 771 169 b 793 149 785 169 793 161 b 793 144 793 147 793 146 l 774 28 b 740 0 771 13 756 0 l 133 0 b 71 42 97 0 71 11 b 72 51 71 44 72 47 l 85 128 b 113 181 88 144 94 160 l 664 840 b 671 856 668 846 671 851 b 658 864 671 860 667 864 l 278 864 b 256 883 264 864 256 872 b 256 889 256 886 256 888 l 276 1006 b 307 1032 279 1021 292 1032 l 867 1032 b 932 989 903 1032 932 1018 "},"a":{"ha":779,"x_min":0,"x_max":0,"o":"m 831 731 b 829 719 831 726 831 724 l 708 28 b 675 0 706 13 690 0 l 564 0 b 542 24 549 0 542 10 b 542 28 542 25 542 26 l 547 68 b 332 -11 469 8 400 -11 b 104 240 204 -11 104 75 b 111 324 104 265 106 296 b 132 444 111 324 122 393 b 526 793 171 661 303 793 b 799 757 615 793 717 779 b 831 731 819 751 831 747 m 631 633 b 500 643 606 639 550 643 b 315 444 381 643 335 558 l 290 301 b 285 244 286 281 285 261 b 381 139 285 165 326 139 b 554 197 433 139 492 161 l 631 633 "},"b":{"ha":801,"x_min":0,"x_max":0,"o":"m 824 529 b 817 444 824 503 822 474 l 799 338 b 406 -11 760 106 635 -11 b 132 25 317 -11 214 3 b 100 51 107 32 100 39 b 101 63 100 54 100 58 l 272 1029 b 304 1057 275 1044 289 1057 l 432 1057 b 456 1033 446 1057 456 1047 b 456 1029 456 1032 456 1031 l 411 783 b 547 793 464 790 514 793 b 824 529 738 793 824 686 m 642 526 b 521 643 642 601 611 643 b 385 633 488 643 425 639 l 300 149 b 432 139 325 143 382 139 b 615 338 551 139 597 233 l 633 444 b 642 526 639 475 642 503 "},"c":{"ha":650,"x_min":0,"x_max":0,"o":"m 726 751 b 725 739 726 749 726 743 l 708 649 b 681 628 706 635 693 628 b 678 628 679 628 679 628 l 676 628 b 499 638 632 633 589 638 b 333 456 433 638 360 600 l 310 326 b 303 257 304 300 303 276 b 411 144 303 163 354 144 b 593 154 501 144 543 149 l 594 154 b 597 154 596 154 596 154 b 618 138 608 154 618 149 b 618 135 618 136 618 136 l 618 133 l 601 43 b 567 7 597 21 592 13 b 385 -11 533 -1 469 -11 b 119 256 226 -11 119 97 b 126 326 119 278 122 301 l 150 456 b 526 793 199 718 346 793 b 701 775 611 793 671 783 b 726 751 719 771 726 765 "},"d":{"ha":801,"x_min":0,"x_max":0,"o":"m 893 1033 b 893 1029 893 1032 893 1031 l 722 63 b 678 25 718 42 711 33 b 393 -11 588 3 482 -11 b 115 261 200 -11 115 108 b 122 338 115 286 118 311 l 140 444 b 535 793 182 696 311 793 b 665 783 568 793 615 790 l 710 1029 b 742 1057 713 1044 726 1057 l 869 1057 b 893 1033 883 1057 893 1047 m 639 633 b 508 643 601 639 542 643 b 324 444 389 643 346 579 l 306 338 b 297 251 300 304 297 276 b 419 139 297 175 329 139 b 554 149 469 139 526 143 l 639 633 "},"e":{"ha":797,"x_min":0,"x_max":0,"o":"m 813 508 b 806 429 813 483 810 456 l 794 363 b 761 328 790 340 781 328 l 308 328 b 301 271 306 308 301 290 b 443 146 301 196 340 146 b 700 161 544 146 640 156 b 706 161 701 161 704 161 b 726 146 717 161 726 158 b 726 140 726 144 726 142 l 710 49 b 675 13 706 26 701 17 b 396 -11 582 -4 521 -11 b 122 268 272 -11 122 58 b 129 351 122 293 124 322 l 144 438 b 540 793 190 697 328 793 b 813 508 725 793 813 671 m 632 511 b 513 635 632 592 589 635 b 332 458 401 635 350 560 l 626 458 b 632 511 629 476 632 493 "},"f":{"ha":549,"x_min":0,"x_max":0,"o":"m 704 1043 b 704 1040 704 1042 704 1042 l 690 958 b 665 935 688 942 675 935 l 603 935 b 506 851 536 935 518 919 l 493 783 l 626 783 b 650 760 640 783 650 774 b 650 756 650 758 650 757 l 635 672 b 603 646 632 657 618 646 l 469 646 l 354 -8 b 75 -231 319 -206 219 -231 b -7 -219 42 -231 19 -225 b -28 -200 -17 -218 -28 -211 b -28 -197 -28 -199 -28 -199 l -14 -115 b 11 -92 -11 -99 1 -92 l 74 -92 b 171 -8 140 -92 158 -76 l 286 646 l 165 665 b 143 688 151 668 143 675 b 143 692 143 689 143 690 l 154 756 b 186 783 157 771 171 783 l 310 783 l 322 851 b 601 1074 358 1050 457 1074 b 683 1063 635 1074 657 1068 b 704 1043 693 1061 704 1054 "},"g":{"ha":801,"x_min":0,"x_max":0,"o":"m 839 729 b 838 719 839 726 838 724 l 711 3 b 350 -278 675 -200 592 -278 b 96 -244 215 -278 129 -256 b 72 -219 81 -239 72 -233 b 74 -211 72 -218 74 -214 l 88 -137 b 118 -114 90 -122 103 -114 b 121 -114 118 -114 119 -114 b 375 -131 182 -119 311 -131 b 528 -7 481 -131 517 -100 l 529 4 b 403 -10 486 -4 443 -10 b 115 253 242 -10 115 65 b 122 338 115 279 117 307 l 140 444 b 535 793 185 704 311 793 b 807 757 624 793 733 776 b 839 729 828 751 839 746 m 639 631 b 508 643 614 636 558 643 b 324 444 394 643 346 578 l 306 338 b 296 250 300 304 296 275 b 419 139 296 176 326 139 b 554 150 453 139 514 144 l 639 631 "},"h":{"ha":822,"x_min":0,"x_max":0,"o":"m 826 558 b 821 501 826 540 825 521 l 738 29 b 704 0 735 14 719 0 l 576 0 b 554 24 563 0 554 11 b 554 29 554 26 554 28 l 638 501 b 643 553 640 519 643 539 b 519 640 643 615 610 640 b 385 628 468 640 418 636 l 279 29 b 246 0 276 14 261 0 l 118 0 b 96 24 104 0 96 11 b 96 29 96 26 96 28 l 272 1029 b 304 1057 275 1044 289 1057 l 432 1057 b 456 1033 446 1057 456 1047 b 456 1029 456 1032 456 1031 l 411 779 b 547 793 453 788 501 793 b 826 558 735 793 826 693 "},"i":{"ha":372,"x_min":0,"x_max":0,"o":"m 465 1042 b 465 1038 465 1040 465 1039 l 443 915 b 411 888 440 900 426 888 l 276 888 b 251 911 263 888 251 897 b 251 915 251 913 251 914 l 274 1038 b 307 1065 276 1053 292 1065 l 442 1065 b 465 1042 456 1065 465 1056 m 411 760 b 411 756 411 758 411 757 l 283 29 b 250 0 281 14 265 0 l 122 0 b 100 24 108 0 100 11 b 100 29 100 26 100 28 l 228 756 b 260 783 231 771 244 783 l 388 783 b 411 760 401 783 411 774 "},"j":{"ha":372,"x_min":0,"x_max":0,"o":"m 465 1042 b 465 1038 465 1040 465 1039 l 443 915 b 410 888 440 900 425 888 l 276 888 b 253 911 263 888 253 897 b 253 915 253 913 253 914 l 275 1038 b 307 1065 278 1053 292 1065 l 440 1065 b 465 1042 454 1065 465 1056 m 411 760 b 411 756 411 758 411 757 l 268 -58 b 24 -278 239 -228 153 -278 b -67 -269 -7 -278 -35 -275 b -89 -250 -82 -267 -89 -260 b -89 -244 -89 -247 -89 -246 l -74 -154 b -40 -132 -71 -140 -58 -132 l 22 -132 b 85 -58 67 -132 75 -114 l 228 756 b 260 783 231 771 244 783 l 388 783 b 411 760 401 783 411 774 "},"k":{"ha":763,"x_min":0,"x_max":0,"o":"m 849 771 b 840 754 849 765 846 760 l 507 411 l 722 28 b 724 19 724 25 724 22 b 701 0 724 10 714 0 l 543 0 b 508 28 528 0 515 15 l 338 358 l 279 29 b 246 0 276 14 261 0 l 118 0 b 96 24 104 0 96 11 b 96 29 96 26 96 28 l 272 1029 b 304 1057 275 1044 289 1057 l 432 1057 b 456 1033 446 1057 456 1047 b 456 1029 456 1032 456 1031 l 356 468 l 631 767 b 665 783 642 779 650 783 l 829 783 b 849 771 842 783 849 778 "},"l":{"ha":378,"x_min":0,"x_max":0,"o":"m 463 1035 b 463 1029 463 1032 463 1031 l 286 29 b 254 0 283 14 269 0 l 125 0 b 103 24 111 0 103 11 b 103 29 103 26 103 28 l 279 1029 b 311 1057 282 1044 296 1057 l 440 1057 b 463 1035 454 1057 463 1047 "},"m":{"ha":1178,"x_min":0,"x_max":0,"o":"m 1185 590 b 1176 501 1185 563 1182 533 l 1093 29 b 1060 0 1090 14 1075 0 l 932 0 b 910 24 918 0 910 11 b 910 29 910 26 910 28 l 993 501 b 1000 565 997 528 1000 549 b 917 636 1000 619 976 636 b 776 601 890 636 832 628 b 769 501 775 571 775 536 l 686 29 b 653 0 683 14 668 0 l 525 0 b 503 24 511 0 503 11 b 503 29 503 26 503 28 l 586 501 b 593 569 592 529 593 551 b 514 636 593 621 571 636 b 378 590 485 636 440 621 l 279 29 b 246 0 276 14 261 0 l 118 0 b 96 24 104 0 96 11 b 96 29 96 26 96 28 l 224 756 b 256 783 226 771 240 783 l 376 783 b 400 760 390 783 400 774 b 400 756 400 758 400 757 l 394 726 b 600 793 458 764 518 793 b 749 725 679 793 725 761 b 993 793 819 771 897 793 b 1185 590 1125 793 1185 715 "},"n":{"ha":822,"x_min":0,"x_max":0,"o":"m 826 585 b 817 482 826 553 824 518 l 738 29 b 704 0 735 14 719 0 l 576 0 b 553 24 563 0 553 10 b 554 29 553 25 554 28 l 633 482 b 643 565 639 517 643 543 b 543 638 643 619 619 638 b 378 588 496 638 442 618 l 279 29 b 246 0 276 14 261 0 l 118 0 b 94 24 104 0 94 10 b 96 29 94 25 96 28 l 224 756 b 256 783 226 771 240 783 l 376 783 b 400 760 390 783 400 772 b 400 757 400 758 400 758 l 400 756 l 394 726 b 625 793 483 778 543 793 b 826 585 776 793 826 703 "},"o":{"ha":797,"x_min":0,"x_max":0,"o":"m 817 519 b 810 447 817 496 814 471 l 789 335 b 397 -11 746 106 615 -11 b 119 268 208 -11 119 122 b 125 335 119 290 121 313 l 146 447 b 539 793 188 675 321 793 b 817 519 729 793 817 665 m 632 508 b 511 635 632 590 593 635 b 329 447 426 635 354 585 l 308 335 b 303 274 304 313 303 292 b 425 147 303 192 343 147 b 606 335 522 147 582 206 l 626 447 b 632 508 631 469 632 490 "},"p":{"ha":801,"x_min":0,"x_max":0,"o":"m 824 525 b 817 444 824 500 821 472 l 799 338 b 406 -11 758 96 629 -11 b 274 -1 372 -11 324 -8 l 231 -247 b 197 -275 228 -262 213 -275 l 69 -275 b 47 -253 56 -275 47 -265 b 47 -249 47 -251 47 -250 l 47 -247 l 217 719 b 261 757 221 740 228 749 b 547 793 351 779 458 793 b 824 525 733 793 824 683 m 642 526 b 521 643 642 601 611 643 b 385 633 471 643 413 639 l 300 149 b 432 139 338 143 399 139 b 615 338 551 139 597 231 l 633 444 b 642 526 639 475 642 503 "},"q":{"ha":801,"x_min":0,"x_max":0,"o":"m 839 731 b 838 719 839 728 839 724 l 668 -247 b 635 -275 665 -262 650 -275 l 507 -275 b 485 -253 493 -275 485 -265 b 485 -249 485 -251 485 -250 l 485 -247 l 528 -1 b 393 -11 475 -8 426 -11 b 115 257 224 -11 115 85 b 122 338 115 282 118 310 l 140 444 b 532 793 183 696 308 793 b 807 757 621 793 725 779 b 839 731 832 750 839 743 m 639 633 b 508 643 614 639 558 643 b 324 444 389 643 346 579 l 306 338 b 297 257 300 308 297 281 b 419 139 297 181 328 139 b 554 149 453 139 514 143 l 639 633 "},"r":{"ha":521,"x_min":0,"x_max":0,"o":"m 628 771 b 628 765 628 768 628 767 l 610 665 b 578 638 607 650 593 638 b 378 588 533 638 472 635 l 279 29 b 246 0 276 14 261 0 l 118 0 b 96 24 104 0 96 11 b 96 29 96 26 96 28 l 224 756 b 256 783 226 771 240 783 l 376 783 b 400 760 390 783 400 774 b 400 756 400 758 400 757 l 394 726 b 606 793 474 788 547 793 b 628 771 619 793 628 783 "},"s":{"ha":679,"x_min":0,"x_max":0,"o":"m 721 735 b 721 732 721 733 721 733 l 707 653 b 681 626 704 636 694 626 b 676 626 679 626 678 626 l 675 626 b 456 643 638 632 535 643 b 349 579 413 643 349 638 b 390 522 349 560 363 542 l 553 411 b 656 236 636 354 656 297 b 349 -11 656 63 514 -11 b 99 17 303 -11 183 -7 b 78 42 85 21 78 29 b 78 46 78 43 78 44 b 78 49 78 47 78 47 l 93 132 b 122 154 96 146 108 154 b 126 154 124 154 125 154 b 349 139 192 146 307 139 b 468 217 417 139 468 151 b 422 283 468 239 456 260 l 253 400 b 163 565 200 436 163 499 b 456 793 163 749 322 793 b 701 764 539 793 625 783 b 721 739 715 760 721 751 b 721 735 721 738 721 736 "},"t":{"ha":563,"x_min":0,"x_max":0,"o":"m 657 760 b 657 756 657 758 657 757 l 643 674 b 610 646 640 658 625 646 l 485 646 l 408 210 b 401 161 404 189 401 172 b 449 132 401 136 414 132 l 522 132 b 547 115 535 132 547 129 b 547 111 547 114 547 113 l 532 24 b 501 -1 529 10 519 1 b 406 -11 467 -7 436 -11 b 217 142 283 -11 217 31 b 224 210 217 163 219 185 l 300 646 l 172 665 b 150 689 160 667 150 675 b 150 693 150 690 150 692 l 161 756 b 193 783 164 771 178 783 l 324 783 l 344 897 b 376 925 347 913 361 922 l 510 947 b 515 947 511 947 514 947 b 535 931 526 947 535 942 b 535 926 535 929 535 928 l 508 783 l 633 783 b 657 760 647 783 657 774 "},"u":{"ha":822,"x_min":0,"x_max":0,"o":"m 864 760 b 864 754 864 758 864 756 l 736 28 b 704 0 733 13 719 0 l 585 0 b 561 25 571 0 561 11 b 561 28 561 25 561 26 l 565 57 b 343 -12 497 18 421 -12 b 133 199 235 -12 133 44 b 143 301 133 231 136 265 l 222 754 b 256 783 225 769 240 783 l 383 783 b 406 760 399 783 406 774 b 406 754 406 758 406 756 l 326 301 b 317 218 321 267 317 240 b 401 146 317 160 338 146 b 582 196 465 146 546 178 l 681 754 b 713 783 683 769 697 783 l 840 783 b 864 760 856 783 864 772 "},"v":{"ha":765,"x_min":0,"x_max":0,"o":"m 865 765 b 863 751 865 761 865 757 l 576 119 b 381 -11 531 17 451 -11 b 231 119 310 -11 240 17 l 167 751 b 167 754 167 753 167 754 b 193 783 167 771 179 783 l 326 783 b 350 756 339 783 349 774 l 381 174 b 401 139 382 147 390 139 b 433 174 413 139 422 147 l 669 756 b 703 783 676 774 690 783 l 847 783 b 865 765 858 783 865 776 "},"w":{"ha":1138,"x_min":0,"x_max":0,"o":"m 1232 760 b 1231 751 1232 757 1232 754 l 994 113 b 850 -4 964 29 935 -4 l 813 -4 b 700 104 738 -4 706 32 l 665 529 b 663 536 665 535 665 536 b 657 529 660 536 660 535 l 472 104 b 321 -4 440 32 396 -4 l 283 -4 b 181 113 199 -4 182 29 l 167 751 b 200 783 167 768 183 783 l 329 783 b 350 758 343 783 350 772 l 338 171 l 338 168 b 342 151 338 157 339 151 b 354 171 344 151 349 157 l 551 638 b 640 697 574 692 593 697 l 738 697 b 804 638 785 697 800 692 l 838 171 b 843 151 839 157 840 151 b 854 171 846 151 850 158 l 1046 758 b 1075 783 1050 771 1061 783 l 1208 783 b 1232 760 1222 783 1232 774 "},"x":{"ha":815,"x_min":0,"x_max":0,"o":"m 883 771 b 878 756 883 765 882 760 l 579 396 l 761 28 b 763 19 763 25 763 22 b 743 0 763 10 756 0 l 599 0 b 567 28 583 0 578 4 l 446 272 l 251 28 b 208 0 232 4 224 0 l 57 0 b 43 13 49 0 43 6 b 50 28 43 17 46 22 l 375 417 l 207 756 b 206 764 206 758 206 761 b 226 783 206 774 214 783 l 371 783 b 401 756 386 783 392 776 l 507 542 l 675 756 b 717 783 694 781 701 783 l 869 783 b 883 771 879 783 883 778 "},"y":{"ha":776,"x_min":0,"x_max":0,"o":"m 876 764 b 874 751 876 760 875 756 l 499 -60 b 178 -278 429 -211 367 -278 b 33 -260 132 -278 64 -269 b 8 -240 19 -256 8 -251 b 8 -236 8 -239 8 -237 l 24 -147 b 56 -122 26 -132 40 -122 b 58 -122 57 -122 57 -122 b 214 -131 97 -124 175 -131 b 335 -42 274 -131 303 -114 l 353 0 l 338 0 b 238 115 297 0 250 8 l 167 751 b 167 756 167 753 167 754 b 197 783 167 772 176 783 l 332 783 b 354 758 344 783 353 771 l 396 193 b 410 163 397 169 401 163 l 411 163 b 418 163 414 163 417 163 b 422 163 422 163 422 163 l 676 760 b 708 783 682 772 694 783 l 856 783 b 876 764 868 783 876 775 "},"z":{"ha":681,"x_min":0,"x_max":0,"o":"m 751 736 b 750 726 751 733 750 729 l 736 647 b 724 615 735 640 729 621 l 331 172 b 326 165 328 169 326 167 b 335 163 326 163 331 163 l 629 163 b 650 144 642 163 650 156 b 650 140 650 143 650 142 l 631 28 b 597 0 628 13 613 0 l 111 0 b 64 46 83 0 64 19 b 65 56 64 49 65 53 l 76 115 b 101 160 79 131 86 143 l 511 622 b 517 632 515 626 517 629 b 510 635 517 633 514 635 l 207 635 b 185 653 194 635 185 642 b 185 657 185 654 185 656 l 203 756 b 235 783 206 771 219 783 l 704 783 b 751 736 732 783 751 763 "}},"familyName":"NeoSans","ascender":1057,"descender":-275,"underlinePosition":-104,"underlineThickness":69,"boundingBox":{"yMin":-278,"xMin":-89,"yMax":1074,"xMax":1343},"resolution":1000,"original_font_information":{"format":0,"copyright":"Digitized data (C) 2004 Agfa Monotype Corporation. Neo Sans(TM) is a trademark of Agfa Monotype Corporation and may be registered in certain jurisdictions.  All rights reserved. Neo Sans is designed by Sebastian Lester.","fontFamily":"NeoSans","fontSubfamily":"Italic","uniqueID":"1.000;pyrs;NeoSans-MediumItalic","fullName":"NeoSans Medium Italic","version":"Version 1.000;PS 001.001;hotconv 1.0.38","postScriptName":"NeoSans-MediumItalic","trademark":"Please refer to the Copyright section for the font trademark attribution notices.","manufacturer":"Digitized data (C) Agfa Monotype Corporation. Neo Sans(TM) is a trademark of Agfa Monotype Corporation and may be registered in certain jurisdictions","preferredSubfamily":"Medium Italic"},"cssFontWeight":"normal","cssFontStyle":"italic"};
let neoSans_Italic = {"glyphs":{"0":{"ha":896,"x_min":0,"x_max":0,"o":"m 942 713 b 929 575 942 671 938 625 l 908 456 b 450 -12 849 110 707 -12 b 147 319 267 -12 147 97 b 160 456 147 361 151 407 l 181 575 b 638 1044 244 944 393 1044 b 942 713 828 1044 942 932 m 707 715 b 603 847 707 818 668 847 b 418 575 514 847 456 789 l 397 456 b 382 314 388 397 382 350 b 485 185 382 213 419 185 b 671 456 571 185 632 236 l 692 575 b 707 715 701 632 707 679 "},"1":{"ha":896,"x_min":0,"x_max":0,"o":"m 388 197 l 492 794 l 297 717 b 281 713 290 714 285 713 b 268 731 271 713 267 719 l 296 889 b 314 908 299 899 303 904 l 586 1026 b 619 1032 596 1031 606 1032 l 744 1032 b 765 1006 760 1032 768 1021 l 624 197 l 808 197 b 831 171 824 197 833 186 l 806 28 b 774 0 803 13 789 0 l 168 0 b 144 28 153 0 142 13 l 169 171 b 203 197 172 186 188 197 "},"2":{"ha":896,"x_min":0,"x_max":0,"o":"m 943 829 b 733 508 943 679 868 589 l 601 429 b 364 197 499 368 394 322 l 796 197 b 819 175 810 197 819 188 l 819 172 l 819 171 l 794 28 b 761 0 792 13 776 0 l 143 0 b 121 22 129 0 121 10 l 121 26 l 121 28 l 146 169 b 396 533 172 322 260 449 l 540 624 b 711 792 676 708 711 731 b 578 857 711 838 676 857 b 301 839 493 857 388 847 l 299 839 b 278 861 286 839 278 849 l 278 867 l 297 975 b 328 1001 300 989 313 997 b 632 1044 410 1025 514 1044 b 943 829 840 1044 943 961 "},"3":{"ha":896,"x_min":0,"x_max":0,"o":"m 940 808 b 772 528 940 690 886 578 b 864 356 824 497 864 425 b 438 -12 864 97 674 -12 b 157 26 329 -12 225 4 b 136 49 146 31 136 38 l 136 51 l 136 53 l 156 164 b 185 189 158 179 171 189 l 186 189 l 188 189 b 461 176 283 181 386 176 b 631 365 586 176 631 249 b 533 439 631 414 604 439 l 289 439 b 267 461 275 439 267 449 l 267 465 l 267 467 l 288 585 b 319 611 290 600 304 611 l 558 611 b 703 782 669 611 703 683 b 582 856 703 833 674 856 b 306 839 485 856 413 849 l 304 839 l 303 839 b 282 858 290 839 282 846 l 282 863 l 282 864 l 301 975 b 333 1001 304 989 318 997 b 625 1044 410 1024 517 1044 b 940 808 818 1044 940 964 "},"4":{"ha":896,"x_min":0,"x_max":0,"o":"m 904 388 l 882 260 b 849 232 879 244 864 232 l 757 232 l 722 28 b 690 0 719 13 706 0 l 506 0 b 485 22 492 0 485 10 l 485 28 l 519 232 l 118 232 b 96 254 104 232 96 242 l 96 260 l 119 394 b 143 438 122 410 131 424 l 683 1013 b 722 1032 696 1025 706 1032 l 871 1032 b 893 1010 885 1032 893 1022 l 893 1004 l 790 415 l 882 415 b 904 393 896 415 904 406 m 611 708 b 607 714 611 713 610 714 b 601 711 606 714 603 713 l 344 429 b 340 421 342 426 340 422 b 349 415 340 417 343 415 l 560 415 l 611 706 l 611 708 "},"5":{"ha":896,"x_min":0,"x_max":0,"o":"m 938 1006 l 913 867 b 881 840 910 851 896 840 l 503 840 l 451 649 l 492 649 b 856 392 717 649 856 576 b 414 -12 856 110 686 -12 b 149 28 325 -12 225 3 b 125 53 138 32 125 38 l 125 57 l 125 58 l 144 168 b 175 193 147 183 161 193 l 176 193 l 178 193 b 424 176 264 183 372 176 b 615 374 561 176 615 240 b 438 467 615 447 572 467 l 222 467 b 207 483 213 467 207 475 l 207 486 l 207 488 l 342 1006 b 374 1032 346 1019 360 1032 l 914 1032 b 938 1010 928 1032 938 1022 l 938 1007 "},"6":{"ha":896,"x_min":0,"x_max":0,"o":"m 929 1017 b 954 986 950 1011 957 1004 l 933 865 b 896 836 929 842 922 832 b 647 856 831 846 729 856 b 438 653 514 856 460 807 l 436 643 b 603 660 474 650 544 660 b 894 407 765 660 894 581 b 478 -12 894 136 722 -12 b 151 289 267 -12 151 99 b 197 608 151 339 163 410 b 661 1044 258 956 400 1044 b 929 1017 786 1044 875 1031 m 661 386 b 536 494 661 471 608 494 b 407 481 500 494 440 486 b 381 296 396 421 381 357 b 492 168 381 193 428 168 b 661 386 617 168 661 271 "},"7":{"ha":896,"x_min":0,"x_max":0,"o":"m 689 833 b 681 840 689 838 686 840 l 301 840 b 276 867 286 840 272 844 l 301 1006 b 335 1032 304 1021 311 1032 l 936 1032 b 975 986 964 1032 981 1021 l 957 885 b 924 821 954 867 940 847 l 418 26 b 379 0 407 8 396 0 l 183 0 b 161 14 167 0 161 6 b 168 32 161 19 164 26 l 686 825 b 689 833 688 828 689 831 "},"8":{"ha":896,"x_min":0,"x_max":0,"o":"m 956 790 b 801 536 956 679 906 590 b 883 357 853 493 883 431 b 454 -12 883 94 697 -12 l 439 -12 b 122 246 250 -12 122 86 b 286 536 122 369 182 468 b 210 711 236 581 210 635 b 626 1044 210 963 401 1044 l 642 1044 b 956 790 846 1044 956 943 m 733 779 b 611 871 733 838 696 871 l 596 871 b 429 707 489 871 429 814 b 536 617 429 653 463 617 l 579 617 b 733 779 678 617 733 688 m 654 349 b 550 450 654 401 626 450 l 507 450 b 351 263 403 450 351 356 b 471 163 351 203 385 163 l 486 163 b 654 349 599 163 654 246 "},"9":{"ha":896,"x_min":0,"x_max":0,"o":"m 929 743 b 883 424 929 693 918 622 b 419 -12 822 76 681 -12 b 151 15 294 -12 206 1 b 126 39 136 19 126 25 l 126 46 l 147 167 b 185 196 151 190 161 200 b 433 176 250 185 351 176 b 643 379 567 176 621 225 l 644 389 b 478 372 607 382 536 372 b 186 625 315 372 186 451 b 621 1044 186 896 358 1044 b 929 743 814 1044 929 933 m 700 736 b 589 864 700 839 653 864 b 419 646 464 864 419 761 b 544 538 419 561 472 538 b 674 551 581 538 640 546 b 700 736 685 611 700 675 "},"ý":{"ha":694,"x_min":0,"x_max":0,"o":"m 17 924 l 676 924 l 676 0 l 17 0 m 347 521 l 571 858 l 122 858 m 83 126 b 307 463 83 125 307 463 l 83 799 m 386 463 l 611 125 l 611 799 m 347 403 l 122 67 l 571 67 "}," ":{"ha":347,"x_min":0,"x_max":0,"o":""},"!":{"ha":379,"x_min":0,"x_max":0,"o":"m 489 1038 l 339 344 b 306 315 336 329 321 315 l 188 315 b 163 340 174 315 163 328 l 163 344 l 257 1038 b 292 1065 258 1053 276 1065 l 465 1065 b 489 1043 479 1065 489 1056 m 335 203 l 304 28 b 272 0 301 13 288 0 l 108 0 b 86 22 94 0 86 10 l 86 28 l 117 203 b 149 229 119 218 133 229 l 313 229 b 335 208 326 229 335 221 "},"\"":{"ha":656,"x_min":0,"x_max":0,"o":"m 808 1054 b 804 1039 808 1050 807 1044 l 646 735 b 615 708 636 717 629 708 l 475 708 b 464 718 467 708 464 713 b 468 735 464 722 465 728 l 597 1039 b 629 1065 606 1058 615 1065 l 794 1065 b 808 1054 804 1065 808 1061 m 504 1054 b 500 1039 504 1050 503 1044 l 342 735 b 311 708 332 717 325 708 l 171 708 b 160 718 163 708 160 713 b 164 735 160 722 161 728 l 293 1039 b 325 1065 301 1058 311 1065 l 490 1065 b 504 1054 500 1065 504 1061 "},"#":{"ha":971,"x_min":0,"x_max":0,"o":"m 1038 751 b 1036 746 1038 749 1036 747 l 1000 640 b 976 625 997 631 986 625 l 858 625 l 799 401 l 915 401 b 938 383 926 401 938 394 b 936 379 938 382 936 381 l 904 281 b 878 260 901 271 888 260 l 761 260 l 700 26 b 671 0 696 13 686 0 l 529 0 b 510 19 517 0 510 8 b 511 26 510 21 511 24 l 572 260 l 415 260 l 353 26 b 324 0 349 13 338 0 l 181 0 b 161 19 169 0 161 8 b 163 26 161 22 163 24 l 224 260 l 106 260 b 89 274 96 260 89 265 b 90 281 89 276 89 278 l 125 385 b 147 401 128 394 138 401 l 263 401 l 321 625 l 203 625 b 186 638 193 625 186 629 b 188 644 186 640 186 642 l 222 751 b 247 767 225 761 238 767 l 358 767 l 422 1006 b 453 1032 426 1019 439 1032 l 596 1032 b 614 1013 607 1032 614 1024 b 613 1006 614 1011 613 1008 l 549 767 l 706 767 l 771 1006 b 801 1032 775 1019 786 1032 l 943 1032 b 961 1014 956 1032 961 1024 b 960 1006 961 1011 961 1008 l 894 767 l 1015 767 b 1038 751 1026 767 1038 761 m 513 625 l 453 401 l 610 401 l 669 625 "},"$":{"ha":896,"x_min":0,"x_max":0,"o":"m 932 988 l 908 850 b 879 825 906 835 893 825 l 876 825 b 585 840 792 833 679 840 b 463 749 515 840 463 828 b 536 665 463 719 479 700 l 696 569 b 843 338 804 504 843 421 b 529 -1 843 146 718 18 l 506 -132 b 474 -160 503 -147 489 -160 l 321 -160 b 297 -136 307 -160 297 -150 l 297 -132 l 319 -8 b 147 18 251 -4 194 6 b 126 42 135 21 126 29 l 126 46 l 150 182 b 181 208 153 196 165 208 l 183 208 b 443 192 239 201 378 192 b 588 307 529 192 588 211 b 517 397 588 338 571 361 l 346 511 b 218 731 251 574 218 657 b 503 1035 218 915 333 1013 l 525 1156 b 558 1183 528 1171 543 1183 l 711 1183 b 733 1161 725 1183 733 1174 l 733 1156 l 713 1040 b 911 1014 793 1035 875 1024 b 932 992 922 1011 932 1003 "},"%":{"ha":1165,"x_min":0,"x_max":0,"o":"m 1178 389 b 1172 331 1178 371 1176 351 l 1154 226 b 906 -12 1124 49 1039 -12 b 738 168 796 -12 738 61 b 743 226 738 186 739 206 l 761 331 b 1008 568 793 513 876 568 b 1178 389 1115 568 1178 499 m 1149 1024 b 1140 1004 1149 1018 1146 1011 l 392 29 b 354 0 376 10 369 0 l 211 0 b 199 11 203 0 199 4 b 206 29 199 17 200 22 l 954 1004 b 994 1032 971 1025 979 1032 l 1138 1032 b 1149 1024 1146 1032 1149 1029 m 611 865 b 606 807 611 847 610 828 l 588 703 b 339 464 557 525 472 464 b 171 644 229 464 171 538 b 176 703 171 663 172 682 l 194 807 b 442 1044 226 989 310 1044 b 611 865 549 1044 611 975 m 1038 386 b 988 449 1038 435 1018 449 b 900 331 947 449 917 425 l 882 226 b 876 171 878 204 876 186 b 926 107 876 122 896 107 b 1014 226 967 107 997 132 l 1032 331 b 1038 386 1036 353 1038 371 m 471 863 b 421 925 471 911 451 925 b 333 807 381 925 350 901 l 315 703 b 310 647 311 681 310 663 b 360 583 310 599 329 583 b 447 703 400 583 431 608 l 465 807 b 471 863 469 829 471 847 "},"&":{"ha":1017,"x_min":0,"x_max":0,"o":"m 1011 497 l 1010 486 b 875 183 997 382 957 283 l 990 33 b 996 21 993 29 996 25 b 975 0 996 10 986 0 l 778 0 b 756 11 767 0 763 1 l 722 56 b 451 -12 646 13 554 -12 b 115 244 272 -12 115 50 b 350 542 115 400 226 474 l 340 554 b 260 764 272 642 260 710 b 628 1044 260 983 433 1044 b 908 832 811 1044 908 953 b 676 532 908 682 804 604 l 628 504 l 775 314 b 831 486 797 350 819 399 l 832 497 b 861 525 833 513 846 525 l 990 525 b 1011 501 1004 525 1011 515 m 701 821 b 606 889 701 863 671 889 b 461 763 519 889 461 853 b 517 649 461 733 471 701 l 526 638 l 567 660 b 701 821 633 696 701 733 m 453 407 b 343 244 378 365 343 326 b 481 149 343 176 383 149 b 625 181 538 149 585 160 "},"'":{"ha":351,"x_min":0,"x_max":0,"o":"m 504 1054 b 500 1039 504 1050 503 1044 l 342 735 b 311 708 332 717 325 708 l 171 708 b 160 718 163 708 160 713 b 164 735 160 722 161 728 l 293 1039 b 325 1065 301 1058 311 1065 l 490 1065 b 504 1054 500 1065 504 1061 "},"(":{"ha":501,"x_min":0,"x_max":0,"o":"m 642 1021 b 631 996 642 1014 638 1006 b 344 132 443 733 344 453 b 400 -233 344 -12 367 -140 b 404 -251 403 -239 404 -246 b 385 -269 404 -262 399 -269 l 260 -269 b 215 -250 239 -269 224 -265 b 119 174 151 -133 119 17 b 425 1013 119 476 222 785 b 475 1032 439 1028 454 1032 l 628 1032 b 642 1021 638 1032 642 1028 "},")":{"ha":501,"x_min":0,"x_max":0,"o":"m 515 581 b 211 -250 515 281 413 -25 b 161 -269 197 -265 182 -269 l 8 -269 b -7 -258 -3 -269 -7 -265 b 4 -233 -7 -251 -3 -242 b 293 639 194 32 293 314 b 235 996 293 785 269 901 b 232 1013 233 1001 232 1007 b 251 1032 232 1024 238 1032 l 376 1032 b 421 1013 397 1032 413 1028 b 515 581 472 917 515 761 "},"*":{"ha":665,"x_min":0,"x_max":0,"o":"m 757 792 b 736 771 757 782 749 775 l 576 724 l 676 588 b 683 568 681 581 683 574 b 675 551 683 561 682 556 l 603 499 b 590 494 599 496 594 494 b 568 508 582 494 574 500 l 472 647 l 376 508 b 354 494 371 500 363 494 b 342 499 350 494 346 496 l 268 551 b 258 568 261 556 258 561 b 267 588 258 574 263 581 l 367 724 l 208 771 b 186 793 196 775 186 782 b 188 800 186 794 186 797 l 215 888 b 233 901 218 897 225 901 b 249 899 239 901 243 900 l 408 846 l 404 1011 b 426 1040 404 1026 411 1040 l 518 1040 b 539 1011 533 1040 539 1026 l 538 846 l 694 899 b 710 901 700 900 704 901 b 728 888 718 901 725 897 l 756 800 b 757 792 757 797 757 794 "},"+":{"ha":896,"x_min":0,"x_max":0,"o":"m 904 481 b 876 458 904 465 892 458 l 640 458 l 640 224 b 618 196 640 208 633 196 l 493 196 b 471 224 478 196 471 208 l 471 458 l 236 458 b 208 481 221 458 208 465 l 208 606 b 236 628 208 621 221 628 l 471 628 l 471 864 b 493 892 471 879 478 892 l 618 892 b 640 864 633 892 640 879 l 640 628 l 876 628 b 904 606 892 628 904 621 l 904 481 "},",":{"ha":381,"x_min":0,"x_max":0,"o":"m 358 215 b 354 203 358 211 357 207 l 165 -108 b 135 -136 156 -124 150 -136 l 13 -136 b -8 -118 0 -136 -8 -129 b -6 -108 -8 -115 -7 -111 l 139 203 b 171 229 147 219 156 229 l 340 229 b 358 215 351 229 358 224 "},"-":{"ha":419,"x_min":0,"x_max":0,"o":"m 456 474 l 438 371 b 406 346 435 356 421 346 l 136 346 b 113 367 122 346 113 354 l 113 371 l 131 474 b 163 500 133 489 147 500 l 432 500 b 456 478 446 500 456 492 "},".":{"ha":381,"x_min":0,"x_max":0,"o":"m 336 203 l 306 28 b 272 0 303 13 288 0 l 110 0 b 86 24 96 0 86 10 l 86 28 l 117 203 b 150 229 119 218 135 229 l 313 229 b 336 207 326 229 336 221 "},"/":{"ha":563,"x_min":0,"x_max":0,"o":"m 721 1014 b 718 1004 721 1011 719 1007 l 254 29 b 221 0 247 14 236 0 l 44 0 b 22 19 32 0 22 8 b 25 29 22 22 24 26 l 490 1004 b 524 1032 497 1019 508 1032 l 700 1032 b 721 1014 711 1032 721 1025 "},":":{"ha":382,"x_min":0,"x_max":0,"o":"m 429 733 l 399 558 b 367 532 396 543 382 532 l 204 532 b 179 554 190 532 179 542 l 179 558 l 210 733 b 244 761 213 749 229 761 l 407 761 b 429 739 421 761 429 751 m 336 203 l 306 28 b 272 0 303 13 288 0 l 110 0 b 86 24 96 0 86 10 l 86 28 l 117 203 b 150 229 119 218 135 229 l 313 229 b 336 207 326 229 336 221 "},";":{"ha":382,"x_min":0,"x_max":0,"o":"m 429 733 l 399 558 b 365 532 396 543 381 532 l 203 532 b 179 554 189 532 179 540 l 179 558 l 210 733 b 243 761 213 749 228 761 l 406 761 b 429 738 419 761 429 751 m 336 213 b 332 200 336 210 335 206 l 146 -111 b 113 -139 136 -126 128 -139 l -10 -139 b -29 -122 -21 -139 -29 -132 b -26 -111 -29 -118 -28 -115 l 117 200 b 150 226 124 217 135 226 l 319 226 b 336 213 331 226 336 221 "},"<":{"ha":896,"x_min":0,"x_max":0,"o":"m 817 208 b 800 190 817 199 810 190 l 607 190 b 574 206 592 190 583 197 l 250 493 b 222 543 231 510 222 524 b 250 593 222 563 231 576 l 574 881 b 607 896 583 889 592 896 l 800 896 b 817 878 810 896 817 888 b 808 861 817 872 814 867 l 449 543 l 808 225 b 817 208 814 219 817 214 "},"=":{"ha":896,"x_min":0,"x_max":0,"o":"m 861 658 b 833 636 861 643 849 636 l 251 636 b 224 658 236 636 224 643 l 224 783 b 251 806 224 799 236 806 l 833 806 b 861 783 849 806 861 799 l 861 658 m 861 303 b 833 281 861 288 849 281 l 251 281 b 224 303 236 281 224 288 l 224 428 b 251 450 224 443 236 450 l 833 450 b 861 428 849 450 861 443 l 861 303 "},">":{"ha":896,"x_min":0,"x_max":0,"o":"m 867 543 b 838 493 867 524 857 510 l 515 206 b 482 190 506 197 497 190 l 289 190 b 272 208 279 190 272 199 b 281 225 272 214 275 219 l 640 543 l 281 861 b 272 878 275 867 272 872 b 289 896 272 888 279 896 l 482 896 b 515 881 497 896 506 889 l 838 593 b 867 543 857 576 867 563 "},"?":{"ha":665,"x_min":0,"x_max":0,"o":"m 749 872 b 599 585 749 751 679 668 l 521 504 b 418 381 443 424 424 410 l 411 342 b 374 315 408 325 389 315 l 235 315 b 214 338 221 315 214 326 l 214 343 l 219 381 b 308 567 231 453 243 497 l 390 654 b 483 817 435 701 483 746 b 425 857 483 842 472 857 b 224 842 353 857 292 850 l 219 842 b 200 861 206 842 200 850 b 201 871 200 864 201 868 l 222 994 b 254 1031 225 1014 232 1025 b 482 1060 317 1049 404 1060 b 749 872 635 1060 749 999 m 400 201 l 368 26 b 336 0 365 11 351 0 l 172 0 b 149 22 158 0 149 8 l 149 26 l 181 201 b 213 229 183 217 197 229 l 376 229 b 400 206 390 229 400 219 "},"@":{"ha":1075,"x_min":0,"x_max":0,"o":"m 1085 546 b 521 64 1085 185 846 64 b 299 242 389 64 299 129 b 304 290 299 258 301 274 l 335 451 b 633 683 369 635 472 683 b 817 663 693 683 760 675 b 846 631 836 658 846 646 b 844 619 846 626 846 624 l 763 204 b 972 547 919 231 972 410 b 672 819 972 700 886 819 b 235 478 429 819 281 704 l 190 256 b 179 167 185 225 179 199 b 499 -67 179 10 288 -67 b 704 -56 582 -67 656 -56 l 706 -56 l 707 -56 l 711 -56 b 721 -64 718 -56 721 -57 l 721 -68 l 721 -69 l 715 -124 b 696 -142 714 -133 707 -140 b 489 -156 649 -147 575 -156 b 67 167 236 -156 67 -42 b 76 256 67 196 71 226 l 122 485 b 683 918 181 778 378 918 b 1085 546 950 918 1085 739 m 672 544 b 601 551 649 549 624 551 b 492 446 535 551 508 525 l 460 292 b 456 251 457 281 456 263 b 544 196 456 207 482 196 b 603 197 565 196 585 196 l 672 544 "},"A":{"ha":929,"x_min":0,"x_max":0,"o":"m 907 28 b 879 0 907 11 894 0 l 689 0 b 665 25 675 0 665 11 l 656 253 l 371 253 l 281 25 b 249 0 275 11 263 0 l 50 0 b 31 17 38 0 31 7 b 33 29 31 21 32 25 l 392 890 b 650 1044 447 1024 554 1044 b 851 890 746 1044 843 1024 l 907 29 l 907 28 m 633 826 b 619 847 633 840 632 847 b 596 826 607 847 601 840 l 443 443 l 650 443 "},"B":{"ha":929,"x_min":0,"x_max":0,"o":"m 996 807 b 835 525 996 692 946 575 b 926 357 896 489 926 421 b 429 -12 926 67 671 -12 b 175 4 338 -12 228 -6 b 111 64 131 13 111 25 b 114 94 111 72 113 83 l 263 939 b 353 1029 274 1001 297 1021 b 607 1044 401 1036 518 1044 b 996 807 836 1044 996 978 m 763 768 b 588 850 763 829 713 850 b 482 849 565 850 501 850 l 439 608 l 594 608 b 763 768 700 608 763 660 m 694 347 b 565 443 694 401 661 443 l 410 443 l 364 183 b 478 182 386 183 458 182 b 694 347 593 182 694 210 "},"C":{"ha":779,"x_min":0,"x_max":0,"o":"m 897 990 l 874 856 b 840 828 871 839 858 828 l 839 828 l 838 828 b 635 839 786 832 711 839 b 421 604 539 839 454 789 l 389 429 b 381 344 383 397 381 369 b 521 194 381 229 442 194 b 728 206 597 194 674 201 l 732 206 b 756 185 746 206 756 199 b 754 178 756 183 754 181 l 729 43 b 693 11 725 24 714 17 b 482 -12 663 1 579 -12 b 139 326 300 -12 139 99 b 149 429 139 358 142 393 l 181 604 b 669 1044 247 969 447 1044 b 872 1021 767 1044 844 1031 b 897 997 889 1015 897 1011 l 897 993 "},"D":{"ha":947,"x_min":0,"x_max":0,"o":"m 993 706 b 983 606 993 674 990 640 l 951 426 b 431 -12 896 113 739 -12 b 139 8 315 -12 194 -1 b 106 43 118 13 106 21 b 107 57 106 47 106 51 l 269 975 b 318 1024 275 1007 290 1019 b 618 1044 376 1033 503 1044 b 993 706 849 1044 993 921 m 754 688 b 582 843 754 808 686 843 b 483 840 547 843 503 842 l 368 192 b 467 189 388 190 432 189 b 714 426 600 189 681 239 l 746 606 b 754 688 751 636 754 664 "},"E":{"ha":807,"x_min":0,"x_max":0,"o":"m 906 1007 b 904 999 906 1004 904 1001 l 881 869 b 849 842 878 854 864 842 l 567 842 b 461 749 510 842 475 831 l 439 621 l 799 621 b 821 597 813 621 821 611 l 821 593 l 799 461 b 765 433 796 446 781 433 l 406 433 l 379 286 b 375 250 376 272 375 260 b 451 192 375 206 399 192 l 733 192 b 757 168 747 192 757 182 l 757 164 l 733 35 b 701 6 731 17 721 8 b 432 -12 651 -1 582 -12 b 136 218 288 -12 136 39 b 143 286 136 239 139 263 l 225 747 b 617 1044 272 1017 426 1044 b 881 1026 767 1044 833 1033 b 906 1007 897 1024 906 1019 "},"F":{"ha":807,"x_min":0,"x_max":0,"o":"m 906 1004 b 904 997 906 1003 904 1000 l 881 868 b 849 840 878 853 864 840 l 567 840 b 461 746 501 840 474 818 l 439 621 l 799 621 b 821 599 813 621 821 611 l 821 593 l 799 461 b 765 433 796 446 781 433 l 406 433 l 335 28 b 301 0 332 13 317 0 l 121 0 b 99 22 107 0 99 10 l 99 28 l 225 746 b 615 1044 271 1008 424 1044 b 881 1025 765 1044 833 1032 b 906 1004 897 1022 906 1017 "},"G":{"ha":896,"x_min":0,"x_max":0,"o":"m 981 992 l 954 844 b 931 826 951 829 943 826 l 926 826 b 639 838 860 829 757 838 b 415 601 526 838 449 793 l 385 428 b 375 336 379 393 375 363 b 499 192 375 221 432 192 b 607 196 538 192 574 193 l 663 515 b 694 543 665 531 679 543 l 872 543 b 894 521 886 543 894 533 l 894 515 l 813 49 b 779 17 810 29 801 21 b 463 -12 701 1 601 -12 b 135 325 321 -12 135 75 b 144 429 135 357 138 392 l 175 601 b 676 1044 243 985 450 1044 b 961 1013 815 1044 911 1024 b 981 996 971 1010 981 1006 "},"H":{"ha":1013,"x_min":0,"x_max":0,"o":"m 1093 1006 l 921 28 b 888 0 918 13 903 0 l 706 0 b 683 22 692 0 683 10 l 683 28 l 753 429 l 410 429 l 340 28 b 307 0 338 13 322 0 l 125 0 b 103 22 111 0 103 10 l 103 28 l 275 1006 b 307 1032 278 1021 292 1032 l 489 1032 b 513 1010 503 1032 513 1024 l 513 1006 l 447 636 l 790 636 l 856 1006 b 888 1032 858 1021 872 1032 l 1069 1032 b 1093 1010 1083 1032 1093 1024 "},"I":{"ha":432,"x_min":0,"x_max":0,"o":"m 513 1006 l 340 28 b 308 0 338 13 324 0 l 122 0 b 103 21 110 0 103 10 l 103 28 l 275 1006 b 304 1032 278 1021 289 1032 l 490 1032 b 513 1011 504 1032 513 1024 "},"J":{"ha":432,"x_min":0,"x_max":0,"o":"m 513 1006 l 333 -8 b 42 -249 300 -197 182 -249 b -46 -243 10 -249 -10 -247 b -62 -224 -56 -242 -62 -235 l -62 -219 l -37 -78 b -18 -58 -36 -68 -28 -58 l 51 -58 b 96 -8 83 -58 90 -43 l 275 1006 b 307 1032 278 1021 292 1032 l 489 1032 b 513 1010 503 1032 513 1022 "},"K":{"ha":942,"x_min":0,"x_max":0,"o":"m 1086 1018 b 1075 997 1086 1013 1082 1006 l 646 528 l 890 29 b 893 17 893 25 893 21 b 871 0 893 7 885 0 l 647 0 b 619 19 631 0 625 8 l 419 478 l 340 28 b 307 0 338 13 322 0 l 125 0 b 103 22 111 0 103 10 l 103 28 l 275 1006 b 307 1032 278 1021 292 1032 l 489 1032 b 513 1010 503 1032 513 1024 l 513 1006 l 438 585 l 804 1015 b 838 1032 814 1026 822 1032 l 1065 1032 b 1086 1018 1079 1032 1086 1026 "},"L":{"ha":721,"x_min":0,"x_max":0,"o":"m 719 164 l 696 35 b 664 6 693 17 685 10 b 433 -12 617 -4 507 -12 b 140 217 281 -12 140 42 b 147 286 140 238 143 261 l 274 1004 b 307 1032 276 1019 292 1032 l 489 1032 b 511 1010 503 1032 511 1022 l 511 1004 l 385 286 b 381 250 382 272 381 260 b 457 192 381 206 404 192 l 696 192 b 719 168 710 192 719 182 "},"M":{"ha":1133,"x_min":0,"x_max":0,"o":"m 1211 993 b 1210 983 1211 990 1210 988 l 1039 19 b 1013 0 1036 4 1024 0 l 829 0 b 813 22 818 0 813 10 l 813 28 l 914 607 l 914 611 b 908 618 914 617 911 618 b 896 608 904 618 901 615 l 731 379 b 685 356 718 363 703 356 l 574 356 b 536 379 556 356 543 363 l 451 608 b 442 618 449 615 446 618 b 433 607 439 618 435 617 l 332 28 b 304 0 329 13 317 0 l 121 0 b 100 15 111 0 100 4 l 100 19 l 271 985 b 329 1032 276 1014 300 1032 l 450 1032 b 504 994 479 1032 496 1017 l 647 599 b 660 581 651 588 654 581 b 678 599 665 581 669 588 l 960 994 b 1028 1032 976 1018 999 1032 l 1168 1032 b 1211 993 1194 1032 1211 1017 "},"N":{"ha":1013,"x_min":0,"x_max":0,"o":"m 1093 1006 l 925 53 b 864 0 919 24 893 0 l 747 0 b 671 43 718 0 686 6 l 440 590 b 429 601 436 599 433 601 b 421 590 425 601 422 599 l 322 28 b 289 0 319 13 304 0 l 125 0 b 103 24 111 0 103 10 l 103 28 l 269 979 b 332 1032 275 1008 303 1032 l 438 1032 b 513 989 465 1032 499 1024 l 751 417 b 760 406 756 408 756 406 b 769 418 763 406 768 408 l 874 1006 b 906 1032 876 1021 890 1032 l 1069 1032 b 1093 1010 1083 1032 1093 1022 "},"O":{"ha":969,"x_min":0,"x_max":0,"o":"m 1011 707 b 1001 599 1011 674 1008 638 l 972 433 b 482 -12 915 108 743 -12 b 140 328 292 -12 140 100 b 150 433 140 361 143 396 l 179 599 b 669 1044 240 943 438 1044 b 1011 707 856 1044 1011 943 m 772 690 b 632 836 772 794 725 836 b 419 599 515 836 450 772 l 390 433 b 381 336 383 396 381 364 b 519 196 381 232 428 196 b 733 433 636 196 704 267 l 763 599 b 772 690 768 633 772 664 "},"P":{"ha":906,"x_min":0,"x_max":0,"o":"m 986 763 b 983 710 986 746 985 728 l 982 697 b 508 361 953 435 749 361 b 396 365 475 361 431 364 l 338 28 b 304 0 335 13 319 0 l 125 0 b 101 22 111 0 101 8 l 101 26 l 267 960 b 340 1026 275 1007 296 1019 b 626 1044 413 1038 526 1044 b 986 763 838 1044 986 961 m 749 736 b 594 847 749 815 700 847 b 481 843 575 847 497 844 l 431 560 b 543 557 446 558 528 557 b 746 697 667 557 735 601 l 747 710 b 749 736 749 719 749 728 "},"Q":{"ha":969,"x_min":0,"x_max":0,"o":"m 1011 707 b 1001 599 1011 674 1008 638 l 972 433 b 594 -4 924 158 793 29 l 590 -29 l 590 -33 l 590 -40 b 619 -64 590 -61 601 -64 l 744 -64 b 774 -82 757 -64 774 -68 l 774 -86 l 754 -200 b 717 -231 751 -214 738 -225 b 558 -249 676 -240 613 -249 b 363 -82 446 -249 363 -206 b 367 -31 363 -67 364 -49 l 372 1 b 140 328 236 38 140 146 b 150 433 140 361 143 396 l 179 599 b 669 1044 240 943 438 1044 b 1011 707 856 1044 1011 943 m 772 690 b 632 836 772 794 725 836 b 419 599 515 836 450 772 l 390 433 b 381 336 383 396 381 364 b 519 196 381 232 428 196 b 733 433 636 196 704 267 l 763 599 b 772 690 768 633 772 664 "},"R":{"ha":944,"x_min":0,"x_max":0,"o":"m 990 779 b 756 424 990 614 918 479 l 896 32 b 899 21 897 28 899 25 b 874 0 899 10 890 0 l 672 0 b 650 28 657 0 656 14 l 525 379 l 524 379 b 499 378 518 379 510 378 b 400 381 469 378 426 381 l 339 28 b 306 0 336 13 321 0 l 125 0 b 103 22 111 0 103 10 l 103 26 l 103 28 l 267 960 b 340 1026 275 1007 296 1019 b 626 1044 407 1038 526 1044 b 990 779 835 1044 990 967 m 753 749 b 590 843 753 821 699 843 b 482 839 571 843 499 840 l 435 572 b 532 569 450 571 517 569 b 753 749 668 569 753 603 "},"S":{"ha":817,"x_min":0,"x_max":0,"o":"m 904 989 l 879 849 b 851 825 876 833 867 825 l 849 825 b 557 840 810 828 651 840 b 433 751 490 840 433 829 b 504 671 433 722 447 708 l 665 565 b 814 343 769 497 814 424 b 382 -12 814 89 615 -12 b 119 18 272 -12 188 0 b 97 42 107 21 97 29 l 97 46 l 121 182 b 150 208 124 199 135 208 l 154 208 b 415 192 210 203 361 192 b 558 306 493 192 558 217 b 486 403 558 336 542 367 l 315 515 b 190 731 228 572 190 653 b 599 1044 190 974 389 1044 b 888 1014 700 1044 838 1028 b 904 994 899 1011 904 1004 "},"T":{"ha":815,"x_min":0,"x_max":0,"o":"m 958 1006 l 933 863 b 899 836 931 847 914 836 l 674 836 l 532 28 b 499 0 529 13 514 0 l 317 0 b 294 22 303 0 294 10 l 294 28 l 436 836 l 210 836 b 188 857 196 836 188 844 l 188 863 l 213 1006 b 244 1032 215 1021 229 1032 l 933 1032 b 958 1010 947 1032 958 1022 "},"U":{"ha":988,"x_min":0,"x_max":0,"o":"m 1072 1006 l 963 388 b 490 -12 900 39 711 -12 b 153 289 296 -12 153 78 b 161 388 153 319 154 351 l 271 1006 b 303 1032 274 1021 288 1032 l 485 1032 b 508 1010 499 1032 508 1022 l 508 1006 l 399 388 b 390 306 393 357 390 329 b 526 186 390 222 429 186 b 725 388 651 186 700 246 l 835 1006 b 867 1032 838 1021 851 1032 l 1047 1032 b 1072 1010 1061 1032 1072 1024 "},"V":{"ha":953,"x_min":0,"x_max":0,"o":"m 1092 1015 b 1089 1003 1092 1011 1090 1007 l 731 142 b 474 -12 675 8 569 -12 b 271 142 378 -12 279 8 l 215 1003 l 215 1004 b 244 1032 215 1021 228 1032 l 431 1032 b 454 1007 444 1032 454 1021 l 486 206 b 501 185 486 190 489 185 b 525 206 514 185 519 190 l 840 1007 b 871 1032 846 1021 857 1032 l 1072 1032 b 1092 1015 1085 1032 1092 1025 "},"W":{"ha":1235,"x_min":0,"x_max":0,"o":"m 1390 1018 b 1389 1011 1390 1017 1390 1014 l 1100 101 b 953 -4 1075 21 1026 -4 l 883 -4 b 763 90 822 -4 768 21 l 726 506 b 717 517 725 517 724 517 b 703 506 710 517 707 517 l 519 90 b 375 -4 489 19 436 -4 l 304 -4 b 188 131 233 -4 188 54 l 188 138 l 218 1011 b 244 1032 218 1026 232 1032 l 428 1032 b 446 1008 439 1032 446 1022 l 446 1006 l 397 261 l 397 254 b 403 243 397 247 399 243 b 415 261 407 243 410 249 l 583 643 b 681 710 607 696 643 710 l 818 710 b 893 643 856 710 889 696 l 925 261 b 932 243 926 249 928 243 b 943 261 938 243 940 249 l 1158 1006 b 1185 1032 1163 1021 1174 1032 l 1371 1032 b 1390 1018 1381 1032 1390 1028 "},"X":{"ha":976,"x_min":0,"x_max":0,"o":"m 1086 1017 b 1082 1006 1086 1013 1085 1010 l 708 515 l 922 28 b 925 18 924 24 925 21 b 903 0 925 7 915 0 l 704 0 b 672 21 686 0 679 6 l 543 314 l 331 28 b 290 0 318 11 306 0 l 85 0 b 67 14 74 0 67 7 b 72 28 67 18 69 24 l 450 529 l 242 1006 b 240 1013 240 1008 240 1010 b 264 1032 240 1022 251 1032 l 465 1032 b 496 1006 481 1032 490 1018 l 618 725 l 824 1006 b 863 1032 833 1018 847 1032 l 1068 1032 b 1086 1017 1079 1032 1086 1025 "},"Y":{"ha":901,"x_min":0,"x_max":0,"o":"m 1049 1015 b 1044 1001 1049 1011 1047 1006 l 750 521 b 642 414 711 457 678 428 l 574 28 b 540 0 571 13 556 0 l 358 0 b 336 24 344 0 336 10 l 336 28 l 404 414 b 331 521 372 428 347 457 l 206 1001 b 204 1007 206 1003 204 1006 b 232 1032 204 1021 217 1032 l 426 1032 b 450 1008 440 1032 447 1021 l 531 617 b 549 596 535 599 539 596 b 572 617 558 596 563 599 l 792 1008 b 824 1032 799 1021 810 1032 l 1029 1032 b 1049 1015 1042 1032 1049 1025 "},"Z":{"ha":854,"x_min":0,"x_max":0,"o":"m 951 993 b 929 867 946 957 938 908 b 911 831 926 854 919 842 l 428 231 b 418 213 422 224 418 218 b 432 206 418 208 422 206 l 793 206 b 817 185 807 206 817 197 l 817 181 l 790 28 b 757 0 788 13 772 0 l 126 0 b 75 35 97 0 75 10 b 76 43 75 38 76 40 l 97 154 b 128 215 101 174 107 190 l 604 801 b 613 818 610 808 613 814 b 599 826 613 824 608 826 l 268 826 b 244 849 254 826 244 835 l 244 853 l 272 1006 b 304 1032 275 1021 289 1032 l 903 1032 b 951 1000 929 1032 951 1021 "},"[":{"ha":519,"x_min":0,"x_max":0,"o":"m 653 1004 l 632 883 b 600 856 629 868 615 856 l 467 856 l 299 -93 l 433 -93 b 457 -117 447 -93 457 -103 l 457 -121 l 435 -242 b 403 -269 432 -257 418 -269 l 64 -269 b 44 -249 51 -269 44 -260 l 44 -243 l 265 1006 b 293 1032 268 1019 279 1032 l 631 1032 b 653 1010 644 1032 653 1022 "},"\\":{"ha":563,"x_min":0,"x_max":0,"o":"m 547 19 b 517 -7 547 6 531 -7 l 340 -7 b 319 22 325 -7 321 7 l 196 1004 l 196 1007 b 226 1032 196 1021 213 1032 l 401 1032 b 425 1004 417 1032 424 1019 l 547 22 l 547 19 "},"]":{"ha":519,"x_min":0,"x_max":0,"o":"m 610 1006 l 389 -243 b 361 -269 386 -257 375 -269 l 22 -269 b -1 -246 8 -269 -1 -260 l -1 -242 l 21 -121 b 53 -93 24 -106 38 -93 l 188 -93 l 356 856 l 222 856 b 199 879 208 856 199 865 l 199 883 l 219 1004 b 253 1032 222 1019 238 1032 l 590 1032 b 610 1011 603 1032 610 1022 "},"a":{"ha":807,"x_min":0,"x_max":0,"o":"m 540 807 b 828 772 635 807 738 796 b 864 731 860 764 868 758 l 742 28 b 710 0 739 13 732 0 l 568 0 b 544 28 553 0 542 10 l 550 68 b 335 -12 475 10 408 -12 b 101 254 168 -12 101 115 b 108 332 101 281 104 306 b 131 463 108 332 126 436 b 540 807 172 704 322 807 m 618 614 b 511 622 593 618 550 622 b 353 451 413 622 372 564 l 328 306 b 324 260 325 290 324 275 b 403 175 324 214 340 175 b 550 224 450 175 504 197 l 618 614 "},"b":{"ha":828,"x_min":0,"x_max":0,"o":"m 857 529 b 850 451 857 504 854 478 l 832 343 b 419 -12 790 96 649 -12 b 131 24 313 -12 207 4 b 94 64 97 32 90 42 l 267 1038 b 300 1065 269 1053 279 1065 l 468 1065 b 492 1038 483 1065 496 1057 l 449 797 b 564 807 490 803 536 807 b 857 529 757 807 857 694 m 632 519 b 532 621 632 583 607 621 b 417 614 499 621 451 618 l 340 181 b 453 172 365 176 407 172 b 607 343 551 172 589 231 l 625 451 b 632 519 629 476 632 499 "},"c":{"ha":658,"x_min":0,"x_max":0,"o":"m 528 807 b 710 786 611 807 672 796 b 733 754 735 779 736 772 l 711 631 b 678 607 708 615 706 604 b 510 617 625 613 589 617 b 368 456 442 617 392 585 l 347 339 b 340 272 343 313 340 290 b 433 178 340 197 375 178 b 604 188 513 178 551 182 b 629 164 625 190 632 179 l 607 40 b 572 8 603 19 594 14 b 388 -12 532 -1 471 -12 b 114 257 225 -12 114 85 b 122 339 114 283 117 310 l 143 456 b 528 807 189 715 326 807 "},"d":{"ha":828,"x_min":0,"x_max":0,"o":"m 903 1065 b 928 1038 922 1065 932 1058 l 756 64 b 706 24 751 42 744 32 b 404 -12 622 4 511 -12 b 114 271 218 -12 114 106 b 119 343 114 294 115 318 l 138 451 b 549 807 181 707 307 807 b 661 797 576 807 622 803 l 704 1038 b 736 1065 707 1053 717 1065 m 629 614 b 517 621 597 618 550 621 b 361 451 415 621 381 565 l 343 343 b 336 269 339 315 336 290 b 438 172 336 206 361 172 b 553 181 483 172 525 176 l 629 614 "},"e":{"ha":819,"x_min":0,"x_max":0,"o":"m 842 517 b 835 442 842 493 839 467 l 821 361 b 786 328 817 340 804 328 l 340 328 b 335 271 338 307 335 288 b 458 174 335 199 369 174 b 728 186 546 174 671 182 b 754 164 750 188 757 183 l 735 58 b 700 21 731 36 725 26 b 408 -12 607 -1 529 -12 b 117 267 258 -12 117 74 b 124 344 117 290 119 317 l 140 442 b 556 807 182 683 328 807 b 842 517 743 807 842 679 m 632 528 b 524 626 632 592 601 626 b 364 467 429 626 385 563 l 625 467 b 632 528 629 489 632 510 "},"f":{"ha":547,"x_min":0,"x_max":0,"o":"m 596 918 b 532 846 553 918 542 907 l 524 796 l 642 796 b 665 767 667 796 668 782 l 646 656 b 613 628 642 633 635 628 l 494 628 l 382 -1 b 92 -240 344 -214 240 -240 b -6 -228 57 -240 25 -233 b -28 -207 -17 -225 -28 -219 l -28 -204 l -10 -99 b 18 -74 -7 -82 6 -74 l 74 -74 b 157 -1 135 -74 146 -67 l 268 628 l 163 644 b 140 681 142 647 138 661 l 156 767 b 189 796 160 789 168 796 l 297 796 l 306 846 b 596 1085 340 1054 442 1085 b 694 1072 631 1085 664 1078 b 717 1047 707 1069 719 1061 l 699 944 b 668 918 696 928 690 918 l 596 918 "},"g":{"ha":796,"x_min":0,"x_max":0,"o":"m 861 743 b 860 733 861 740 860 738 l 731 -3 b 344 -281 696 -203 574 -281 b 86 -243 225 -281 133 -260 b 64 -218 71 -237 64 -231 b 65 -207 64 -214 65 -211 l 82 -114 b 111 -89 85 -99 96 -89 l 114 -89 b 376 -106 175 -94 310 -106 b 510 -3 472 -106 494 -83 l 513 13 b 400 0 474 4 436 0 b 100 276 232 0 100 90 b 107 357 100 301 101 328 l 124 451 b 535 807 169 710 290 807 b 824 772 661 807 771 786 b 861 743 851 765 861 757 m 618 611 b 503 621 593 615 556 621 b 347 451 404 621 365 550 l 331 357 b 324 289 326 331 324 308 b 435 183 324 204 368 183 b 544 193 467 183 504 188 l 618 611 "},"h":{"ha":850,"x_min":0,"x_max":0,"o":"m 863 575 b 857 514 863 556 861 535 l 772 28 b 739 0 769 13 754 0 l 569 0 b 547 22 556 0 547 10 l 547 28 l 632 513 b 636 551 635 528 636 540 b 531 624 636 606 606 624 b 417 613 489 624 447 619 l 314 29 b 281 0 311 14 296 0 l 113 0 b 89 25 99 0 89 11 l 89 29 l 267 1038 b 299 1065 269 1053 283 1065 l 468 1065 b 492 1042 482 1065 492 1056 l 492 1038 l 447 789 b 596 807 486 797 542 807 b 863 575 776 807 863 710 "},"i":{"ha":403,"x_min":0,"x_max":0,"o":"m 267 886 b 244 914 250 886 242 897 l 267 1043 b 300 1071 269 1058 278 1071 l 481 1071 b 503 1043 497 1071 507 1064 l 481 914 b 447 886 478 899 469 886 l 267 886 m 426 796 b 450 768 442 796 453 788 l 319 28 b 286 0 317 13 310 0 l 117 0 b 94 28 100 0 92 11 l 225 768 b 257 796 228 783 242 796 l 426 796 "},"j":{"ha":403,"x_min":0,"x_max":0,"o":"m 267 886 b 244 914 250 886 242 900 l 267 1043 b 300 1071 269 1058 279 1071 l 479 1071 b 503 1043 494 1071 506 1065 l 481 914 b 446 886 478 899 469 886 l 267 886 m 26 -110 b 81 -44 65 -110 72 -92 l 224 767 b 256 796 226 782 235 796 l 428 796 b 449 767 450 796 451 781 l 306 -44 b 44 -282 272 -233 200 -282 b -65 -272 8 -282 -26 -279 b -87 -244 -83 -269 -90 -260 l -68 -135 b -35 -110 -65 -119 -53 -110 l 26 -110 "},"k":{"ha":817,"x_min":0,"x_max":0,"o":"m 914 783 b 906 767 914 778 911 772 l 572 415 l 768 29 b 750 0 774 18 771 0 l 546 0 b 511 29 531 0 518 13 l 369 346 l 314 29 b 281 0 311 14 296 0 l 113 0 b 89 29 97 0 86 10 l 267 1038 b 300 1065 269 1053 279 1065 l 468 1065 b 492 1038 490 1065 494 1053 l 392 475 l 646 775 b 686 796 660 792 675 796 l 896 796 b 914 783 907 796 914 790 "},"l":{"ha":392,"x_min":0,"x_max":0,"o":"m 492 1038 l 314 29 b 282 0 311 14 297 0 l 113 0 b 89 25 99 0 89 11 l 89 29 l 267 1038 b 300 1065 269 1053 285 1065 l 469 1065 b 492 1043 483 1065 492 1056 "},"m":{"ha":1215,"x_min":0,"x_max":0,"o":"m 1229 588 b 1221 503 1229 560 1226 531 l 1138 29 b 1103 0 1135 14 1118 0 l 935 0 b 913 24 921 0 913 11 l 913 29 l 996 503 b 1003 563 1000 526 1003 546 b 931 618 1003 601 986 618 b 818 596 908 618 861 614 b 808 503 818 565 814 533 l 725 29 b 692 0 722 14 707 0 l 524 0 b 500 25 510 0 500 11 l 500 29 l 583 503 b 592 568 588 528 592 550 b 536 618 592 600 581 618 b 410 576 501 618 454 599 l 314 29 b 281 0 311 14 296 0 l 113 0 b 89 25 99 0 89 11 l 89 29 l 219 768 b 251 796 222 783 236 796 l 403 796 b 426 772 417 796 426 786 l 426 768 l 421 736 b 617 807 476 772 540 807 b 778 744 697 807 747 782 b 1024 807 860 792 929 807 b 1229 588 1178 807 1229 706 "},"n":{"ha":850,"x_min":0,"x_max":0,"o":"m 861 576 b 853 492 861 550 858 522 l 772 29 b 738 0 769 14 753 0 l 569 0 b 547 24 556 0 547 11 l 547 29 l 628 492 b 635 553 632 515 635 536 b 560 621 635 604 601 621 b 410 576 507 621 440 594 l 314 29 b 281 0 311 14 296 0 l 113 0 b 89 25 99 0 89 11 l 89 29 l 219 768 b 251 796 222 783 236 796 l 403 796 b 426 772 417 796 426 786 l 426 768 l 421 735 b 638 807 483 782 564 807 b 861 576 757 807 861 740 "},"o":{"ha":819,"x_min":0,"x_max":0,"o":"m 844 526 b 836 446 844 500 839 463 l 818 349 b 407 -12 774 113 653 -12 b 115 271 218 -12 115 107 b 122 349 115 296 117 322 l 140 446 b 551 807 188 697 321 807 b 844 526 739 807 844 696 m 619 510 b 518 615 619 582 586 615 b 364 446 438 615 386 568 l 346 349 b 339 282 342 324 339 301 b 442 178 339 210 372 178 b 594 349 532 178 574 236 l 613 446 b 619 510 617 469 619 492 "},"p":{"ha":828,"x_min":0,"x_max":0,"o":"m 857 526 b 850 451 857 503 854 478 l 832 343 b 432 -12 789 85 643 -12 b 308 -3 393 -12 351 -8 l 265 -243 b 233 -271 263 -258 249 -271 l 65 -271 b 40 -247 51 -271 40 -261 l 40 -243 l 213 731 b 263 771 217 753 224 763 b 564 807 346 790 457 807 b 857 526 750 807 857 694 m 632 524 b 532 621 632 588 607 621 b 417 614 486 621 444 618 l 340 181 b 444 172 379 175 414 172 b 607 343 532 172 583 206 l 625 451 b 632 524 629 479 632 503 "},"q":{"ha":828,"x_min":0,"x_max":0,"o":"m 875 742 b 874 731 875 739 875 735 l 701 -243 b 668 -271 699 -258 683 -271 l 501 -271 b 478 -247 488 -271 478 -261 l 478 -243 l 521 -3 b 414 -12 485 -10 449 -12 b 113 261 249 -12 113 67 b 119 343 113 286 114 314 l 138 451 b 549 807 178 696 308 807 b 838 771 656 807 761 790 b 875 742 867 764 875 756 m 629 614 b 517 621 604 618 563 621 b 361 451 418 621 381 565 l 343 343 b 336 276 339 317 336 296 b 444 172 336 192 376 172 b 553 181 476 172 513 176 l 629 614 "},"r":{"ha":550,"x_min":0,"x_max":0,"o":"m 657 779 l 633 647 b 608 621 631 635 621 621 l 597 621 b 410 572 529 621 465 600 l 314 29 b 281 0 311 14 296 0 l 113 0 b 89 24 99 0 89 11 l 89 29 l 219 768 b 251 796 222 783 236 796 l 417 796 b 440 774 431 796 440 786 l 440 768 l 435 740 b 633 807 503 797 560 807 b 657 783 647 807 657 797 "},"s":{"ha":699,"x_min":0,"x_max":0,"o":"m 747 743 l 728 631 b 700 604 725 615 715 604 l 696 604 b 468 622 657 610 539 622 l 463 622 b 386 574 426 622 386 621 b 419 531 386 557 397 544 l 574 432 b 683 260 660 376 683 314 b 340 -12 683 58 519 -12 b 93 18 264 -12 161 -1 b 72 43 79 22 72 31 l 72 50 l 93 163 b 125 189 96 179 108 189 l 129 189 b 363 169 203 179 301 169 b 454 232 410 169 454 174 b 413 288 454 250 443 268 l 250 392 b 160 557 188 432 160 496 b 485 807 160 751 318 807 b 726 775 582 807 658 793 b 747 750 740 771 747 763 "},"t":{"ha":585,"x_min":0,"x_max":0,"o":"m 676 768 l 656 656 b 624 628 653 640 639 628 l 510 628 l 438 224 b 433 185 435 207 433 194 b 472 158 433 164 443 158 l 540 158 b 565 139 554 158 565 153 l 565 135 l 546 26 b 515 -1 543 13 533 1 b 403 -12 472 -8 443 -12 b 206 154 276 -12 206 33 b 213 225 206 175 208 199 l 283 628 l 175 646 b 151 671 161 649 151 657 l 151 675 l 167 767 b 201 796 169 782 186 796 l 313 796 l 332 910 b 365 938 335 925 349 935 l 540 967 l 544 967 b 565 947 557 967 565 960 l 565 943 l 539 796 l 653 796 b 676 772 667 796 676 786 "},"u":{"ha":850,"x_min":0,"x_max":0,"o":"m 901 767 l 771 28 b 739 0 768 13 754 0 l 583 0 b 560 22 569 0 560 10 l 560 28 l 567 61 b 346 -12 501 18 442 -12 b 129 219 208 -12 129 74 b 138 304 129 246 132 274 l 218 767 b 253 796 221 782 238 796 l 421 796 b 443 772 435 796 443 785 l 443 767 l 363 304 b 356 240 358 281 356 257 b 442 174 356 193 376 174 b 581 219 469 174 538 194 l 676 767 b 710 796 679 782 694 796 l 878 796 b 901 771 892 796 901 785 "},"v":{"ha":813,"x_min":0,"x_max":0,"o":"m 919 776 b 917 764 919 772 918 768 l 631 133 b 403 -12 575 10 485 -12 b 229 133 321 -12 242 10 l 167 764 l 167 767 b 193 796 167 783 179 796 l 369 796 b 393 767 383 796 392 783 l 417 222 b 433 193 418 201 424 193 b 460 222 443 193 451 201 l 675 767 b 710 796 682 783 696 796 l 900 796 b 919 776 911 796 919 788 "},"w":{"ha":1174,"x_min":0,"x_max":0,"o":"m 1269 778 b 1268 767 1269 774 1269 771 l 1026 97 b 888 0 997 18 946 0 l 803 0 b 701 89 736 0 706 36 l 672 451 b 667 458 672 458 671 458 b 658 451 663 458 661 458 l 501 89 b 369 0 479 36 436 0 l 285 0 b 179 97 226 0 179 18 l 174 767 b 200 796 174 782 185 796 l 363 796 b 388 774 379 796 388 793 l 388 772 l 378 242 l 378 240 b 383 224 378 229 381 224 b 397 242 388 224 392 229 l 558 611 b 647 674 579 660 603 674 l 761 674 b 828 611 806 674 824 660 l 856 244 b 863 226 857 232 860 226 b 875 244 867 226 871 233 l 1050 772 b 1083 796 1057 793 1067 796 l 1253 796 b 1269 778 1264 796 1269 788 "},"x":{"ha":857,"x_min":0,"x_max":0,"o":"m 919 782 b 914 767 919 776 918 771 l 621 403 l 807 29 b 808 21 808 26 808 24 b 790 0 808 10 801 0 l 592 0 b 563 29 576 0 572 8 l 463 244 l 296 28 b 254 0 279 7 269 0 l 68 0 b 56 13 60 0 56 6 b 61 28 56 18 57 22 l 372 414 l 197 767 b 194 776 196 769 194 772 b 213 796 194 786 201 796 l 411 796 b 440 767 426 796 432 785 l 531 575 l 678 767 b 719 796 694 788 704 796 l 906 796 b 919 782 914 796 919 789 "},"y":{"ha":822,"x_min":0,"x_max":0,"o":"m 928 775 b 925 764 928 771 926 768 l 547 -54 b 208 -281 471 -218 413 -281 b 39 -258 157 -281 72 -269 b 14 -237 25 -254 14 -249 l 14 -233 l 35 -121 b 67 -94 38 -106 51 -94 l 69 -94 b 242 -106 114 -97 196 -106 b 346 -33 292 -106 321 -89 l 365 10 l 358 10 b 239 139 303 10 251 31 l 165 764 l 165 768 b 197 796 165 785 175 796 l 379 796 b 401 769 393 796 400 783 l 433 239 b 447 221 435 222 439 221 l 458 221 l 685 769 b 718 796 690 783 703 796 l 906 796 b 928 775 918 796 928 786 "},"z":{"ha":715,"x_min":0,"x_max":0,"o":"m 786 761 b 785 749 786 757 786 753 l 767 646 b 743 597 764 632 758 615 l 397 204 b 392 194 393 200 392 196 b 400 189 392 190 394 189 l 664 189 b 685 171 676 189 685 182 l 685 167 l 661 28 b 628 0 658 13 643 0 l 107 0 b 67 33 85 0 67 7 b 68 46 67 38 67 42 l 83 135 b 113 188 88 160 96 168 l 475 599 b 481 610 479 603 481 607 b 472 615 481 614 478 615 l 204 615 b 185 633 192 615 185 622 l 185 638 l 208 768 b 240 796 211 783 225 796 l 747 796 b 786 761 769 796 786 786 "},"{":{"ha":565,"x_min":0,"x_max":0,"o":"m 699 1004 l 678 883 b 646 856 675 868 661 856 l 565 856 b 497 775 521 856 508 843 l 465 588 b 313 379 449 488 414 422 b 396 214 369 347 396 279 b 392 169 396 199 394 183 l 358 -12 b 353 -57 356 -31 353 -46 b 399 -93 353 -86 367 -93 l 479 -93 b 503 -117 493 -93 503 -103 l 503 -121 l 481 -242 b 449 -269 478 -257 464 -269 l 368 -269 b 125 -85 200 -269 125 -208 b 132 -12 125 -62 128 -39 l 165 169 b 168 204 168 182 168 193 b 111 313 168 251 149 286 l 133 444 b 238 588 190 478 226 521 l 269 775 b 596 1032 308 1000 382 1032 l 676 1032 b 699 1010 690 1032 699 1022 "},"|":{"ha":403,"x_min":0,"x_max":0,"o":"m 411 -240 b 383 -269 411 -256 399 -269 l 213 -269 b 183 -240 197 -269 183 -256 l 183 1004 b 213 1032 183 1019 197 1032 l 383 1032 b 411 1004 399 1032 411 1019 l 411 -240 "},"}":{"ha":565,"x_min":0,"x_max":0,"o":"m 565 313 b 461 169 508 279 476 253 l 428 -12 b 103 -269 389 -226 326 -269 l 22 -269 b -1 -246 8 -269 -1 -260 l -1 -242 l 21 -121 b 53 -93 24 -106 38 -93 l 133 -93 b 201 -12 178 -93 189 -81 l 235 169 b 386 379 253 265 285 339 b 304 544 335 415 304 474 b 308 588 304 558 306 572 l 340 775 b 346 822 343 794 346 811 b 303 856 346 850 335 856 l 222 856 b 199 879 208 856 199 865 l 199 883 l 219 1004 b 253 1032 222 1019 238 1032 l 333 1032 b 575 844 490 1032 575 978 b 568 775 575 824 572 800 l 536 588 b 531 540 533 569 531 554 b 588 444 531 501 546 475 "}," ":{"ha":347,"x_min":0,"x_max":0,"o":""},"¡":{"ha":379,"x_min":0,"x_max":0,"o":"m 435 774 b 433 768 435 771 435 769 l 403 593 b 371 567 400 578 386 567 l 207 567 b 185 588 194 567 185 575 l 185 593 l 215 768 b 247 796 218 783 232 796 l 411 796 b 435 774 425 796 435 786 m 357 451 l 263 -242 b 228 -269 261 -257 243 -269 l 54 -269 b 31 -247 42 -269 31 -260 l 31 -242 l 181 451 b 214 481 185 467 199 481 l 332 481 b 357 456 346 481 357 468 "},"¢":{"ha":896,"x_min":0,"x_max":0,"o":"m 836 764 b 835 754 836 761 835 757 l 813 631 b 782 607 810 617 796 607 l 779 607 b 611 617 729 613 690 617 b 469 456 539 617 492 579 l 449 339 b 442 274 444 314 442 292 b 535 178 442 200 476 178 b 706 188 614 178 653 183 l 708 188 b 731 168 721 188 731 181 l 731 164 l 708 40 b 674 8 704 19 696 14 b 561 -10 646 1 608 -6 l 543 -111 b 510 -139 540 -126 525 -139 l 369 -139 b 347 -117 356 -139 347 -129 l 347 -111 l 368 6 b 217 261 279 46 217 135 b 224 339 217 286 218 311 l 244 456 b 506 789 285 679 381 754 l 526 903 b 558 931 529 918 543 931 l 699 931 b 722 907 713 931 722 921 l 722 903 l 704 804 b 811 786 750 800 786 793 b 836 764 828 782 836 778 "},"£":{"ha":896,"x_min":0,"x_max":0,"o":"m 963 1000 b 961 990 963 997 961 994 l 936 853 b 910 828 933 835 922 828 l 906 828 b 679 844 849 835 753 844 b 533 732 576 844 550 821 l 513 618 l 747 618 b 771 596 761 618 771 610 l 771 592 l 747 457 b 717 431 744 442 732 431 l 481 431 l 456 292 b 410 186 447 246 429 213 l 790 186 b 813 167 804 186 813 178 l 813 161 l 789 26 b 757 0 786 11 772 0 l 143 0 b 121 25 128 0 121 13 b 122 33 121 28 122 31 l 140 131 b 158 164 143 147 151 156 b 226 292 182 189 218 244 l 251 431 l 182 431 b 160 451 168 431 160 439 l 160 457 l 183 592 b 215 618 186 607 200 618 l 283 618 l 304 731 b 715 1044 350 981 457 1044 b 939 1018 794 1044 897 1028 b 963 1000 957 1014 963 1008 "},"¤":{"ha":896,"x_min":0,"x_max":0,"o":"m 906 774 b 896 753 906 765 901 758 l 776 635 b 808 515 797 597 808 557 b 775 390 808 472 797 429 l 892 274 b 901 253 897 268 901 260 b 894 238 901 247 899 242 l 815 158 b 800 151 811 154 806 151 b 779 161 792 151 785 156 l 660 282 b 546 253 625 263 585 253 b 426 283 504 253 464 263 l 308 165 b 286 154 303 160 294 154 b 272 161 282 154 276 157 l 193 240 b 186 257 189 244 186 251 b 196 278 186 264 190 272 l 314 394 b 282 515 293 432 282 474 b 310 629 282 554 290 594 l 192 749 b 182 769 186 754 182 763 b 189 785 182 775 185 781 l 268 864 b 283 871 272 868 278 871 b 304 861 290 871 299 867 l 419 746 b 546 778 458 768 503 778 b 665 747 588 778 628 768 l 783 865 b 804 875 789 871 797 875 b 819 868 810 875 815 872 l 899 789 b 906 774 903 785 906 779 m 665 519 b 549 635 665 583 613 635 b 431 519 485 635 431 583 b 549 403 431 456 485 403 b 665 519 613 403 665 456 "},"¥":{"ha":896,"x_min":0,"x_max":0,"o":"m 1061 1017 b 1056 1001 1061 1013 1060 1007 l 847 690 l 968 690 b 990 669 982 690 990 682 l 990 664 l 972 561 b 942 535 969 546 957 535 l 744 535 l 658 407 l 653 392 l 915 392 b 939 371 929 392 939 383 l 939 367 l 919 263 b 889 238 917 247 904 238 l 625 238 l 589 28 b 556 0 586 13 571 0 l 371 0 b 350 22 357 0 350 10 l 350 28 l 386 238 l 124 238 b 100 258 110 238 100 246 l 100 263 l 119 367 b 151 392 122 382 136 392 l 414 392 l 415 407 l 375 535 l 176 535 b 153 557 163 535 153 543 l 153 561 l 171 664 b 204 690 174 679 189 690 l 326 690 l 226 1001 b 225 1010 225 1004 225 1007 b 250 1032 225 1024 236 1032 l 449 1032 b 471 1008 463 1032 468 1021 l 569 633 l 803 1008 b 833 1032 811 1021 819 1032 l 1043 1032 b 1061 1017 1054 1032 1061 1026 "},"¦":{"ha":403,"x_min":0,"x_max":0,"o":"m 406 504 b 378 475 406 489 393 475 l 207 475 b 178 504 192 475 178 489 l 178 983 b 207 1011 178 999 192 1011 l 378 1011 b 406 983 393 1011 406 999 l 406 504 m 406 -264 b 378 -293 406 -279 393 -293 l 207 -293 b 178 -264 192 -293 178 -279 l 178 215 b 207 243 178 231 192 243 l 378 243 b 406 215 393 243 406 231 l 406 -264 "},"§":{"ha":818,"x_min":0,"x_max":0,"o":"m 907 988 l 882 846 b 861 826 881 835 872 826 l 860 826 b 558 838 763 832 660 838 b 429 756 499 838 429 833 b 514 669 429 726 453 706 l 675 574 b 821 344 776 513 821 432 b 746 136 821 276 793 204 b 764 35 754 117 764 64 b 339 -300 764 -210 560 -300 b 67 -269 229 -300 135 -287 b 43 -246 54 -267 43 -258 l 43 -242 l 68 -101 b 100 -75 71 -86 86 -75 l 103 -75 b 363 -94 189 -83 275 -94 l 368 -94 b 517 15 443 -94 517 -75 b 435 106 517 47 493 71 l 268 207 b 128 450 167 269 128 356 b 213 657 128 517 161 610 b 190 764 193 692 190 725 b 586 1044 190 982 408 1044 b 885 1014 688 1044 835 1028 b 907 992 896 1011 907 1003 m 625 318 b 544 424 625 364 617 381 l 421 499 b 353 542 389 518 374 528 b 324 463 328 513 324 483 b 421 356 324 415 372 385 l 510 304 b 600 249 546 283 572 269 b 625 318 614 268 625 303 "},"¨":{"ha":615,"x_min":0,"x_max":0,"o":"m 738 1043 l 715 914 b 679 886 713 899 694 886 l 549 886 b 525 910 535 886 525 896 l 525 914 l 547 1043 b 582 1071 550 1058 567 1071 l 713 1071 b 738 1047 726 1071 738 1061 m 436 1043 l 414 914 b 379 886 411 899 394 886 l 249 886 b 224 910 235 886 224 896 l 224 914 l 246 1043 b 282 1071 249 1058 267 1071 l 413 1071 b 436 1047 426 1071 436 1061 "},"©":{"ha":1042,"x_min":0,"x_max":0,"o":"m 1083 519 b 619 58 1083 264 875 58 b 158 519 364 58 158 264 b 619 985 158 775 364 985 b 1083 519 875 985 1083 775 m 1011 519 b 619 913 1011 735 835 913 b 229 519 404 913 229 735 b 619 131 229 304 404 131 b 1011 519 835 131 1011 304 m 763 254 b 744 235 763 243 757 238 b 631 222 721 228 683 222 b 394 485 482 222 394 306 l 394 563 b 631 825 394 743 482 825 b 744 811 683 825 722 817 b 763 794 757 808 763 806 l 763 707 b 746 690 763 694 756 690 l 743 690 b 631 697 711 694 685 697 b 538 563 582 697 538 672 l 538 485 b 631 349 538 372 582 349 b 743 356 678 349 711 351 l 747 356 b 763 340 756 356 763 353 l 763 254 "},"ª":{"ha":496,"x_min":0,"x_max":0,"o":"m 600 900 b 596 858 600 888 599 874 l 547 583 b 532 561 546 572 542 564 b 350 539 472 546 410 539 b 167 669 226 539 167 592 b 414 840 167 825 288 840 l 444 840 l 449 858 b 453 886 451 869 453 878 b 401 921 453 913 438 921 b 258 914 354 921 306 917 l 257 914 b 244 929 249 914 244 921 l 244 933 l 257 1003 b 281 1024 258 1014 269 1021 b 422 1044 310 1032 369 1044 b 600 900 525 1044 600 1000 m 431 758 b 410 760 428 758 418 760 b 307 681 353 760 307 747 b 368 643 307 651 326 643 b 411 647 386 643 400 646 l 431 758 "},"«":{"ha":997,"x_min":0,"x_max":0,"o":"m 1082 694 b 1074 679 1082 689 1079 683 l 763 397 l 958 115 b 961 106 961 113 961 108 b 939 88 961 96 951 88 l 788 88 b 749 104 767 88 757 92 l 572 361 b 558 401 563 375 558 389 b 578 443 558 418 567 432 l 836 690 b 881 707 849 703 860 707 l 1065 707 b 1082 694 1076 707 1082 701 m 650 694 b 642 679 650 689 647 683 l 331 397 l 526 115 b 529 106 529 113 529 108 b 507 88 529 96 519 88 l 356 88 b 317 104 335 88 325 92 l 140 361 b 126 401 131 375 126 389 b 146 443 126 418 135 432 l 404 690 b 449 707 417 703 428 707 l 633 707 b 650 694 644 707 650 701 "},"¬":{"ha":896,"x_min":0,"x_max":0,"o":"m 861 275 b 835 247 861 260 850 247 l 717 247 b 692 275 701 247 692 260 l 692 638 l 251 638 b 224 660 236 638 224 644 l 224 783 b 251 806 224 799 236 806 l 835 806 b 861 783 850 806 861 797 l 861 275 "},"­":{"ha":419,"x_min":0,"x_max":0,"o":"m 456 474 l 438 371 b 406 346 435 356 421 346 l 136 346 b 113 367 122 346 113 354 l 113 371 l 131 474 b 163 500 133 489 147 500 l 432 500 b 456 478 446 500 456 492 "},"®":{"ha":831,"x_min":0,"x_max":0,"o":"m 924 672 b 535 285 924 458 749 285 b 147 672 321 285 147 458 b 535 1060 147 886 321 1060 b 924 672 749 1060 924 886 m 853 672 b 535 990 853 847 710 990 b 218 672 360 990 218 847 b 535 354 218 497 360 354 b 853 672 710 354 853 497 m 726 458 b 713 444 726 451 721 444 l 619 444 b 606 456 613 444 608 450 l 518 610 b 507 618 515 610 510 618 l 471 618 l 471 460 b 456 444 471 451 464 444 l 372 444 b 357 460 364 444 357 451 l 357 868 b 392 910 357 897 365 906 b 515 917 413 913 478 917 b 710 767 636 917 710 879 l 710 757 b 628 636 710 692 675 656 l 724 468 b 726 458 725 465 726 463 m 600 767 b 525 821 600 804 579 821 l 468 821 l 468 703 b 525 701 475 703 519 701 b 600 757 579 701 600 721 "},"¯":{"ha":615,"x_min":0,"x_max":0,"o":"m 743 1033 l 725 933 b 693 907 722 918 708 907 l 243 907 b 219 929 229 907 219 915 l 219 933 l 238 1033 b 271 1060 240 1049 256 1060 l 721 1060 b 743 1039 735 1060 743 1051 "},"°":{"ha":501,"x_min":0,"x_max":0,"o":"m 606 831 b 393 617 606 713 511 617 b 179 831 276 617 179 713 b 393 1044 179 949 276 1044 b 606 831 511 1044 606 949 m 493 831 b 393 932 493 886 447 932 b 293 831 339 932 293 886 b 393 731 293 776 338 731 b 493 831 449 731 493 776 "},"±":{"ha":896,"x_min":0,"x_max":0,"o":"m 853 481 b 825 458 853 465 840 458 l 610 458 l 610 244 b 588 217 610 229 603 217 l 463 217 b 440 244 447 217 440 229 l 440 458 l 226 458 b 199 481 211 458 199 465 l 199 606 b 226 628 199 621 211 628 l 440 628 l 440 843 b 463 871 440 858 447 871 l 588 871 b 610 843 603 871 610 858 l 610 628 l 825 628 b 853 606 840 628 853 621 l 853 481 m 853 -6 b 825 -28 853 -21 840 -28 l 226 -28 b 199 -6 211 -28 199 -21 l 199 93 b 226 115 199 108 211 115 l 825 115 b 853 93 840 115 853 108 l 853 -6 "},"²":{"ha":493,"x_min":0,"x_max":0,"o":"m 368 815 b 457 894 438 860 457 864 b 392 928 457 921 442 928 b 243 918 347 928 292 924 b 224 942 225 915 221 926 l 233 1000 b 257 1024 236 1013 240 1019 b 424 1047 303 1036 368 1047 b 603 917 543 1047 603 1008 b 483 743 603 850 571 796 l 414 700 b 285 588 340 656 293 625 l 514 588 b 533 567 532 588 536 581 l 521 489 b 493 465 518 474 513 465 l 158 465 b 139 489 142 465 136 476 l 151 565 b 289 765 167 651 206 711 "},"³":{"ha":493,"x_min":0,"x_max":0,"o":"m 181 585 b 329 578 232 581 297 578 b 408 660 390 578 408 607 b 365 703 408 685 403 703 l 233 703 b 215 726 217 703 213 713 l 226 790 b 253 813 229 804 235 813 l 382 813 b 449 885 435 813 449 857 b 390 928 449 914 435 928 b 254 919 358 928 304 926 b 222 940 229 915 219 921 l 232 1000 b 257 1024 235 1014 246 1019 b 422 1047 299 1035 356 1047 b 596 918 535 1047 596 1001 b 511 758 596 843 563 786 b 553 660 540 733 553 707 b 314 458 553 525 472 458 b 158 479 254 458 197 468 b 142 503 149 483 139 488 l 153 563 b 181 585 156 576 163 585 "},"´":{"ha":615,"x_min":0,"x_max":0,"o":"m 775 1074 b 767 1061 775 1069 772 1065 l 567 892 b 531 875 554 881 549 875 l 368 875 b 357 883 361 875 357 878 b 365 899 357 888 360 893 l 524 1061 b 564 1082 539 1076 544 1082 l 760 1082 b 775 1074 768 1082 775 1079 "},"µ":{"ha":850,"x_min":0,"x_max":0,"o":"m 771 28 b 739 0 768 13 761 0 l 583 0 b 560 28 565 0 557 13 l 565 61 b 326 -11 479 7 415 -11 l 307 -11 l 267 -237 b 235 -265 264 -253 257 -265 l 65 -265 b 40 -237 44 -265 39 -253 l 218 767 b 253 796 221 782 231 796 l 421 796 b 443 767 436 796 447 789 l 361 304 b 354 243 357 279 354 260 b 431 175 354 193 375 175 b 579 219 482 175 528 194 l 676 767 b 710 796 679 782 688 796 l 878 796 b 901 767 893 796 904 786 l 771 28 "},"¶":{"ha":915,"x_min":0,"x_max":0,"o":"m 1015 1014 b 1014 1006 1015 1011 1014 1008 l 793 -244 b 765 -271 790 -258 779 -271 l 706 -271 b 686 -249 693 -271 686 -261 l 686 -244 l 893 926 l 806 926 l 599 -244 b 571 -271 596 -258 585 -271 l 511 -271 b 492 -249 499 -271 492 -261 l 492 -244 l 594 336 l 461 336 b 172 596 294 336 172 449 b 176 646 172 613 174 629 l 190 722 b 583 1032 232 950 385 1032 l 996 1032 b 1015 1014 1010 1032 1015 1025 "},"·":{"ha":381,"x_min":0,"x_max":0,"o":"m 408 618 l 378 443 b 346 415 375 428 361 415 l 183 415 b 158 439 169 415 158 425 l 158 443 l 189 618 b 224 644 192 633 208 644 l 386 644 b 408 624 400 644 408 636 "},"¸":{"ha":592,"x_min":0,"x_max":0,"o":"m 440 -57 b 432 -69 440 -60 438 -64 l 232 -239 b 196 -256 219 -250 214 -256 l 47 -256 b 36 -247 40 -256 36 -253 b 44 -232 36 -243 39 -237 l 201 -69 b 243 -49 217 -54 224 -49 l 426 -49 b 440 -57 435 -49 440 -51 "},"¹":{"ha":335,"x_min":0,"x_max":0,"o":"m 340 1036 b 361 1040 346 1039 353 1040 l 429 1040 b 446 1017 447 1040 447 1029 l 353 489 b 328 465 349 471 342 465 l 229 465 b 210 489 217 465 206 471 l 281 892 l 201 860 b 176 876 181 853 172 858 l 192 963 b 208 981 193 969 197 976 "},"º":{"ha":528,"x_min":0,"x_max":0,"o":"m 631 872 b 625 814 631 854 629 835 l 617 768 b 360 539 589 615 513 539 b 178 718 250 539 178 608 b 182 768 178 733 179 750 l 190 814 b 449 1044 222 989 311 1044 b 631 872 557 1044 631 988 m 482 863 b 426 919 482 907 463 919 b 338 814 379 919 353 897 l 329 768 b 325 724 326 751 325 736 b 382 663 325 678 344 663 b 468 768 429 663 454 690 l 476 814 b 482 863 481 833 482 849 "},"»":{"ha":997,"x_min":0,"x_max":0,"o":"m 1033 393 b 1014 351 1033 376 1025 363 l 756 104 b 711 88 743 92 732 88 l 526 88 b 510 100 515 88 510 93 b 518 115 510 106 513 111 l 829 397 l 633 679 b 631 689 631 682 631 686 b 653 707 631 699 640 707 l 804 707 b 843 690 825 707 835 703 l 1019 433 b 1033 393 1029 419 1033 406 m 601 393 b 582 351 601 376 593 363 l 324 104 b 279 88 311 92 300 88 l 94 88 b 78 100 83 88 78 93 b 86 115 78 106 81 111 l 397 397 l 201 679 b 199 689 199 682 199 686 b 221 707 199 699 208 707 l 372 707 b 411 690 393 707 403 703 l 588 433 b 601 393 597 419 601 406 "},"¼":{"ha":1075,"x_min":0,"x_max":0,"o":"m 360 1036 b 381 1040 365 1039 372 1040 l 449 1040 b 465 1017 467 1040 467 1029 l 372 489 b 347 465 368 471 361 465 l 249 465 b 229 489 236 465 225 471 l 300 892 l 221 860 b 196 876 200 853 192 858 l 211 963 b 228 981 213 969 217 976 m 1075 1024 b 1067 1004 1075 1018 1072 1011 l 318 29 b 281 0 303 10 296 0 l 138 0 b 125 11 129 0 125 4 b 132 29 125 17 126 22 l 881 1004 b 921 1032 897 1025 906 1032 l 1064 1032 b 1075 1024 1072 1032 1075 1029 m 1051 149 b 1025 125 1050 136 1044 125 l 983 125 l 967 24 b 940 0 964 7 960 0 l 840 0 b 822 24 824 0 821 11 l 839 125 l 629 125 b 611 149 618 125 608 131 l 625 221 b 639 250 626 229 629 240 l 932 561 b 960 575 940 569 949 575 l 1040 575 b 1060 551 1060 575 1063 564 l 1004 240 l 1046 240 b 1064 217 1064 240 1067 232 l 1051 149 m 889 383 l 758 240 l 864 240 "},"½":{"ha":1172,"x_min":0,"x_max":0,"o":"m 360 1036 b 381 1040 365 1039 372 1040 l 449 1040 b 465 1017 467 1040 467 1029 l 372 489 b 347 465 368 471 361 465 l 249 465 b 229 489 236 465 225 471 l 300 892 l 221 860 b 196 876 200 853 192 858 l 211 963 b 228 981 213 969 217 976 m 1075 1024 b 1067 1004 1075 1018 1072 1011 l 318 29 b 281 0 303 10 296 0 l 138 0 b 125 11 129 0 125 4 b 132 29 125 17 126 22 l 881 1004 b 921 1032 897 1025 906 1032 l 1064 1032 b 1075 1024 1072 1032 1075 1029 m 938 350 b 1026 429 1007 394 1026 399 b 961 463 1026 456 1011 463 b 813 453 917 463 861 458 b 793 476 794 450 790 461 l 803 535 b 826 558 806 547 810 554 b 993 582 872 571 938 582 b 1172 451 1113 582 1172 543 b 1053 278 1172 385 1140 331 l 983 235 b 854 122 910 190 863 160 l 1083 122 b 1103 101 1101 122 1106 115 l 1090 24 b 1063 0 1088 8 1082 0 l 728 0 b 708 24 711 0 706 11 l 721 100 b 858 300 736 186 775 246 "},"¾":{"ha":1168,"x_min":0,"x_max":0,"o":"m 1168 1024 b 1160 1004 1168 1018 1165 1011 l 411 29 b 374 0 396 10 389 0 l 231 0 b 218 11 222 0 218 4 b 225 29 218 17 219 22 l 974 1004 b 1014 1032 990 1025 999 1032 l 1157 1032 b 1168 1024 1165 1032 1168 1029 m 1144 149 b 1118 125 1143 136 1138 125 l 1076 125 l 1060 24 b 1033 0 1057 7 1053 0 l 933 0 b 915 24 917 0 914 11 l 932 125 l 722 125 b 704 149 711 125 701 131 l 718 221 b 732 250 719 229 722 240 l 1025 561 b 1053 575 1033 569 1042 575 l 1133 575 b 1153 551 1153 575 1156 564 l 1097 240 l 1139 240 b 1157 217 1157 240 1160 232 l 1144 149 m 982 383 l 851 240 l 957 240 m 165 585 b 314 578 217 581 282 578 b 393 660 375 578 393 607 b 350 703 393 685 388 703 l 218 703 b 200 726 201 703 197 713 l 211 790 b 238 813 214 804 219 813 l 367 813 b 433 885 419 813 433 857 b 375 928 433 914 419 928 b 239 919 343 928 289 926 b 207 940 214 915 204 921 l 217 1000 b 242 1024 219 1014 231 1019 b 407 1047 283 1035 340 1047 b 581 918 519 1047 581 1001 b 496 758 581 843 547 786 b 538 660 525 733 538 707 b 299 458 538 525 457 458 b 143 479 239 458 182 468 b 126 503 133 483 124 488 l 138 563 b 165 585 140 576 147 585 "},"¿":{"ha":665,"x_min":0,"x_max":0,"o":"m 657 769 l 625 594 b 593 567 622 579 608 567 l 429 567 b 406 590 415 567 406 576 l 406 594 l 438 769 b 469 796 440 785 454 796 l 633 796 b 657 774 647 796 657 788 m 606 -65 b 604 -75 606 -68 604 -72 l 583 -199 b 551 -235 581 -218 574 -229 b 324 -264 489 -253 401 -264 b 57 -76 171 -264 57 -203 b 207 211 57 44 126 128 l 285 292 b 388 415 363 372 382 386 l 394 454 b 432 481 397 471 417 481 l 571 481 b 592 458 585 481 592 469 l 592 453 l 586 415 b 497 229 575 343 563 299 l 415 142 b 322 -21 371 94 322 50 b 381 -61 322 -46 333 -61 b 582 -46 453 -61 514 -54 l 586 -46 b 606 -65 600 -46 606 -54 "},"À":{"ha":929,"x_min":0,"x_max":0,"o":"m 907 28 b 879 0 907 11 894 0 l 689 0 b 665 25 675 0 665 11 l 656 253 l 371 253 l 281 25 b 249 0 275 11 263 0 l 50 0 b 31 17 38 0 31 7 b 33 29 31 21 32 25 l 392 890 b 650 1044 447 1024 554 1044 b 851 890 746 1044 843 1024 l 907 29 l 907 28 m 633 826 b 619 847 633 840 632 847 b 596 826 607 847 601 840 l 443 443 l 650 443 m 793 1115 b 778 1103 793 1108 788 1103 l 640 1103 b 610 1119 622 1103 619 1108 l 471 1289 b 467 1299 468 1293 467 1296 b 483 1310 467 1306 474 1310 l 656 1310 b 690 1289 675 1310 681 1304 l 789 1126 b 793 1115 792 1122 793 1118 "},"Á":{"ha":929,"x_min":0,"x_max":0,"o":"m 907 28 b 879 0 907 11 894 0 l 689 0 b 665 25 675 0 665 11 l 656 253 l 371 253 l 281 25 b 249 0 275 11 263 0 l 50 0 b 31 17 38 0 31 7 b 33 29 31 21 32 25 l 392 890 b 650 1044 447 1024 554 1044 b 851 890 746 1044 843 1024 l 907 29 l 907 28 m 633 826 b 619 847 633 840 632 847 b 596 826 607 847 601 840 l 443 443 l 650 443 m 956 1301 b 947 1289 956 1297 953 1293 l 747 1119 b 711 1103 735 1108 729 1103 l 549 1103 b 538 1111 542 1103 538 1106 b 546 1126 538 1115 540 1121 l 704 1289 b 744 1310 719 1304 725 1310 l 940 1310 b 956 1301 949 1310 956 1307 "},"Â":{"ha":929,"x_min":0,"x_max":0,"o":"m 907 28 b 879 0 907 11 894 0 l 689 0 b 665 25 675 0 665 11 l 656 253 l 371 253 l 281 25 b 249 0 275 11 263 0 l 50 0 b 31 17 38 0 31 7 b 33 29 31 21 32 25 l 392 890 b 650 1044 447 1024 554 1044 b 851 890 746 1044 843 1024 l 907 29 l 907 28 m 633 826 b 619 847 633 840 632 847 b 596 826 607 847 601 840 l 443 443 l 650 443 m 935 1117 b 921 1104 935 1110 931 1104 l 785 1104 b 754 1121 767 1104 763 1108 l 685 1218 l 578 1121 b 542 1104 564 1108 560 1104 l 392 1104 b 381 1113 385 1104 381 1107 b 389 1128 381 1117 383 1122 l 542 1290 b 582 1311 557 1306 563 1311 l 804 1311 b 839 1290 824 1311 829 1307 l 932 1128 b 935 1117 935 1124 935 1119 "},"Ã":{"ha":929,"x_min":0,"x_max":0,"o":"m 907 28 b 879 0 907 11 894 0 l 689 0 b 665 25 675 0 665 11 l 656 253 l 371 253 l 281 25 b 249 0 275 11 263 0 l 50 0 b 31 17 38 0 31 7 b 33 29 31 21 32 25 l 392 890 b 650 1044 447 1024 554 1044 b 851 890 746 1044 843 1024 l 907 29 l 907 28 m 633 826 b 619 847 633 840 632 847 b 596 826 607 847 601 840 l 443 443 l 650 443 m 968 1288 l 964 1260 b 774 1090 946 1135 885 1090 b 671 1124 746 1090 696 1104 l 619 1164 b 568 1189 599 1181 583 1189 b 529 1151 550 1189 536 1185 l 524 1125 b 499 1101 521 1110 513 1101 l 400 1101 b 382 1118 389 1101 382 1107 b 383 1125 382 1119 383 1122 l 389 1151 b 582 1319 414 1272 468 1319 b 681 1288 610 1319 654 1307 l 733 1249 b 785 1224 754 1233 769 1224 b 824 1261 806 1224 818 1226 l 828 1288 b 854 1310 831 1303 840 1310 l 951 1310 b 968 1294 963 1310 968 1304 "},"Ä":{"ha":929,"x_min":0,"x_max":0,"o":"m 907 28 b 879 0 907 11 894 0 l 689 0 b 665 25 675 0 665 11 l 656 253 l 371 253 l 281 25 b 249 0 275 11 263 0 l 50 0 b 31 17 38 0 31 7 b 33 29 31 21 32 25 l 392 890 b 650 1044 447 1024 554 1044 b 851 890 746 1044 843 1024 l 907 29 l 907 28 m 633 826 b 619 847 633 840 632 847 b 596 826 607 847 601 840 l 443 443 l 650 443 m 939 1269 l 917 1140 b 881 1113 914 1125 896 1113 l 750 1113 b 726 1136 736 1113 726 1122 l 726 1140 l 749 1269 b 783 1297 751 1285 768 1297 l 914 1297 b 939 1274 928 1297 939 1288 m 638 1269 l 615 1140 b 581 1113 613 1125 596 1113 l 450 1113 b 425 1136 436 1113 425 1122 l 425 1140 l 447 1269 b 483 1297 450 1285 468 1297 l 614 1297 b 638 1274 628 1297 638 1288 "},"Å":{"ha":929,"x_min":0,"x_max":0,"o":"m 907 28 b 879 0 907 11 894 0 l 689 0 b 665 25 675 0 665 11 l 656 253 l 371 253 l 281 25 b 249 0 275 11 263 0 l 50 0 b 31 17 38 0 31 7 b 33 29 31 21 32 25 l 392 890 b 650 1044 447 1024 554 1044 b 851 890 746 1044 843 1024 l 907 29 l 907 28 m 633 826 b 619 847 633 840 632 847 b 596 826 607 847 601 840 l 443 443 l 650 443 m 839 1243 b 678 1082 839 1154 767 1082 b 515 1243 589 1082 515 1154 b 678 1406 515 1332 589 1406 b 839 1243 767 1406 839 1332 m 740 1244 b 678 1306 740 1278 711 1306 b 618 1244 644 1306 618 1279 b 678 1183 618 1210 644 1183 b 740 1244 711 1183 740 1211 "},"Æ":{"ha":1283,"x_min":0,"x_max":0,"o":"m 1382 1013 b 1381 1004 1382 1010 1381 1007 l 1357 869 b 1325 842 1354 854 1340 842 l 989 842 l 950 621 l 1275 621 b 1297 599 1289 621 1297 611 l 1297 593 l 1275 461 b 1242 433 1272 446 1257 433 l 917 433 l 890 286 b 888 250 888 272 888 260 b 963 192 888 206 910 192 l 1210 192 b 1233 168 1224 192 1233 182 l 1233 164 l 1210 35 b 1178 6 1207 17 1197 8 b 939 -12 1128 -1 1089 -12 b 647 208 774 -12 647 40 b 650 253 647 222 649 238 l 374 253 l 283 25 b 251 0 278 11 265 0 l 50 0 b 31 18 38 0 31 7 b 33 29 31 22 32 25 l 392 890 b 647 1032 447 1024 551 1032 l 1358 1032 b 1382 1013 1375 1032 1382 1025 m 622 847 b 599 826 610 847 604 840 l 446 443 l 682 443 l 754 847 "},"Ç":{"ha":779,"x_min":0,"x_max":0,"o":"m 897 990 l 874 856 b 840 828 871 839 858 828 l 839 828 l 838 828 b 635 839 786 832 711 839 b 421 604 539 839 454 789 l 389 429 b 381 344 383 397 381 369 b 521 194 381 229 442 194 b 728 206 597 194 674 201 l 732 206 b 756 185 746 206 756 199 b 754 178 756 183 754 181 l 729 43 b 693 11 725 24 714 17 b 482 -12 663 1 579 -12 b 139 326 300 -12 139 99 b 149 429 139 358 142 393 l 181 604 b 669 1044 247 969 447 1044 b 872 1021 767 1044 844 1031 b 897 997 889 1015 897 1011 l 897 993 m 588 -57 b 579 -69 588 -60 585 -64 l 379 -239 b 343 -256 365 -250 361 -256 l 194 -256 b 183 -247 186 -256 183 -253 b 192 -232 183 -243 186 -237 l 349 -69 b 390 -49 364 -54 371 -49 l 574 -49 b 588 -57 582 -49 588 -51 "},"È":{"ha":807,"x_min":0,"x_max":0,"o":"m 906 1007 b 904 999 906 1004 904 1001 l 881 869 b 849 842 878 854 864 842 l 567 842 b 461 749 510 842 475 831 l 439 621 l 799 621 b 821 597 813 621 821 611 l 821 593 l 799 461 b 765 433 796 446 781 433 l 406 433 l 379 286 b 375 250 376 272 375 260 b 451 192 375 206 399 192 l 733 192 b 757 168 747 192 757 182 l 757 164 l 733 35 b 701 6 731 17 721 8 b 432 -12 651 -1 582 -12 b 136 218 288 -12 136 39 b 143 286 136 239 139 263 l 225 747 b 617 1044 272 1017 426 1044 b 881 1026 767 1044 833 1033 b 906 1007 897 1024 906 1019 m 740 1117 b 725 1104 740 1110 735 1104 l 588 1104 b 557 1121 569 1104 567 1110 l 418 1290 b 414 1300 415 1294 414 1297 b 431 1311 414 1307 421 1311 l 603 1311 b 638 1290 622 1311 628 1306 l 736 1128 b 740 1117 739 1124 740 1119 "},"É":{"ha":807,"x_min":0,"x_max":0,"o":"m 906 1007 b 904 999 906 1004 904 1001 l 881 869 b 849 842 878 854 864 842 l 567 842 b 461 749 510 842 475 831 l 439 621 l 799 621 b 821 597 813 621 821 611 l 821 593 l 799 461 b 765 433 796 446 781 433 l 406 433 l 379 286 b 375 250 376 272 375 260 b 451 192 375 206 399 192 l 733 192 b 757 168 747 192 757 182 l 757 164 l 733 35 b 701 6 731 17 721 8 b 432 -12 651 -1 582 -12 b 136 218 288 -12 136 39 b 143 286 136 239 139 263 l 225 747 b 617 1044 272 1017 426 1044 b 881 1026 767 1044 833 1033 b 906 1007 897 1024 906 1019 m 900 1303 b 892 1290 900 1299 897 1294 l 692 1121 b 656 1104 679 1110 674 1104 l 493 1104 b 482 1113 486 1104 482 1107 b 490 1128 482 1117 485 1122 l 649 1290 b 689 1311 664 1306 669 1311 l 885 1311 b 900 1303 893 1311 900 1308 "},"Ê":{"ha":807,"x_min":0,"x_max":0,"o":"m 906 1007 b 904 999 906 1004 904 1001 l 881 869 b 849 842 878 854 864 842 l 567 842 b 461 749 510 842 475 831 l 439 621 l 799 621 b 821 597 813 621 821 611 l 821 593 l 799 461 b 765 433 796 446 781 433 l 406 433 l 379 286 b 375 250 376 272 375 260 b 451 192 375 206 399 192 l 733 192 b 757 168 747 192 757 182 l 757 164 l 733 35 b 701 6 731 17 721 8 b 432 -12 651 -1 582 -12 b 136 218 288 -12 136 39 b 143 286 136 239 139 263 l 225 747 b 617 1044 272 1017 426 1044 b 881 1026 767 1044 833 1033 b 906 1007 897 1024 906 1019 m 904 1117 b 890 1104 904 1110 900 1104 l 754 1104 b 724 1121 736 1104 732 1108 l 654 1218 l 547 1121 b 511 1104 533 1108 529 1104 l 361 1104 b 350 1113 354 1104 350 1107 b 358 1128 350 1117 353 1122 l 511 1290 b 551 1311 526 1306 532 1311 l 774 1311 b 808 1290 793 1311 799 1307 l 901 1128 b 904 1117 904 1124 904 1119 "},"Ë":{"ha":807,"x_min":0,"x_max":0,"o":"m 906 1007 b 904 999 906 1004 904 1001 l 881 869 b 849 842 878 854 864 842 l 567 842 b 461 749 510 842 475 831 l 439 621 l 799 621 b 821 597 813 621 821 611 l 821 593 l 799 461 b 765 433 796 446 781 433 l 406 433 l 379 286 b 375 250 376 272 375 260 b 451 192 375 206 399 192 l 733 192 b 757 168 747 192 757 182 l 757 164 l 733 35 b 701 6 731 17 721 8 b 432 -12 651 -1 582 -12 b 136 218 288 -12 136 39 b 143 286 136 239 139 263 l 225 747 b 617 1044 272 1017 426 1044 b 881 1026 767 1044 833 1033 b 906 1007 897 1024 906 1019 m 876 1269 l 854 1140 b 818 1113 851 1125 833 1113 l 688 1113 b 664 1136 674 1113 664 1122 l 664 1140 l 686 1269 b 721 1297 689 1285 706 1297 l 851 1297 b 876 1274 865 1297 876 1288 m 575 1269 l 553 1140 b 518 1113 550 1125 533 1113 l 388 1113 b 363 1136 374 1113 363 1122 l 363 1140 l 385 1269 b 421 1297 388 1285 406 1297 l 551 1297 b 575 1274 565 1297 575 1288 "},"Ì":{"ha":432,"x_min":0,"x_max":0,"o":"m 513 1006 l 340 28 b 308 0 338 13 324 0 l 122 0 b 103 21 110 0 103 10 l 103 28 l 275 1006 b 304 1032 278 1021 289 1032 l 490 1032 b 513 1011 504 1032 513 1024 m 546 1117 b 531 1104 546 1110 540 1104 l 393 1104 b 363 1121 375 1104 372 1110 l 224 1290 b 219 1300 221 1294 219 1297 b 236 1311 219 1307 226 1311 l 408 1311 b 443 1290 428 1311 433 1306 l 542 1128 b 546 1117 544 1124 546 1119 "},"Í":{"ha":432,"x_min":0,"x_max":0,"o":"m 513 1006 l 340 28 b 308 0 338 13 324 0 l 122 0 b 103 21 110 0 103 10 l 103 28 l 275 1006 b 304 1032 278 1021 289 1032 l 490 1032 b 513 1011 504 1032 513 1024 m 692 1303 b 683 1290 692 1299 689 1294 l 483 1121 b 447 1104 471 1110 465 1104 l 285 1104 b 274 1113 278 1104 274 1107 b 282 1128 274 1117 276 1122 l 440 1290 b 481 1311 456 1306 461 1311 l 676 1311 b 692 1303 685 1311 692 1308 "},"Î":{"ha":432,"x_min":0,"x_max":0,"o":"m 513 1006 l 340 28 b 308 0 338 13 324 0 l 122 0 b 103 21 110 0 103 10 l 103 28 l 275 1006 b 304 1032 278 1021 289 1032 l 490 1032 b 513 1011 504 1032 513 1024 m 690 1115 b 676 1103 690 1108 686 1103 l 540 1103 b 510 1119 522 1103 518 1107 l 440 1217 l 333 1119 b 297 1103 319 1107 315 1103 l 147 1103 b 136 1111 140 1103 136 1106 b 144 1126 136 1115 139 1121 l 297 1289 b 338 1310 313 1304 318 1310 l 560 1310 b 594 1289 579 1310 585 1306 l 688 1126 b 690 1115 690 1122 690 1118 "},"Ï":{"ha":432,"x_min":0,"x_max":0,"o":"m 513 1006 l 340 28 b 308 0 338 13 324 0 l 122 0 b 103 21 110 0 103 10 l 103 28 l 275 1006 b 304 1032 278 1021 289 1032 l 490 1032 b 513 1011 504 1032 513 1024 m 685 1269 l 663 1140 b 626 1113 660 1125 642 1113 l 496 1113 b 472 1136 482 1113 472 1122 l 472 1140 l 494 1269 b 529 1297 497 1285 514 1297 l 660 1297 b 685 1274 674 1297 685 1288 m 383 1269 l 361 1140 b 326 1113 358 1125 342 1113 l 196 1113 b 171 1136 182 1113 171 1122 l 171 1140 l 193 1269 b 229 1297 196 1285 214 1297 l 360 1297 b 383 1274 374 1297 383 1288 "},"Ñ":{"ha":1013,"x_min":0,"x_max":0,"o":"m 1093 1006 l 925 53 b 864 0 919 24 893 0 l 747 0 b 671 43 718 0 686 6 l 440 590 b 429 601 436 599 433 601 b 421 590 425 601 422 599 l 322 28 b 289 0 319 13 304 0 l 125 0 b 103 24 111 0 103 10 l 103 28 l 269 979 b 332 1032 275 1008 303 1032 l 438 1032 b 513 989 465 1032 499 1024 l 751 417 b 760 406 756 408 756 406 b 769 418 763 406 768 408 l 874 1006 b 906 1032 876 1021 890 1032 l 1069 1032 b 1093 1010 1083 1032 1093 1022 m 1003 1288 l 999 1260 b 808 1090 981 1135 919 1090 b 706 1124 781 1090 731 1104 l 654 1164 b 603 1189 633 1181 618 1189 b 564 1151 585 1189 571 1185 l 558 1125 b 533 1101 556 1110 547 1101 l 435 1101 b 417 1118 424 1101 417 1107 b 418 1125 417 1119 418 1122 l 424 1151 b 617 1319 449 1272 503 1319 b 715 1288 644 1319 689 1307 l 768 1249 b 819 1224 789 1233 804 1224 b 858 1261 840 1224 853 1226 l 863 1288 b 889 1310 865 1303 875 1310 l 986 1310 b 1003 1294 997 1310 1003 1304 "},"Ò":{"ha":969,"x_min":0,"x_max":0,"o":"m 1011 707 b 1001 599 1011 674 1008 638 l 972 433 b 482 -12 915 108 743 -12 b 140 328 292 -12 140 100 b 150 433 140 361 143 396 l 179 599 b 669 1044 240 943 438 1044 b 1011 707 856 1044 1011 943 m 772 690 b 632 836 772 794 725 836 b 419 599 515 836 450 772 l 390 433 b 381 336 383 396 381 364 b 519 196 381 232 428 196 b 733 433 636 196 704 267 l 763 599 b 772 690 768 633 772 664 m 800 1115 b 785 1103 800 1108 794 1103 l 647 1103 b 617 1119 629 1103 626 1108 l 478 1289 b 474 1299 475 1293 474 1296 b 490 1310 474 1306 481 1310 l 663 1310 b 697 1289 682 1310 688 1304 l 796 1126 b 800 1115 799 1122 800 1118 "},"Ó":{"ha":969,"x_min":0,"x_max":0,"o":"m 1011 707 b 1001 599 1011 674 1008 638 l 972 433 b 482 -12 915 108 743 -12 b 140 328 292 -12 140 100 b 150 433 140 361 143 396 l 179 599 b 669 1044 240 943 438 1044 b 1011 707 856 1044 1011 943 m 772 690 b 632 836 772 794 725 836 b 419 599 515 836 450 772 l 390 433 b 381 336 383 396 381 364 b 519 196 381 232 428 196 b 733 433 636 196 704 267 l 763 599 b 772 690 768 633 772 664 m 953 1303 b 944 1290 953 1299 950 1294 l 744 1121 b 708 1104 732 1110 726 1104 l 546 1104 b 535 1113 539 1104 535 1107 b 543 1128 535 1117 538 1122 l 701 1290 b 742 1311 717 1306 722 1311 l 938 1311 b 953 1303 946 1311 953 1308 "},"Ô":{"ha":969,"x_min":0,"x_max":0,"o":"m 1011 707 b 1001 599 1011 674 1008 638 l 972 433 b 482 -12 915 108 743 -12 b 140 328 292 -12 140 100 b 150 433 140 361 143 396 l 179 599 b 669 1044 240 943 438 1044 b 1011 707 856 1044 1011 943 m 772 690 b 632 836 772 794 725 836 b 419 599 515 836 450 772 l 390 433 b 381 336 383 396 381 364 b 519 196 381 232 428 196 b 733 433 636 196 704 267 l 763 599 b 772 690 768 633 772 664 m 951 1117 b 938 1104 951 1110 947 1104 l 801 1104 b 771 1121 783 1104 779 1108 l 701 1218 l 594 1121 b 558 1104 581 1108 576 1104 l 408 1104 b 397 1113 401 1104 397 1107 b 406 1128 397 1117 400 1122 l 558 1290 b 599 1311 574 1306 579 1311 l 821 1311 b 856 1290 840 1311 846 1307 l 949 1128 b 951 1117 951 1124 951 1119 "},"Õ":{"ha":969,"x_min":0,"x_max":0,"o":"m 1011 707 b 1001 599 1011 674 1008 638 l 972 433 b 482 -12 915 108 743 -12 b 140 328 292 -12 140 100 b 150 433 140 361 143 396 l 179 599 b 669 1044 240 943 438 1044 b 1011 707 856 1044 1011 943 m 772 690 b 632 836 772 794 725 836 b 419 599 515 836 450 772 l 390 433 b 381 336 383 396 381 364 b 519 196 381 232 428 196 b 733 433 636 196 704 267 l 763 599 b 772 690 768 633 772 664 m 996 1289 l 992 1261 b 801 1092 974 1136 913 1092 b 699 1125 774 1092 724 1106 l 647 1165 b 596 1190 626 1182 611 1190 b 557 1153 578 1190 564 1186 l 551 1126 b 526 1103 549 1111 540 1103 l 428 1103 b 410 1119 417 1103 410 1108 b 411 1126 410 1121 411 1124 l 417 1153 b 610 1321 442 1274 496 1321 b 708 1289 638 1321 682 1308 l 761 1250 b 813 1225 782 1235 797 1225 b 851 1263 833 1225 846 1228 l 856 1289 b 882 1311 858 1304 868 1311 l 979 1311 b 996 1296 990 1311 996 1306 "},"Ö":{"ha":969,"x_min":0,"x_max":0,"o":"m 1011 707 b 1001 599 1011 674 1008 638 l 972 433 b 482 -12 915 108 743 -12 b 140 328 292 -12 140 100 b 150 433 140 361 143 396 l 179 599 b 669 1044 240 943 438 1044 b 1011 707 856 1044 1011 943 m 772 690 b 632 836 772 794 725 836 b 419 599 515 836 450 772 l 390 433 b 381 336 383 396 381 364 b 519 196 381 232 428 196 b 733 433 636 196 704 267 l 763 599 b 772 690 768 633 772 664 m 944 1269 l 922 1140 b 886 1113 919 1125 901 1113 l 756 1113 b 732 1136 742 1113 732 1122 l 732 1140 l 754 1269 b 789 1297 757 1285 774 1297 l 919 1297 b 944 1274 933 1297 944 1288 m 643 1269 l 621 1140 b 586 1113 618 1125 601 1113 l 456 1113 b 431 1136 442 1113 431 1122 l 431 1140 l 453 1269 b 489 1297 456 1285 474 1297 l 619 1297 b 643 1274 633 1297 643 1288 "},"Ù":{"ha":988,"x_min":0,"x_max":0,"o":"m 1072 1006 l 963 388 b 490 -12 900 39 711 -12 b 153 289 296 -12 153 78 b 161 388 153 319 154 351 l 271 1006 b 303 1032 274 1021 288 1032 l 485 1032 b 508 1010 499 1032 508 1022 l 508 1006 l 399 388 b 390 306 393 357 390 329 b 526 186 390 222 429 186 b 725 388 651 186 700 246 l 835 1006 b 867 1032 838 1021 851 1032 l 1047 1032 b 1072 1010 1061 1032 1072 1024 m 831 1115 b 815 1103 831 1108 825 1103 l 678 1103 b 647 1119 660 1103 657 1108 l 508 1289 b 504 1299 506 1293 504 1296 b 521 1310 504 1306 511 1310 l 693 1310 b 728 1289 713 1310 718 1304 l 826 1126 b 831 1115 829 1122 831 1118 "},"Ú":{"ha":988,"x_min":0,"x_max":0,"o":"m 1072 1006 l 963 388 b 490 -12 900 39 711 -12 b 153 289 296 -12 153 78 b 161 388 153 319 154 351 l 271 1006 b 303 1032 274 1021 288 1032 l 485 1032 b 508 1010 499 1032 508 1022 l 508 1006 l 399 388 b 390 306 393 357 390 329 b 526 186 390 222 429 186 b 725 388 651 186 700 246 l 835 1006 b 867 1032 838 1021 851 1032 l 1047 1032 b 1072 1010 1061 1032 1072 1024 m 979 1301 b 971 1289 979 1297 976 1293 l 771 1119 b 735 1103 758 1108 753 1103 l 572 1103 b 561 1111 565 1103 561 1106 b 569 1126 561 1115 564 1121 l 728 1289 b 768 1310 743 1304 749 1310 l 964 1310 b 979 1301 972 1310 979 1307 "},"Û":{"ha":988,"x_min":0,"x_max":0,"o":"m 1072 1006 l 963 388 b 490 -12 900 39 711 -12 b 153 289 296 -12 153 78 b 161 388 153 319 154 351 l 271 1006 b 303 1032 274 1021 288 1032 l 485 1032 b 508 1010 499 1032 508 1022 l 508 1006 l 399 388 b 390 306 393 357 390 329 b 526 186 390 222 429 186 b 725 388 651 186 700 246 l 835 1006 b 867 1032 838 1021 851 1032 l 1047 1032 b 1072 1010 1061 1032 1072 1024 m 971 1117 b 957 1104 971 1110 967 1104 l 821 1104 b 790 1121 803 1104 799 1108 l 721 1218 l 614 1121 b 578 1104 600 1108 596 1104 l 428 1104 b 417 1113 421 1104 417 1107 b 425 1128 417 1117 419 1122 l 578 1290 b 618 1311 593 1306 599 1311 l 840 1311 b 875 1290 860 1311 865 1307 l 968 1128 b 971 1117 971 1124 971 1119 "},"Ü":{"ha":988,"x_min":0,"x_max":0,"o":"m 1072 1006 l 963 388 b 490 -12 900 39 711 -12 b 153 289 296 -12 153 78 b 161 388 153 319 154 351 l 271 1006 b 303 1032 274 1021 288 1032 l 485 1032 b 508 1010 499 1032 508 1022 l 508 1006 l 399 388 b 390 306 393 357 390 329 b 526 186 390 222 429 186 b 725 388 651 186 700 246 l 835 1006 b 867 1032 838 1021 851 1032 l 1047 1032 b 1072 1010 1061 1032 1072 1024 m 960 1269 l 938 1140 b 901 1113 935 1125 917 1113 l 771 1113 b 747 1136 757 1113 747 1122 l 747 1140 l 769 1269 b 804 1297 772 1285 789 1297 l 935 1297 b 960 1274 949 1297 960 1288 m 658 1269 l 636 1140 b 601 1113 633 1125 617 1113 l 471 1113 b 446 1136 457 1113 446 1122 l 446 1140 l 468 1269 b 504 1297 471 1285 489 1297 l 635 1297 b 658 1274 649 1297 658 1288 "},"ß":{"ha":906,"x_min":0,"x_max":0,"o":"m 958 818 b 788 551 958 713 894 596 b 892 368 868 504 892 425 b 490 -12 892 124 733 -12 b 407 -4 467 -12 435 -10 b 385 22 393 -1 382 6 l 408 156 b 428 178 411 171 417 178 l 429 178 b 479 176 446 176 463 176 b 665 365 607 176 665 238 b 538 464 665 424 631 464 l 494 464 b 471 486 481 464 471 472 l 471 490 l 490 600 b 524 626 493 615 508 626 l 567 626 b 732 786 675 626 732 697 b 613 882 732 853 694 882 b 432 715 492 882 451 828 l 311 29 b 279 0 308 14 294 0 l 107 0 b 85 24 93 0 85 11 l 85 29 l 206 715 b 628 1075 254 992 383 1075 b 958 818 843 1075 958 979 "},"à":{"ha":807,"x_min":0,"x_max":0,"o":"m 865 742 b 864 731 865 739 865 735 l 742 28 b 710 0 739 13 725 0 l 568 0 b 544 24 554 0 544 11 l 544 28 l 550 68 b 335 -12 475 10 408 -12 b 101 254 168 -12 101 115 b 108 332 101 281 104 306 b 131 463 108 332 126 436 b 540 807 172 704 322 807 b 828 772 635 807 738 793 b 865 742 851 767 865 763 m 618 614 b 511 622 593 618 550 622 b 353 451 413 622 372 564 l 328 306 b 324 260 325 290 324 275 b 403 175 324 214 340 175 b 550 224 450 175 504 197 l 618 614 m 690 888 b 675 875 690 881 685 875 l 538 875 b 507 892 519 875 517 881 l 368 1061 b 364 1071 365 1065 364 1068 b 381 1082 364 1078 371 1082 l 553 1082 b 588 1061 572 1082 578 1076 l 686 899 b 690 888 689 894 690 890 "},"á":{"ha":807,"x_min":0,"x_max":0,"o":"m 865 742 b 864 731 865 739 865 735 l 742 28 b 710 0 739 13 725 0 l 568 0 b 544 24 554 0 544 11 l 544 28 l 550 68 b 335 -12 475 10 408 -12 b 101 254 168 -12 101 115 b 108 332 101 281 104 306 b 131 463 108 332 126 436 b 540 807 172 704 322 807 b 828 772 635 807 738 793 b 865 742 851 767 865 763 m 618 614 b 511 622 593 618 550 622 b 353 451 413 622 372 564 l 328 306 b 324 260 325 290 324 275 b 403 175 324 214 340 175 b 550 224 450 175 504 197 l 618 614 m 874 1074 b 865 1061 874 1069 871 1065 l 665 892 b 629 875 653 881 647 875 l 467 875 b 456 883 460 875 456 878 b 464 899 456 888 458 893 l 622 1061 b 663 1082 638 1076 643 1082 l 858 1082 b 874 1074 867 1082 874 1079 "},"â":{"ha":807,"x_min":0,"x_max":0,"o":"m 865 742 b 864 731 865 739 865 735 l 742 28 b 710 0 739 13 725 0 l 568 0 b 544 24 554 0 544 11 l 544 28 l 550 68 b 335 -12 475 10 408 -12 b 101 254 168 -12 101 115 b 108 332 101 281 104 306 b 131 463 108 332 126 436 b 540 807 172 704 322 807 b 828 772 635 807 738 793 b 865 742 851 767 865 763 m 618 614 b 511 622 593 618 550 622 b 353 451 413 622 372 564 l 328 306 b 324 260 325 290 324 275 b 403 175 324 214 340 175 b 550 224 450 175 504 197 l 618 614 m 844 888 b 831 875 844 881 840 875 l 694 875 b 664 892 676 875 672 879 l 594 989 l 488 892 b 451 875 474 879 469 875 l 301 875 b 290 883 294 875 290 878 b 299 899 290 888 293 893 l 451 1061 b 492 1082 467 1076 472 1082 l 714 1082 b 749 1061 733 1082 739 1078 l 842 899 b 844 888 844 894 844 890 "},"ã":{"ha":807,"x_min":0,"x_max":0,"o":"m 865 742 b 864 731 865 739 865 735 l 742 28 b 710 0 739 13 725 0 l 568 0 b 544 24 554 0 544 11 l 544 28 l 550 68 b 335 -12 475 10 408 -12 b 101 254 168 -12 101 115 b 108 332 101 281 104 306 b 131 463 108 332 126 436 b 540 807 172 704 322 807 b 828 772 635 807 738 793 b 865 742 851 767 865 763 m 618 614 b 511 622 593 618 550 622 b 353 451 413 622 372 564 l 328 306 b 324 260 325 290 324 275 b 403 175 324 214 340 175 b 550 224 450 175 504 197 l 618 614 m 868 1064 l 864 1036 b 674 867 846 911 785 867 b 571 900 646 867 596 881 l 519 940 b 468 965 499 957 483 965 b 429 928 450 965 436 961 l 424 901 b 399 878 421 886 413 878 l 300 878 b 282 894 289 878 282 883 b 283 901 282 896 283 899 l 289 928 b 482 1096 314 1049 368 1096 b 581 1064 510 1096 554 1083 l 633 1025 b 685 1000 654 1010 669 1000 b 724 1038 706 1000 718 1003 l 728 1064 b 754 1086 731 1079 740 1086 l 851 1086 b 868 1071 863 1086 868 1081 "},"ä":{"ha":807,"x_min":0,"x_max":0,"o":"m 865 742 b 864 731 865 739 865 735 l 742 28 b 710 0 739 13 725 0 l 568 0 b 544 24 554 0 544 11 l 544 28 l 550 68 b 335 -12 475 10 408 -12 b 101 254 168 -12 101 115 b 108 332 101 281 104 306 b 131 463 108 332 126 436 b 540 807 172 704 322 807 b 828 772 635 807 738 793 b 865 742 851 767 865 763 m 618 614 b 511 622 593 618 550 622 b 353 451 413 622 372 564 l 328 306 b 324 260 325 290 324 275 b 403 175 324 214 340 175 b 550 224 450 175 504 197 l 618 614 m 844 1046 l 822 917 b 786 889 819 901 801 889 l 656 889 b 632 913 642 889 632 899 l 632 917 l 654 1046 b 689 1074 657 1061 674 1074 l 819 1074 b 844 1050 833 1074 844 1064 m 543 1046 l 521 917 b 486 889 518 901 501 889 l 356 889 b 331 913 342 889 331 899 l 331 917 l 353 1046 b 389 1074 356 1061 374 1074 l 519 1074 b 543 1050 533 1074 543 1064 "},"å":{"ha":807,"x_min":0,"x_max":0,"o":"m 865 742 b 864 731 865 739 865 735 l 742 28 b 710 0 739 13 725 0 l 568 0 b 544 24 554 0 544 11 l 544 28 l 550 68 b 335 -12 475 10 408 -12 b 101 254 168 -12 101 115 b 108 332 101 281 104 306 b 131 463 108 332 126 436 b 540 807 172 704 322 807 b 828 772 635 807 738 793 b 865 742 851 767 865 763 m 618 614 b 511 622 593 618 550 622 b 353 451 413 622 372 564 l 328 306 b 324 260 325 290 324 275 b 403 175 324 214 340 175 b 550 224 450 175 504 197 l 618 614 m 747 1029 b 586 868 747 940 675 868 b 424 1029 497 868 424 940 b 586 1192 424 1118 497 1192 b 747 1029 675 1192 747 1118 m 649 1031 b 586 1092 649 1064 619 1092 b 526 1031 553 1092 526 1065 b 586 969 526 996 553 969 b 649 1031 619 969 649 997 "},"æ":{"ha":1224,"x_min":0,"x_max":0,"o":"m 1247 533 b 1240 457 1247 508 1244 483 l 1225 368 b 1190 339 1222 353 1206 339 l 760 339 l 750 282 b 747 260 749 274 747 267 b 892 175 747 199 801 175 b 1135 186 944 175 1081 181 l 1142 186 b 1160 171 1153 186 1160 183 l 1160 164 l 1142 64 b 1110 28 1138 43 1132 35 b 826 -12 1028 1 917 -12 b 633 51 747 -12 675 10 b 364 -12 553 11 461 -12 b 96 194 221 -12 96 57 b 100 239 96 208 97 224 l 103 254 b 501 474 135 432 278 474 l 560 474 l 563 486 b 568 542 567 507 568 526 b 478 619 568 600 540 619 b 249 610 392 619 288 614 l 244 610 b 226 628 233 610 226 617 l 226 635 l 246 744 b 279 778 249 760 261 774 b 510 807 329 790 426 807 b 724 724 613 807 679 778 b 965 807 785 782 869 807 b 1247 533 1161 807 1247 683 m 1035 533 b 933 633 1035 596 1004 633 b 786 486 849 633 801 576 l 782 461 l 1026 461 l 1031 486 b 1035 533 1033 503 1035 519 m 481 351 b 317 254 383 351 329 326 l 314 239 b 313 219 313 232 313 225 b 408 147 313 167 357 147 b 513 165 444 147 482 153 l 546 351 "},"ç":{"ha":658,"x_min":0,"x_max":0,"o":"m 735 764 b 733 754 735 761 733 757 l 711 631 b 681 607 708 617 694 607 l 678 607 b 510 617 628 613 589 617 b 368 456 442 617 392 585 l 347 339 b 340 272 343 313 340 290 b 433 178 340 197 375 178 b 604 188 513 178 551 182 l 607 188 b 629 168 619 188 629 181 l 629 164 l 607 40 b 572 8 603 19 594 14 b 388 -12 532 -1 471 -12 b 114 257 225 -12 114 85 b 122 339 114 283 117 310 l 143 456 b 528 807 189 715 326 807 b 710 786 611 807 672 796 b 735 764 726 782 735 776 m 469 -57 b 461 -69 469 -60 467 -64 l 261 -239 b 225 -256 247 -250 243 -256 l 76 -256 b 65 -247 68 -256 65 -253 b 74 -232 65 -243 68 -237 l 231 -69 b 272 -49 244 -54 253 -49 l 456 -49 b 469 -57 464 -49 469 -51 "},"è":{"ha":819,"x_min":0,"x_max":0,"o":"m 842 517 b 835 442 842 493 839 467 l 821 361 b 786 328 817 340 804 328 l 340 328 b 335 271 338 307 335 288 b 458 174 335 199 369 174 b 728 186 546 174 671 181 l 732 186 b 754 168 744 186 754 181 l 754 164 l 735 58 b 700 21 731 36 725 26 b 408 -12 607 -1 529 -12 b 117 267 258 -12 117 74 b 124 344 117 290 119 317 l 140 442 b 556 807 182 683 328 807 b 842 517 743 807 842 679 m 632 528 b 524 626 632 592 601 626 b 364 467 429 626 385 563 l 625 467 b 632 528 629 489 632 510 m 718 888 b 703 875 718 881 713 875 l 565 875 b 535 892 547 875 544 881 l 396 1061 b 392 1071 393 1065 392 1068 b 408 1082 392 1078 399 1082 l 581 1082 b 615 1061 600 1082 606 1076 l 714 899 b 718 888 717 894 718 890 "},"é":{"ha":819,"x_min":0,"x_max":0,"o":"m 842 517 b 835 442 842 493 839 467 l 821 361 b 786 328 817 340 804 328 l 340 328 b 335 271 338 307 335 288 b 458 174 335 199 369 174 b 728 186 546 174 671 181 l 732 186 b 754 168 744 186 754 181 l 754 164 l 735 58 b 700 21 731 36 725 26 b 408 -12 607 -1 529 -12 b 117 267 258 -12 117 74 b 124 344 117 290 119 317 l 140 442 b 556 807 182 683 328 807 b 842 517 743 807 842 679 m 632 528 b 524 626 632 592 601 626 b 364 467 429 626 385 563 l 625 467 b 632 528 629 489 632 510 m 849 1074 b 840 1061 849 1069 846 1065 l 640 892 b 604 875 628 881 622 875 l 442 875 b 431 883 435 875 431 878 b 439 899 431 888 433 893 l 597 1061 b 638 1082 613 1076 618 1082 l 833 1082 b 849 1074 842 1082 849 1079 "},"ê":{"ha":819,"x_min":0,"x_max":0,"o":"m 842 517 b 835 442 842 493 839 467 l 821 361 b 786 328 817 340 804 328 l 340 328 b 335 271 338 307 335 288 b 458 174 335 199 369 174 b 728 186 546 174 671 181 l 732 186 b 754 168 744 186 754 181 l 754 164 l 735 58 b 700 21 731 36 725 26 b 408 -12 607 -1 529 -12 b 117 267 258 -12 117 74 b 124 344 117 290 119 317 l 140 442 b 556 807 182 683 328 807 b 842 517 743 807 842 679 m 632 528 b 524 626 632 592 601 626 b 364 467 429 626 385 563 l 625 467 b 632 528 629 489 632 510 m 842 888 b 828 875 842 881 838 875 l 692 875 b 661 892 674 875 669 879 l 592 989 l 485 892 b 449 875 471 879 467 875 l 299 875 b 288 883 292 875 288 878 b 296 899 288 888 290 893 l 449 1061 b 489 1082 464 1076 469 1082 l 711 1082 b 746 1061 731 1082 736 1078 l 839 899 b 842 888 842 894 842 890 "},"ë":{"ha":819,"x_min":0,"x_max":0,"o":"m 842 517 b 835 442 842 493 839 467 l 821 361 b 786 328 817 340 804 328 l 340 328 b 335 271 338 307 335 288 b 458 174 335 199 369 174 b 728 186 546 174 671 181 l 732 186 b 754 168 744 186 754 181 l 754 164 l 735 58 b 700 21 731 36 725 26 b 408 -12 607 -1 529 -12 b 117 267 258 -12 117 74 b 124 344 117 290 119 317 l 140 442 b 556 807 182 683 328 807 b 842 517 743 807 842 679 m 632 528 b 524 626 632 592 601 626 b 364 467 429 626 385 563 l 625 467 b 632 528 629 489 632 510 m 836 1043 l 814 914 b 778 886 811 899 793 886 l 647 886 b 624 910 633 886 624 896 l 624 914 l 646 1043 b 681 1071 649 1058 665 1071 l 811 1071 b 836 1047 825 1071 836 1061 m 535 1043 l 513 914 b 478 886 510 899 493 886 l 347 886 b 322 910 333 886 322 896 l 322 914 l 344 1043 b 381 1071 347 1058 365 1071 l 511 1071 b 535 1047 525 1071 535 1061 "},"ì":{"ha":403,"x_min":0,"x_max":0,"o":"m 450 768 l 319 28 b 286 0 317 13 301 0 l 117 0 b 94 22 103 0 94 10 l 94 28 l 225 768 b 257 796 228 783 242 796 l 426 796 b 450 772 440 796 450 786 m 474 888 b 458 875 474 881 468 875 l 321 875 b 290 892 303 875 300 881 l 151 1061 b 147 1071 149 1065 147 1068 b 164 1082 147 1078 154 1082 l 336 1082 b 371 1061 356 1082 361 1076 l 469 899 b 474 888 472 894 474 890 "},"í":{"ha":403,"x_min":0,"x_max":0,"o":"m 450 768 l 319 28 b 286 0 317 13 301 0 l 117 0 b 94 22 103 0 94 10 l 94 28 l 225 768 b 257 796 228 783 242 796 l 426 796 b 450 772 440 796 450 786 m 654 1074 b 646 1061 654 1069 651 1065 l 446 892 b 410 875 433 881 428 875 l 247 875 b 236 883 240 875 236 878 b 244 899 236 888 239 893 l 403 1061 b 443 1082 418 1076 424 1082 l 639 1082 b 654 1074 647 1082 654 1079 "},"î":{"ha":403,"x_min":0,"x_max":0,"o":"m 450 768 l 319 28 b 286 0 317 13 301 0 l 117 0 b 94 22 103 0 94 10 l 94 28 l 225 768 b 257 796 228 783 242 796 l 426 796 b 450 772 440 796 450 786 m 635 888 b 621 875 635 881 631 875 l 485 875 b 454 892 467 875 463 879 l 385 989 l 278 892 b 242 875 264 879 260 875 l 92 875 b 81 883 85 875 81 878 b 89 899 81 888 83 893 l 242 1061 b 282 1082 257 1076 263 1082 l 504 1082 b 539 1061 524 1082 529 1078 l 632 899 b 635 888 635 894 635 890 "},"ï":{"ha":403,"x_min":0,"x_max":0,"o":"m 450 768 l 319 28 b 286 0 317 13 301 0 l 117 0 b 94 22 103 0 94 10 l 94 28 l 225 768 b 257 796 228 783 242 796 l 426 796 b 450 772 440 796 450 786 m 631 1043 l 608 914 b 572 886 606 899 588 886 l 442 886 b 418 910 428 886 418 896 l 418 914 l 440 1043 b 475 1071 443 1058 460 1071 l 606 1071 b 631 1047 619 1071 631 1061 m 329 1043 l 307 914 b 272 886 304 899 288 886 l 142 886 b 117 910 128 886 117 896 l 117 914 l 139 1043 b 175 1071 142 1058 160 1071 l 306 1071 b 329 1047 319 1071 329 1061 "},"ñ":{"ha":850,"x_min":0,"x_max":0,"o":"m 861 576 b 853 492 861 550 858 522 l 772 29 b 738 0 769 14 753 0 l 569 0 b 547 24 556 0 547 11 l 547 29 l 628 492 b 635 553 632 515 635 536 b 560 621 635 604 601 621 b 410 576 507 621 440 594 l 314 29 b 281 0 311 14 296 0 l 113 0 b 89 25 99 0 89 11 l 89 29 l 219 768 b 251 796 222 783 236 796 l 403 796 b 426 772 417 796 426 786 l 426 768 l 421 735 b 638 807 483 782 564 807 b 861 576 757 807 861 740 m 886 1064 l 882 1036 b 692 867 864 911 803 867 b 589 900 664 867 614 881 l 538 940 b 486 965 517 957 501 965 b 447 928 468 965 454 961 l 442 901 b 417 878 439 886 431 878 l 318 878 b 300 894 307 878 300 883 b 301 901 300 896 301 899 l 307 928 b 500 1096 332 1049 386 1096 b 599 1064 528 1096 572 1083 l 651 1025 b 703 1000 672 1010 688 1000 b 742 1038 724 1000 736 1003 l 746 1064 b 772 1086 749 1079 758 1086 l 869 1086 b 886 1071 881 1086 886 1081 "},"ò":{"ha":819,"x_min":0,"x_max":0,"o":"m 844 526 b 836 446 844 500 839 463 l 818 349 b 407 -12 774 113 653 -12 b 115 271 218 -12 115 107 b 122 349 115 296 117 322 l 140 446 b 551 807 188 697 321 807 b 844 526 739 807 844 696 m 619 510 b 518 615 619 582 586 615 b 364 446 438 615 386 568 l 346 349 b 339 282 342 324 339 301 b 442 178 339 210 372 178 b 594 349 532 178 574 236 l 613 446 b 619 510 617 469 619 492 m 688 888 b 672 875 688 881 682 875 l 535 875 b 504 892 517 875 514 881 l 365 1061 b 361 1071 363 1065 361 1068 b 378 1082 361 1078 368 1082 l 550 1082 b 585 1061 569 1082 575 1076 l 683 899 b 688 888 686 894 688 890 "},"ó":{"ha":819,"x_min":0,"x_max":0,"o":"m 844 526 b 836 446 844 500 839 463 l 818 349 b 407 -12 774 113 653 -12 b 115 271 218 -12 115 107 b 122 349 115 296 117 322 l 140 446 b 551 807 188 697 321 807 b 844 526 739 807 844 696 m 619 510 b 518 615 619 582 586 615 b 364 446 438 615 386 568 l 346 349 b 339 282 342 324 339 301 b 442 178 339 210 372 178 b 594 349 532 178 574 236 l 613 446 b 619 510 617 469 619 492 m 843 1074 b 835 1061 843 1069 840 1065 l 635 892 b 599 875 622 881 617 875 l 436 875 b 425 883 429 875 425 878 b 433 899 425 888 428 893 l 592 1061 b 632 1082 607 1076 613 1082 l 828 1082 b 843 1074 836 1082 843 1079 "},"ô":{"ha":819,"x_min":0,"x_max":0,"o":"m 844 526 b 836 446 844 500 839 463 l 818 349 b 407 -12 774 113 653 -12 b 115 271 218 -12 115 107 b 122 349 115 296 117 322 l 140 446 b 551 807 188 697 321 807 b 844 526 739 807 844 696 m 619 510 b 518 615 619 582 586 615 b 364 446 438 615 386 568 l 346 349 b 339 282 342 324 339 301 b 442 178 339 210 372 178 b 594 349 532 178 574 236 l 613 446 b 619 510 617 469 619 492 m 842 888 b 828 875 842 881 838 875 l 692 875 b 661 892 674 875 669 879 l 592 989 l 485 892 b 449 875 471 879 467 875 l 299 875 b 288 883 292 875 288 878 b 296 899 288 888 290 893 l 449 1061 b 489 1082 464 1076 469 1082 l 711 1082 b 746 1061 731 1082 736 1078 l 839 899 b 842 888 842 894 842 890 "},"õ":{"ha":819,"x_min":0,"x_max":0,"o":"m 844 526 b 836 446 844 500 839 463 l 818 349 b 407 -12 774 113 653 -12 b 115 271 218 -12 115 107 b 122 349 115 296 117 322 l 140 446 b 551 807 188 697 321 807 b 844 526 739 807 844 696 m 619 510 b 518 615 619 582 586 615 b 364 446 438 615 386 568 l 346 349 b 339 282 342 324 339 301 b 442 178 339 210 372 178 b 594 349 532 178 574 236 l 613 446 b 619 510 617 469 619 492 m 872 1064 l 868 1036 b 678 867 850 911 789 867 b 575 900 650 867 600 881 l 524 940 b 472 965 503 957 488 965 b 433 928 454 965 440 961 l 428 901 b 403 878 425 886 417 878 l 304 878 b 286 894 293 878 286 883 b 288 901 286 896 288 899 l 293 928 b 486 1096 318 1049 372 1096 b 585 1064 514 1096 558 1083 l 638 1025 b 689 1000 658 1010 674 1000 b 728 1038 710 1000 722 1003 l 732 1064 b 758 1086 735 1079 744 1086 l 856 1086 b 872 1071 867 1086 872 1081 "},"ö":{"ha":819,"x_min":0,"x_max":0,"o":"m 844 526 b 836 446 844 500 839 463 l 818 349 b 407 -12 774 113 653 -12 b 115 271 218 -12 115 107 b 122 349 115 296 117 322 l 140 446 b 551 807 188 697 321 807 b 844 526 739 807 844 696 m 619 510 b 518 615 619 582 586 615 b 364 446 438 615 386 568 l 346 349 b 339 282 342 324 339 301 b 442 178 339 210 372 178 b 594 349 532 178 574 236 l 613 446 b 619 510 617 469 619 492 m 836 1043 l 814 914 b 778 886 811 899 793 886 l 647 886 b 624 910 633 886 624 896 l 624 914 l 646 1043 b 681 1071 649 1058 665 1071 l 811 1071 b 836 1047 825 1071 836 1061 m 535 1043 l 513 914 b 478 886 510 899 493 886 l 347 886 b 322 910 333 886 322 896 l 322 914 l 344 1043 b 381 1071 347 1058 365 1071 l 511 1071 b 535 1047 525 1071 535 1061 "},"ù":{"ha":850,"x_min":0,"x_max":0,"o":"m 901 767 l 771 28 b 739 0 768 13 754 0 l 583 0 b 560 22 569 0 560 10 l 560 28 l 567 61 b 346 -12 501 18 442 -12 b 129 219 208 -12 129 74 b 138 304 129 246 132 274 l 218 767 b 253 796 221 782 238 796 l 421 796 b 443 772 435 796 443 785 l 443 767 l 363 304 b 356 240 358 281 356 257 b 442 174 356 193 376 174 b 581 219 469 174 538 194 l 676 767 b 710 796 679 782 694 796 l 878 796 b 901 771 892 796 901 785 m 703 888 b 688 875 703 881 697 875 l 550 875 b 519 892 532 875 529 881 l 381 1061 b 376 1071 378 1065 376 1068 b 393 1082 376 1078 383 1082 l 565 1082 b 600 1061 585 1082 590 1076 l 699 899 b 703 888 701 894 703 890 "},"ú":{"ha":850,"x_min":0,"x_max":0,"o":"m 901 767 l 771 28 b 739 0 768 13 754 0 l 583 0 b 560 22 569 0 560 10 l 560 28 l 567 61 b 346 -12 501 18 442 -12 b 129 219 208 -12 129 74 b 138 304 129 246 132 274 l 218 767 b 253 796 221 782 238 796 l 421 796 b 443 772 435 796 443 785 l 443 767 l 363 304 b 356 240 358 281 356 257 b 442 174 356 193 376 174 b 581 219 469 174 538 194 l 676 767 b 710 796 679 782 694 796 l 878 796 b 901 771 892 796 901 785 m 876 1074 b 868 1061 876 1069 874 1065 l 668 892 b 632 875 656 881 650 875 l 469 875 b 458 883 463 875 458 878 b 467 899 458 888 461 893 l 625 1061 b 665 1082 640 1076 646 1082 l 861 1082 b 876 1074 869 1082 876 1079 "},"û":{"ha":850,"x_min":0,"x_max":0,"o":"m 901 767 l 771 28 b 739 0 768 13 754 0 l 583 0 b 560 22 569 0 560 10 l 560 28 l 567 61 b 346 -12 501 18 442 -12 b 129 219 208 -12 129 74 b 138 304 129 246 132 274 l 218 767 b 253 796 221 782 238 796 l 421 796 b 443 772 435 796 443 785 l 443 767 l 363 304 b 356 240 358 281 356 257 b 442 174 356 193 376 174 b 581 219 469 174 538 194 l 676 767 b 710 796 679 782 694 796 l 878 796 b 901 771 892 796 901 785 m 857 888 b 843 875 857 881 853 875 l 707 875 b 676 892 689 875 685 879 l 607 989 l 500 892 b 464 875 486 879 482 875 l 314 875 b 303 883 307 875 303 878 b 311 899 303 888 306 893 l 464 1061 b 504 1082 479 1076 485 1082 l 726 1082 b 761 1061 746 1082 751 1078 l 854 899 b 857 888 857 894 857 890 "},"ü":{"ha":850,"x_min":0,"x_max":0,"o":"m 901 767 l 771 28 b 739 0 768 13 754 0 l 583 0 b 560 22 569 0 560 10 l 560 28 l 567 61 b 346 -12 501 18 442 -12 b 129 219 208 -12 129 74 b 138 304 129 246 132 274 l 218 767 b 253 796 221 782 238 796 l 421 796 b 443 772 435 796 443 785 l 443 767 l 363 304 b 356 240 358 281 356 257 b 442 174 356 193 376 174 b 581 219 469 174 538 194 l 676 767 b 710 796 679 782 694 796 l 878 796 b 901 771 892 796 901 785 m 854 1043 l 832 914 b 796 886 829 899 811 886 l 665 886 b 642 910 651 886 642 896 l 642 914 l 664 1043 b 699 1071 667 1058 683 1071 l 829 1071 b 854 1047 843 1071 854 1061 m 553 1043 l 531 914 b 496 886 528 899 511 886 l 365 886 b 340 910 351 886 340 896 l 340 914 l 363 1043 b 399 1071 365 1058 383 1071 l 529 1071 b 553 1047 543 1071 553 1061 "},"ÿ":{"ha":822,"x_min":0,"x_max":0,"o":"m 928 775 b 925 764 928 771 926 768 l 547 -54 b 208 -281 471 -218 413 -281 b 39 -258 157 -281 72 -269 b 14 -237 25 -254 14 -249 l 14 -233 l 35 -121 b 67 -94 38 -106 51 -94 l 69 -94 b 242 -106 114 -97 196 -106 b 346 -33 292 -106 321 -89 l 365 10 l 358 10 b 239 139 303 10 251 31 l 165 764 l 165 768 b 197 796 165 785 175 796 l 379 796 b 401 769 393 796 400 783 l 433 239 b 447 221 435 222 439 221 l 458 221 l 685 769 b 718 796 690 783 703 796 l 906 796 b 928 775 918 796 928 786 m 847 1043 l 825 914 b 789 886 822 899 804 886 l 658 886 b 635 910 644 886 635 896 l 635 914 l 657 1043 b 692 1071 660 1058 676 1071 l 822 1071 b 847 1047 836 1071 847 1061 m 546 1043 l 524 914 b 489 886 521 899 504 886 l 358 886 b 333 910 344 886 333 896 l 333 914 l 356 1043 b 392 1071 358 1058 376 1071 l 522 1071 b 546 1047 536 1071 546 1061 "},"Œ":{"ha":1374,"x_min":0,"x_max":0,"o":"m 1471 1006 b 1469 999 1471 1003 1469 1001 l 1446 869 b 1414 842 1443 854 1429 842 l 1132 842 b 1026 749 1075 842 1040 831 l 1007 632 l 1006 621 l 1364 621 b 1386 597 1378 621 1386 611 l 1386 593 l 1364 461 b 1331 433 1361 446 1346 433 l 972 433 b 963 383 969 417 965 400 l 944 286 b 940 250 942 272 940 260 b 1017 192 940 206 964 192 l 1299 192 b 1322 168 1313 192 1322 182 l 1322 164 l 1299 35 b 1267 6 1296 17 1286 8 b 997 -12 1217 -1 1147 -12 b 764 60 911 -12 821 7 b 482 -12 688 10 593 -12 b 140 328 292 -12 140 100 b 150 433 140 361 143 396 l 179 599 b 669 1044 240 943 438 1044 b 903 969 760 1044 842 1021 b 1182 1044 972 1035 1069 1044 b 1446 1026 1332 1044 1399 1033 b 1471 1006 1463 1024 1471 1018 m 772 690 b 632 836 772 794 725 836 b 419 599 515 836 450 772 l 390 433 b 381 336 383 396 381 364 b 519 196 381 232 428 196 b 733 433 636 196 704 267 l 763 599 b 772 690 768 633 772 664 "},"œ":{"ha":1296,"x_min":0,"x_max":0,"o":"m 1318 517 b 1311 442 1318 493 1315 467 l 1297 361 b 1263 328 1293 340 1281 328 l 814 328 b 808 271 811 307 808 288 b 935 174 808 199 857 174 b 1204 186 1022 174 1147 181 l 1208 186 b 1231 168 1221 186 1231 181 l 1231 164 l 1211 58 b 1176 21 1207 36 1201 26 b 885 -12 1083 -1 1006 -12 b 679 71 801 -12 728 14 b 407 -12 614 15 524 -12 b 115 271 218 -12 115 107 b 122 349 115 296 117 322 l 140 446 b 551 807 188 697 321 807 b 775 724 650 807 725 776 b 1032 807 839 779 924 807 b 1318 517 1219 807 1318 679 m 1108 528 b 1000 626 1108 592 1078 626 b 840 467 906 626 861 563 l 1101 467 b 1108 528 1106 489 1108 510 m 619 510 b 518 615 619 582 586 615 b 364 446 438 615 386 568 l 346 349 b 339 282 342 324 339 301 b 442 178 339 210 372 178 b 594 349 532 178 574 236 l 613 446 b 619 510 617 469 619 492 "},"Ÿ":{"ha":901,"x_min":0,"x_max":0,"o":"m 1049 1015 b 1044 1001 1049 1011 1047 1006 l 750 521 b 642 414 711 457 678 428 l 574 28 b 540 0 571 13 556 0 l 358 0 b 336 24 344 0 336 10 l 336 28 l 404 414 b 331 521 372 428 347 457 l 206 1001 b 204 1007 206 1003 204 1006 b 232 1032 204 1021 217 1032 l 426 1032 b 450 1008 440 1032 447 1021 l 531 617 b 549 596 535 599 539 596 b 572 617 558 596 563 599 l 792 1008 b 824 1032 799 1021 810 1032 l 1029 1032 b 1049 1015 1042 1032 1049 1025 m 932 1265 l 910 1136 b 874 1108 907 1121 889 1108 l 743 1108 b 719 1132 729 1108 719 1118 l 719 1136 l 742 1265 b 776 1293 744 1281 761 1293 l 907 1293 b 932 1269 921 1293 932 1283 m 631 1265 l 608 1136 b 574 1108 606 1121 589 1108 l 443 1108 b 418 1132 429 1108 418 1118 l 418 1136 l 440 1265 b 476 1293 443 1281 461 1293 l 607 1293 b 631 1269 621 1293 631 1283 "},"˜":{"ha":690,"x_min":0,"x_max":0,"o":"m 804 1064 l 800 1036 b 610 867 782 911 721 867 b 507 900 582 867 532 881 l 456 940 b 404 965 435 957 419 965 b 365 928 386 965 372 961 l 360 901 b 335 878 357 886 349 878 l 236 878 b 218 894 225 878 218 883 b 219 901 218 896 219 899 l 225 928 b 418 1096 250 1049 304 1096 b 517 1064 446 1096 490 1083 l 569 1025 b 621 1000 590 1010 606 1000 b 660 1038 642 1000 654 1003 l 664 1064 b 690 1086 667 1079 676 1086 l 788 1086 b 804 1071 799 1086 804 1081 "},"–":{"ha":429,"x_min":0,"x_max":0,"o":"m 511 349 b 478 322 508 333 493 322 l 61 322 b 40 349 46 322 38 333 l 60 458 b 90 486 63 474 75 486 l 507 486 b 531 458 522 486 533 474 l 511 349 "},"—":{"ha":832,"x_min":0,"x_max":0,"o":"m 914 349 b 881 322 911 333 896 322 l 61 322 b 40 349 46 322 38 333 l 60 458 b 90 486 63 474 75 486 l 910 486 b 933 458 925 486 936 474 l 914 349 "},"‘":{"ha":351,"x_min":0,"x_max":0,"o":"m 504 1056 b 500 1039 504 1051 503 1046 l 371 735 b 339 708 363 715 353 708 l 174 708 b 160 719 164 708 160 713 b 164 735 160 724 161 729 l 322 1039 b 353 1065 332 1057 339 1065 l 493 1065 b 504 1056 501 1065 504 1061 "},"’":{"ha":351,"x_min":0,"x_max":0,"o":"m 504 1054 b 500 1039 504 1050 503 1044 l 342 735 b 311 708 332 717 325 708 l 171 708 b 160 718 163 708 160 713 b 164 735 160 722 161 728 l 293 1039 b 325 1065 301 1058 311 1065 l 490 1065 b 504 1054 500 1065 504 1061 "},"“":{"ha":657,"x_min":0,"x_max":0,"o":"m 810 1056 b 806 1039 810 1051 808 1046 l 676 735 b 644 708 668 715 658 708 l 479 708 b 465 719 469 708 465 713 b 469 735 465 724 467 729 l 626 1039 b 657 1065 636 1057 643 1065 l 799 1065 b 810 1056 807 1065 810 1061 m 504 1056 b 500 1039 504 1051 503 1046 l 371 735 b 339 708 363 715 353 708 l 174 708 b 160 719 164 708 160 713 b 164 735 160 724 161 729 l 322 1039 b 353 1065 332 1057 339 1065 l 493 1065 b 504 1056 501 1065 504 1061 "},"”":{"ha":657,"x_min":0,"x_max":0,"o":"m 810 1054 b 806 1039 810 1050 808 1044 l 647 735 b 617 708 638 717 631 708 l 476 708 b 465 718 468 708 465 713 b 469 735 465 722 467 728 l 599 1039 b 631 1065 607 1058 617 1065 l 796 1065 b 810 1054 806 1065 810 1061 m 504 1054 b 500 1039 504 1050 503 1044 l 343 735 b 313 708 333 717 326 708 l 171 708 b 160 718 163 708 160 713 b 164 735 160 722 161 728 l 294 1039 b 326 1065 303 1058 313 1065 l 490 1065 b 504 1054 500 1065 504 1061 "},"„":{"ha":657,"x_min":0,"x_max":0,"o":"m 676 215 b 672 203 676 211 675 207 l 483 -108 b 453 -136 474 -124 468 -136 l 331 -136 b 310 -118 318 -136 310 -129 b 313 -108 310 -115 311 -111 l 457 203 b 489 229 465 219 474 229 l 658 229 b 676 215 669 229 676 224 m 358 215 b 354 203 358 211 357 207 l 165 -108 b 135 -136 156 -124 150 -136 l 13 -136 b -8 -118 0 -136 -8 -129 b -6 -108 -8 -115 -7 -111 l 139 203 b 171 229 147 219 156 229 l 340 229 b 358 215 351 229 358 224 "},"•":{"ha":581,"x_min":0,"x_max":0,"o":"m 617 510 b 385 278 617 382 513 278 b 153 510 257 278 153 382 b 385 742 153 638 257 742 b 617 510 513 742 617 638 "},"…":{"ha":1065,"x_min":0,"x_max":0,"o":"m 1032 203 l 1001 28 b 968 0 999 13 983 0 l 804 0 b 782 22 790 0 782 10 l 782 28 l 813 203 b 844 229 815 218 829 229 l 1008 229 b 1032 207 1022 229 1032 221 m 679 203 l 649 28 b 615 0 646 13 631 0 l 451 0 b 429 22 438 0 429 10 l 429 28 l 460 203 b 492 229 463 218 476 229 l 656 229 b 679 207 669 229 679 221 m 326 203 l 296 28 b 263 0 293 13 278 0 l 99 0 b 76 22 85 0 76 10 l 76 28 l 107 203 b 139 229 110 218 124 229 l 303 229 b 326 207 317 229 326 221 "},"‹":{"ha":574,"x_min":0,"x_max":0,"o":"m 650 694 b 642 679 650 689 647 683 l 331 397 l 526 115 b 529 106 529 113 529 108 b 507 88 529 96 519 88 l 356 88 b 317 104 335 88 325 92 l 140 361 b 126 401 131 375 126 389 b 146 443 126 418 135 432 l 404 690 b 449 707 417 703 428 707 l 633 707 b 650 694 644 707 650 701 "},"›":{"ha":574,"x_min":0,"x_max":0,"o":"m 594 393 b 575 351 594 376 586 363 l 317 104 b 272 88 304 92 293 88 l 88 88 b 71 100 76 88 71 93 b 79 115 71 106 74 111 l 390 397 l 194 679 b 192 689 192 682 192 686 b 214 707 192 699 201 707 l 365 707 b 404 690 386 707 396 703 l 581 433 b 594 393 590 419 594 406 "},"€":{"ha":896,"x_min":0,"x_max":0,"o":"m 986 989 l 961 854 b 931 826 958 836 947 826 l 926 826 b 736 838 874 829 813 838 b 528 678 639 838 565 794 l 824 678 b 844 661 838 678 844 671 b 842 650 844 657 843 654 l 814 589 b 781 561 806 571 796 561 l 501 561 l 486 475 l 740 475 b 758 460 750 475 758 468 b 757 454 758 458 758 456 l 721 371 b 699 358 718 363 708 358 l 471 358 l 471 351 l 471 338 b 624 194 471 221 538 194 b 817 206 700 194 763 203 l 821 206 b 844 185 835 206 844 199 b 843 178 844 183 843 181 l 818 43 b 782 11 814 24 803 17 b 585 -12 751 1 682 -12 b 231 336 404 -12 231 93 l 231 351 l 231 358 l 174 358 b 151 381 160 358 151 368 l 151 386 l 163 447 b 194 475 165 463 179 475 l 243 475 l 258 561 l 210 561 b 188 583 196 561 188 571 l 188 589 l 199 650 b 231 678 201 665 215 678 l 282 678 b 763 1044 347 968 564 1044 b 960 1019 860 1044 932 1029 b 986 996 975 1014 986 1010 "}},"familyName":"Neo Sans W1G","ascender":1440,"descender":-397,"underlinePosition":-54,"underlineThickness":111,"boundingBox":{"yMin":-300,"xMin":-126,"yMax":1406,"xMax":1935},"resolution":1000,"original_font_information":{"format":0,"copyright":"Copyright 2004, 2010 Monotype Imaging Inc. All rights reserved. Neo Sans is designed by Sebastian Lester.","fontFamily":"Neo Sans W1G","fontSubfamily":"Regular","uniqueID":"fb4a7211494de0950a8ea98d7ea00241","fullName":"Neo Sans W1G","version":"Version 1.000","postScriptName":"NeoSansW1G-BoldItalic","licenceURL":"https://fonts.adobe.com/eulas/00000000000000007735bb45"},"cssFontWeight":"normal","cssFontStyle":"normal"};

//
//
//
// 3d counter ==============================================================================================
//
 let _font = null;
class make3DCounter {
    constructor(fallbackCounter){
        this.appendTHREEJSscript()
            .then(()=>{
                //extrudeIt(unsafeWindow.THREE);
                this.init();
                this.animate();
            }).catch((e)=>{
                console.log(e);
                alert("AWWWWWW GEEEEEZZZZZ the 3D counter didn't load for some unkown reason!");
                if (fallbackCounter)
                    fallbackCounter();
            });
        
        unsafeWindow.cod3 = this;

        this.events = [];  

//        this.keepItDocked = this.keepItDocked.bind(this);
    }

    init(){
        let _this = this;

        this.THREE = unsafeWindow.THREE;
        this.THREE.Cache.enabled = true;
        this.FontLoader = unsafeWindow.THREE.FontLoader;
        this.TextGeometry = unsafeWindow.THREE.TextGeometry;

        this.text = app.getCurStreak().num + '';

        this.textStyle = {
            size : +localStorage['3dTextSize'] || 200,
            height: null,
	        curveSegments:  4,
            bevelThickness : 2,
            bevelSize : 1.5,
            bevelEnabled : true,
            font : undefined,
            fontName : 'helvetiker',//'droid/droid_sans';//'optimer', // helvetiker, optimer, gentilis, droid sans, droid serif
            fontWeight : 'bold', // normal bold
        };

        this.targetRotation = 0;
        this.targetRotationX = 0;
        this._dist = 1450;

        this.container = document.createElement( 'div' );
        this.container.id = '3D_Streak_Counter';        
        this.HSLColor = { 
                          h: 0.107, /*0.1 == gold */  
                          s: 0.5, 
                          l: 1
                        }; 

        this.appendToDOM();

        this.container.addEventListener('click', async function(){
            if (_this.mouseIsMoving){
                _this.mouseIsMoving = false;
                return;
            }
            _this._flickAnimation();
        });

        this.renderer = new this.THREE.WebGLRenderer( { antialias: true, alpha: true, } );
        this.renderer.setPixelRatio( unsafeWindow.devicePixelRatio );
        let w = window.innerWidth;
        let h = window.innerHeight;
        this.renderer.setSize(w , h );

        // CAMERA
        
        this.makeCamera();

        // SCENE

        this.scene = new this.THREE.Scene();
        this.scene.background = null; //new THREE.Color( 0x000000 );
        //scene.fog = new THREE.Fog( 0x000000, 250, 1400 );
        // LIGHTS


        //this.texture = this.THREE.ImageUtils.loadTexture("https://127.0.0.1/blue_particle.jpg");
        //this.texture = this.THREE.ImageUtils.loadTexture("https://i.imgur.com/ZipLewy.png");
        //loader = new THREE.TextureLoader();
        //.texture = loader.load('https://127.0.0.1/starParticle.png');
        //this.texture1 = loader.load("https://127.0.0.1/blueFire1.png");//"https://i.imgur.com/eKKoWVT.png");//'https://i.imgur.com/LA7DUs1.jpeg');

        //this. treematerial = new THREE.SpriteMaterial( { map: this.texture, color: 0xAA4488, blending: this.THREE.AdditiveBlending,} );
        //this.sprite = new this.THREE.Sprite({
        //         map: this.texture,
        //       //useScreenCoordinates	: false,
        //         color: 0xAA4488,
        //       //blending		: this.THREE.AdditiveBlending,
        //});
        //this.sprite = new this.THREE.Sprite(this.treematerial);
        //.scene.add(this.sprite);

        //const mat = new THREE.MeshBasicMaterial({
        //map: this.texture1, //new THREE.TextureLoader().load('./resources/fire.jpg'),
        //depthTest: true,
        //depthWrite: false,
        //transparent: true,
        //blending: this.THREE.AdditiveBlending,// THREE.CustomBlending,
        //blendEquation: THREE.AddEquation,
        //blendSrc: THREE.OneFactor,
        //blendDst: THREE.OneMinusSrcAlphaFactor,
        

      const mat1 = new THREE.MeshBasicMaterial({
        map: this.texture, //new THREE.TextureLoader().load('./resources/fire.jpg'),
        depthTest: true,
        depthWrite: false,
        transparent: true,
        blending: this.THREE.AdditiveBlending,// THREE.CustomBlending,
      //  blendEquation: THREE.AddEquation,
      //  blendSrc: THREE.OneFactor,
      //  blendDst: THREE.OneMinusSrcAlphaFactor,
    });

    this.postPlane = new THREE.PlaneBufferGeometry(800, 800);
//    let postQuad = new THREE.Mesh(this.postPlane, mat);
   // this.scene.add(postQuad);

    this.postPlane1 = new THREE.PlaneBufferGeometry(700, 700);
 //   this. postQuad1 = new THREE.Mesh(this.postPlane1, mat1);
   //  this.scene.add(this.postQuad1);
//this.     postQuad1.position.z = 10; 
 //   postQuad.position.set(
 //       1920 - (800 * 0.5 + (1280 - 800) * 0.5),
 //       1280 * 0.5, 0);

    //this._scene = new THREE.Scene();
      
      //  const geometry = new this.THREE.BoxGeometry( 20, 20, 20 );
      //  const material = new this.THREE.MeshBasicMaterial( {color: 0x00ff00} );
      //  this.cube = new this.THREE.Mesh( geometry, material );
      //  this.scene.add( this.cube );

        this.dirLight = new this.THREE.DirectionalLight( 0xffffff, 1 );
        this.dirLight.position.set( 0, 350, 0 ); //.normalize();
        this.scene.add( this.dirLight );

        //this.pointLight = new this.THREE.PointLight( 0xffffff, 1 );
        //this.pointLight.position.set( 0, 250, this._dist );
        //this.pointLight.color.setHSL( this.HSLColor.h , this.HSLColor.l, this.HSLColor.s );
        //this.scene.add( this.pointLight );
        
        //SpotLight( color : Integer, intensity : Float, distance : Float, angle : Radians, penumbra : Float, decay : Float )
        this.spotLight = new this.THREE.SpotLight( 0xffffff, 1.0, 0.0, Math.PI/2, 1.0, 1 );
        this.spotLight._angle = this.spotLight.angle;
        this.spotLight.position.set(0, -120, this.textStyle.size * 1.5);//this._dist );
                    
        this.spotLight.color.setHSL( this.HSLColor.h , this.HSLColor.l, this.HSLColor.s );
        this.scene.add( this.spotLight );

       // this.spotLight.target.position.set(0,-30,0);
        this.spotLight.target._trackText = ()=>{
            this.spotLight.target.position.x = this.group.position.x;
            this.spotLight.target.position.y = this.group.position.y;
            this.spotLight.target.position.z = this.group.position.z;
        };

        this.spotLight._trackText = () => {
            this.spotLight.position.x = this.group.position.x;
            this.spotLight.position.y = this.group.position.y;
            this.spotLight.position.z = this.textStyle.size * 1.5;
        };

        this.scene.add( this.spotLight.target);
       
        this.materials = [
            new this.THREE.MeshPhongMaterial( { color: 0xffffff, flatShading: true } ), // front
            new this.THREE.MeshPhongMaterial( { color: 0xffffff } ) // side
        ];

        this.group = new this.THREE.Group();
        this.scene.add( this.group );

        let x = +localStorage.getItem("3dContainerX") || 10;
        let y = +localStorage.getItem("3dContainerY") || 10;

        _this.group.position.x = x;//_this.pointer.x * (_this.w/2) ;
        _this.group.position.y = y;//_this.pointer.y * (_this.h/2) ;

        this.loadFont();
         
        this.refreshText();// If docked, refreshText gets called twice.

        // LINE FOR DRAWING ON SCREEN
        //this.linematerial = new THREE.LineBasicMaterial( { color: 0x0000ff, linewidth: 3, } );
        this.makeLine();


        // RENDERER

        this.renderer.domElement.className = 'cvs';
        this.container.appendChild( this.renderer.domElement );
        //	renderer.domElement.style.border = '1px solid white';
        this.container.style.position = 'absolute';
        this.container.style.top = '0px';
        this.container.style.left = '0px';
        this.container.style.zIndex = '9999999';
        this.container.style.userSelect = 'none';
        this.container.style.display = 'none';
        //GM_addStyle('canvas.cvs:hover { backdrop-filter: blur(5px); }');
        
        this.container.saveState = ()=>{
            //TODO: show deled this?
            let size = this.renderer.getSize();

             this.container._state = {};
             this.container._state.width = size.x; 
             this.container._state.left = this.container.style.left;
             this.container._state.top = this.container.style.top;
        }
        
        this.container.resetState = ()=>{
             if (!this.container._state) return;
             this.setRenderer(this.container._state.width,this.container._state.width);
             this.container.style.left = this.container._state.left;
             this.container.style.top =  this.container._state.top;
             this.container._state = null;
        }
        // EVENTS

       // this.setWheelEvt();
        this.setTextResizeEvent()
        this.setDragEvt();
       // this.setSpinEvents();
        this.setDockingEvents(); 
        this.setRayEvents();
        this.menuEvents();
        //   this.setKeyPressEvts();

        this.container.style.touchAction = 'none';

        let counterIsLocked = JSON.parse(localStorage['lockCounter'] || 'false');
        if (counterIsLocked){
          //  this.container._listeners.mouseDragEvt.off();
          //  this.renderer.domElement._listeners.mouseWheelEvt.off();
        } else {
           // this.container._listeners.mouseDragEvt.on();
           // this.renderer.domElement._listeners.mouseWheelEvt.on();
        }


        this.events.push(unsafeWindow._evt.on("url changed", ()=>{
            let dockState = localStorage['3dDockingState'] || 'station not built';
           
            if (dockState === 'station not built' && _this.dockingState !== 'big score') return;
                let state = dockState;

                this.dockingStation.removeStation();

                if (this.dockingStation.createStation() === false || this.dockingStation.dockCounter() === false){
                    dockState = state;
                    localStorage['3dDockingState'] = dockState;
                }
        }));
        
        this.events.push(unsafeWindow._evt.on('keep streak going', (ans)=>{

            this.clearRotateScoreContinuous();

            this.text = app.getCurStreak().num + '';
            this._updateAnimation();

        }));

        let resizefn = (c)=> {
             let _this = this;
             removeEventListener('resize', resizefn); 

             setTimeout(function(){
                _this.resetScene();
                addEventListener('resize', resizefn);
             },1000);
        };

        addEventListener('resize', resizefn);

        this.events.push( unsafeWindow._evt.on("context menu disable counter state", function(fn){
            let counterIsLocked = JSON.parse(localStorage['lockCounter'] || 'false');
            fn(counterIsLocked);
        }));

        this.events.push(unsafeWindow._evt.on('context menu disable counter', (btn)=>{
            //let el = document.getElementById('streak_container');
            let counterIsLocked = JSON.parse(localStorage['lockCounter'] || 'false');
            // let elListener = _lockCounter? el.addEventListener.bind(el) : el.removeEventListener.bind(el);
            if (counterIsLocked){
                this.container._listeners.mouseDragEvt.on();
                this.renderer.domElement._listeners.mouseWheelEvt.on();
                btn.checkbox.checked = false;
            } else {
                this.container._listeners.mouseDragEvt.off();
                this.renderer.domElement._listeners.mouseWheelEvt.off();
                btn.checkbox.checked = true;
            } 

            localStorage['lockCounter'] = JSON.stringify(!counterIsLocked);
        }));

        this.events.push(unsafeWindow._evt.on('streakStateChanged', (state)=>{
            if (state === 'on'){
                new make3DCounter()
            } else {
                this.unload();
            }
        }));

        this.events.push(unsafeWindow._evt.on('onlyCountCorrectAnswers', (state)=>{
            obj.onlyCountCorrectAnswers = true;
            this.text = app.getCorrectAnswersOnly()+"";
            this._updateAnimation();
        }));

        this.events.push(unsafeWindow._evt.on('update streak', (obj)=>{
            let num = app.getCurStreak().num;

            if (obj.onlyCountCorrectAnswers === true){
                num = app.getCorrectAnswersOnly();
            }
            
            this.text = num + '';
                  
            if (obj.isWrongAnswer && !obj.onlyCountCorrectAnswers){
                this.rotateScoreContinuous();
                this.waitToUpdate();
                return;
            }
            

            let flyingState = localStorage["3dFlyingScoreState"];
            if (flyingState === undefined || flyingState === 'true'){
                this.correctGuessAnimation = new correctGuessAnimation(this.textStyle.font);

                this.correctGuessAnimation.unload = ()=>{
                   this.correctGuessAnimation = false; 
                };
            } 

            setTimeout(()=> this._updateAnimation(), 1000);
            // refreshText();
        }));
        
        unsafeWindow.setRenderer = this.setRenderer.bind(this);

        this.backGroundPulsing = function(){};   
        
        this.makeParticles();
    }

    makeCamera(){
        //this.camera = new this.THREE.PerspectiveCamera( 20, null /*250/300 window.innerWidth / window.innerHeight*/, 1, 6500 );
        const frustumSize = window.innerHeight; 
        const aspect = window.innerWidth / window.innerHeight;
        
        this.camera = new THREE.OrthographicCamera( frustumSize * aspect / - 2, 
                                                    frustumSize * aspect / 2,
                                                    frustumSize / 2,
                                                    frustumSize / - 2,
                                                    -1000,
                                                    2000 );

        this.camera.position.set(0, 0, 200);

        this.cameraTarget = new this.THREE.Vector3( 0, 0, 0 );
    }
 
    appendTODOMInterval = null; 

    appendToDOM(){
        this.appendTODOMInterval = setInterval(()=>{
                let el = document.querySelector('div[data-qa="round-number"]');
                let isStreaks = /streak/i.test(el?.innerHTML);

                if (!el || isStreaks){
                    this.container.style.display = 'none';
                    this.particlesPaused = true;
                } else {
                    if (this.container.style.display === 'none'){
                        document.body.appendChild(this.container);
                        this.container.style.display = '';

                        //   clearInterval(this.appendTODOMInterval);

                        let dockingState = localStorage['3dDockingState'] || 'station not built';

                        this.particlesPaused = false;

                        if(dockingState === 'station not built') return;

                        this.dockingStation.removeStation();
                        this.dockingStation.createStation();
                        this.dockingStation.dockCounter();
                    }
                }
            }, 1000);                         
	}
    ps = 0;

    setRayEvents(){
            let _this = this;
            let numm = this.ps++;
            this.mouseIsDown = null;
            this.groupIsDragging = null;

            this.raycaster = new this.THREE.Raycaster();

            this.INTERSECTED  = null;

			this.pointer = new this.THREE.Vector2();

			document.body.addEventListener( 'mousemove', onPointerMove );
		    document.body.addEventListener( 'mousedown', onMouseDown );

            let el = null; //document.querySelector('div[data-qa="round-number"]');
            let rect = null;
            let textBBox = null;
            let md = {x:null, y:null};
            let lastX = 0;
            let lastY = 0;

            this.container.style.pointerEvents = 'none';
            let points = [];

			function onPointerMove( event ) {
				_this.pointer.x = (event.clientX / window.innerWidth) * 2 - 1;
                _this.pointer.y = -(event.clientY/ window.innerHeight) * 2 + 1;
               
               if (event.ctrlKey){
                    // DRAW A LINE ON SCREEN

                    let p = _this.screenToWorldCoords(event.clientX,event.clientY);

                    points.push(new _this.THREE.Vector3(p.x, p.y, 0));

                   _this.line.geometry.setFromPoints(points);

                }                

                if (_this.groupCanDrag || _this.groupIsDragging){
                   _this.groupCanDrag = false;

                   _this.groupIsDragging = true;

                   let _x = md._x + (event.clientX - md.x);
                   let _y = md._y - (event.clientY - md.y);

                   _this.group.position.x = _x; 
                   _this.group.position.y = _y ; 

                   //_this.spotLight.target.position.x = _x;
                  //  _this.spotLight.target.position.y = _y;
                   _this.spotLight.target._trackText();
                   //_this.spotLight.position.x = _x;
                  // _this.spotLight.position.y = _y;
                    _this.spotLight._trackText();

                    if (rect && 
                        event.clientX > rect.left && event.clientX < rect.right && 
                        event.clientY > rect.top  && event.clientY < rect.bottom){

                        _this.dockingStation.createStation();
                    } else {

                        _this.dockingStation.removeStation();
                    }
                }
			}

            function onMouseDown(event){
                _this.mouseIsDown = true;
                            
                points = [];
                _this.line.geometry.setFromPoints(points);

                if (_this.group.mouseOver){
                     _this.triggerMouseEvent(document.body, 'mouseup');
                     
                     _this.container.style.pointerEvents = '';
                     
                     _this.groupCanDrag = true;

                     _this.spinEvents(event);
                     _this.flickEvents(event);

                    el = document.querySelector('div[data-qa="round-number"]');
              
                    if (el){
                        rect = el.parentElement.getClientRects()[0]; 
                        
                        md.x = event.clientX;
                        md.y = event.clientY;
                        md._x = _this.group.position.x;
                        md._y = _this.group.position.y;
                        //_this.textGeo.computeBoundingBox();

                        //_this.textGeo.boundingBox._xMin = _this.textGeo.boundingBox.max.x - _this.textGeo.boundingBox.
                    }

                }

                document.body.addEventListener('mouseup', mup);

                function mup(event){
                     _this.container.style.pointerEvents = 'none';

                    document.body.removeEventListener('mouseup', mup);

                    if(_this.groupIsDragging && _this.dockingState === 'big score'){
                        localStorage.setItem("3dContainerBigScoreX", _this.group.position.x);
                        localStorage.setItem("3dContainerBigScoreY", _this.group.position.y);
                    } else if (_this.groupIsDragging)  {
                        localStorage.setItem("3dContainerX", _this.group.position.x);
                        localStorage.setItem("3dContainerY", _this.group.position.y);
                    }

                    if (_this.groupIsDragging && 
                        rect && 
                        event.clientX > rect.left && event.clientX < rect.right && 
                        event.clientY > rect.top  && event.clientY < rect.bottom){

                         if( this.dockingState === 'big score') return;

                        _this.dockingStation.dockCounter();

                    } 

                     _this.mouseIsDown = false;
                     _this.groupCanDrag = false;
                     _this.groupIsDragging = false;
                }
            }
    }

    rotateScoreContinuous(){
       let hue = this.HSLColor.h;

       this.rotateScoreContinuousTimer = setInterval(()=>{
           hue += 0.01;

           //this.pointLight.color.setHSL(hue % 1 , this.HSLColor.l, this.HSLColor.s);
           this.spotLight.color.setHSL(hue % 1 , this.HSLColor.l, this.HSLColor.s);
           
          // this.HSLColor.h = Math.random();
           this.targetRotation += 0.055;
       }, 50);
    }
    
    rotateScoreContinuousTimer = null;

    clearRotateScoreContinuous(){
        clearInterval(this.rotateScoreContinuousTimer);
       // this.pointLight.color.setHSL( this.HSLColor.h , this.HSLColor.l, this.HSLColor.s );
        this.spotLight.color.setHSL( this.HSLColor.h , this.HSLColor.l, this.HSLColor.s );
    }


    waitToUpdate(){
        let _this = this;

        document.addEventListener('click', _click_);

        let _evtObj = unsafeWindow._evt.on('keep streak going', (ans)=>{
            document.removeEventListener('click', _click_);

            this.clearRotateScoreContinuous();
                
            unsafeWindow._evt.off(_evtObj);
        });
        
        let _evtObjMsg = unsafeWindow._evt.on("remove keep streak going message", ()=>{
                unsafeWindow._evt.off(_evtObj);
                unsafeWindow._evt.off(_evtObjMsg);
        });

        function _click_(e){
            if (/button/i.test(e.target.className) || e.target.nodeName === "BUTTON"){
                document.removeEventListener('click', _click_);

                setTimeout(()=> {
                    _this.clearRotateScoreContinuous();
                    _this._updateAnimation()
                }, 2000);
            }
        }
    }

    setRenderer(x,y){
      //  this.renderer.setSize(x,y);
      //  this.camera.aspect =  x / y;
      //  this.camera.updateProjectionMatrix();
    }
    
	setCounterSize(num){

            let size = this.renderer.getSize();

            this.camera.aspect = size.x / size.y;
            this.camera.updateProjectionMatrix();

            this.renderer.setSize( size.x, size.y, true);
	}

    appendTHREEJSscript(){
        return new Promise(function(callConstructor, didntload){
            let script = document.createElement('script');
            //script.src = 'https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js';
            script.src = 'https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.js';
            script.addEventListener('load', callConstructor);
            script.addEventListener('error', didntload);
            document.body.appendChild(script);
        });
    }

    loadFont(fontName, fontWeight) {
        this.textStyle.font = new this.THREE.Font(neoSans_Italic);
    }

    makeLine(){
         this.clock = new this.THREE.Clock();
         this.uniformData = {
              u_time: {
                type: 'f',
                value: this.clock.getElapsedTime(),
              },
            };

        this.lineShaderMaterial = new THREE.ShaderMaterial({
             // wireframe: true,
              linewidth: 4,
             // wireframe: true,
              uniforms: this.uniformData,
              vertexShader: `
                  // chandler
                  uniform float u_time;
                  varying vec4 pos;

                  void main()	{
                      vec4 result;
                        
                      result = vec4(position.x+ (sin(position.y + u_time)*6.0), position.y + (cos(position.x + u_time)*5.0), position.z, 1.0);

                      gl_Position = projectionMatrix
                          * modelViewMatrix
                          * result;

                  }
              `,
              fragmentShader: `
              // chandler
              varying vec4 pos;
              uniform float u_time;
              void main() {

                gl_FragColor = vec4(abs(acos(pos.x + u_time)),abs( atan(pos.y + u_time)), abs(asin(pos.y +u_time)), 1.0);
                
              }
              `,
            });
//const material = new THREE.LineBasicMaterial({
//        wireframe: true, 
//        linewidth: 50,
//	color: 0x0000ff,
//        linecap: 'round', //ignored by WebGLRenderer
//	linejoin:  'round'
//});
        this.linegeometry = new THREE.BufferGeometry();
        this.line = new THREE.Line( this.linegeometry, this.lineShaderMaterial );        

        this.scene.add( this.line );
    }

    createText() {

        this.textGeo = new this.TextGeometry( this.text, {
            font: this.textStyle.font,
            size: this.textStyle.size ,
            height: this.textStyle.size < 20? this.textStyle.size * 0.07: this.textStyle.size*0.25,
            curveSegments: this.textStyle.curveSegments * 4,
            bevelThickness: this.textStyle.bevelThickness,
            bevelSize: 15 * (this.textStyle.size / window.innerHeight), //this.bevelSize * (window.innerHeighth),
            bevelEnabled: this.textStyle.bevelEnabled
        } );
        
        this.textGeo.attributes.position._array = new Float32Array(this.textGeo.attributes.position.array);

        this.textGeo.computeBoundingBox();
      
        let centerOffsetX = -0.5 * ( this.textGeo.boundingBox.max.x + this.textGeo.boundingBox.min.x );
        let centerOffsetY = -0.5 * ( this.textGeo.boundingBox.max.y + this.textGeo.boundingBox.min.y );

        let xy = this.renderer.getSize();

        this.camera.aspect =  xy.x / xy.y;
        this.camera.updateProjectionMatrix();

        this.textMesh = new this.THREE.Mesh( this.textGeo, this.materials );

        let n = parseInt(this.text);

        this.textMesh._offSetX = centerOffsetX;
        this.textMesh._offSetY = centerOffsetY;

        this.textMesh.position.x = centerOffsetX;
        this.textMesh.position.y = centerOffsetY;
        this.textMesh.position.z = 0;//-(this.textStyle.size * 0.2 * 0.5);

        this.textMesh.rotation.x = 0;
        this.textMesh.rotation.y = 0;//Math.PI * 2;

        this.group.add( this.textMesh );
        this.group._width = this.textGeo.boundingBox.max.x - this.textGeo.boundingBox.min.x;
        this.group._height = this.textGeo.boundingBox.max.y - this.textGeo.boundingBox.min.y;

      //  this.spotLight.target.position.x = this.group.position.x;
      //  this.spotLight.target.position.y = this.group.position.y;
      //  this.spotLight.target.position.z = this.group.position.z;
          this.spotLight.target._trackText();                           
      //  this.spotLight.position.x = this.group.position.x;
      //  this.spotLight.position.y = this.group.position.y;
      //  this.spotLight.position.z = this.textStyle.size * 1.5;

          this.spotLight._trackText();                           
    }

    refreshText(textSize) {
        this.group.remove( this.textMesh );
        if ( ! this.text ) return;
        this.createText();
    }

    resetTextPos(){

        //     console.log('x=', targetRotationX, targetRotationX % (Math.PI * 2),  targetRotation);
        let fn = Math.abs(this.targetRotationX) % (Math.PI * 2) >= 3.14? Math.ceil: Math.floor;
        fn = this.targetRotationX < 0? 
            fn === Math.ceil ? Math.floor : Math.ceil 
            : fn;
        this.targetRotationX = fn( this.targetRotationX / (Math.PI * 2)) * 2 * Math.PI;

        fn = Math.abs(this.targetRotation) % (Math.PI * 2) >= 3.14? Math.ceil: Math.floor;
        fn = this.targetRotation < 0? 
            fn === Math.ceil ? Math.floor : Math.ceil 
            : fn;
        this.targetRotation = fn( this.targetRotation/ (Math.PI * 2)) * 2 * Math.PI;
    }

    async _updateAnimation(){
        this._flickAnimation();
        this.refreshText();
        if (this.text == '0') return;

        let explodeState = localStorage["3dExplodeState"];
        if (explodeState === undefined || explodeState === 'true'){
            let p = await this.explodeAnimation();
        }
    }

    _flickAnimation(){ 
        // Updating round number.
        let fn = Math.abs(this.targetRotationX) % (Math.PI * 2) >= 3.14? Math.ceil: Math.floor;
        fn = this.targetRotationX < 0? 
            fn === Math.ceil? Math.floor : Math.ceil 
            : fn;

        this.targetRotationX = fn( this.targetRotationX/ (Math.PI * 2)) * 2 * Math.PI + (Math.PI * 2) * 2;

        fn = Math.abs(this.targetRotation) % (Math.PI * 2) >= 3.14? Math.ceil: Math.floor;
        fn = this.targetRotation < 0? 
            fn === Math.ceil? Math.floor : Math.ceil 
            : fn;
        this.targetRotation = fn( this.targetRotation/ (Math.PI * 2)) * 2 * Math.PI + (Math.PI * 2) *1;
    }

    spinEvents(mainEvent){
        let _this = this;

        let resetTimer = 0;

        let targetRotationOnPointerDown = 0;
        let targetRotationOnPointerDownX = 0;

        let pointerXOnPointerDown = 0;
        let pointerYOnPointerDown = 0;
       
        let onPointerDown =  function () {
                 
                if ( mainEvent.isPrimary === false ) return;

                clearTimeout(resetTimer);

                pointerXOnPointerDown = mainEvent.clientX - unsafeWindow.innerWidth/2;
                pointerYOnPointerDown = mainEvent.clientY - unsafeWindow.innerHeight/2;

                targetRotationOnPointerDown = _this.targetRotation;
                targetRotationOnPointerDownX = _this.targetRotationX;

                document.addEventListener( 'pointermove', onPointerMove );
                document.addEventListener( 'pointerup', onPointerUp );
            };

       let onPointerMove = function ( event ) {
            
                if ( event.isPrimary === false ) return;

                let pointerX = event.clientX - unsafeWindow.innerWidth/2;
                let pointerY = event.clientY - unsafeWindow.innerHeight/2;

                if (pointerX != pointerXOnPointerDown || pointerY != pointerYOnPointerDown) {
                    _this.mouseIsMoving = true;
                }

                _this.targetRotation = targetRotationOnPointerDown + ( pointerX - pointerXOnPointerDown ) * 0.02;
                _this.targetRotationX = targetRotationOnPointerDownX + ( pointerY - pointerYOnPointerDown) * 0.02;
            };

       let onPointerUp = function(event) {

                if ( event.isPrimary === false ) return;

                let pointerX = event.clientX - unsafeWindow.innerWidth/2;
                let pointerY = event.clientY - unsafeWindow.innerHeight/2;

                document.removeEventListener( 'pointermove', onPointerMove );
                document.removeEventListener( 'pointerup', onPointerUp );
                resetTimer = setTimeout(_this.resetTextPos.bind(_this), 1000);
                setTimeout(()=> _this.mouseIsMoving = false , 500);
            };

       onPointerDown();
    }

    flickEvents (mainEvent){
        let _this = this;


        let pointerXOnPointerDown = mainEvent.clientX - unsafeWindow.innerWidth/2;
        let pointerYOnPointerDown = mainEvent.clientY - unsafeWindow.innerHeight/2;


       let onPointerUp = function(event) {

                if ( event.isPrimary === false ) return;

                let pointerX = event.clientX - unsafeWindow.innerWidth/2;
                let pointerY = event.clientY - unsafeWindow.innerHeight/2;

                if (pointerX === pointerXOnPointerDown || pointerY == pointerYOnPointerDown) {
                    _this._flickAnimation();
                    _this._flickAnimation();
                }

                document.removeEventListener( 'pointerup', onPointerUp );
            };

        document.addEventListener( 'pointerup', onPointerUp );
    }

    setDragEvt(){
        let _this = this;
        let x = localStorage.getItem("3dContainerX");
        let y = localStorage.getItem("3dContainerY");

       // this.container.style.top = y || '0px';
       // this.container.style.left = x || '0px';
	//this.container.style.opacity = app.getStreakState() == 'on'? '' : '0.5';

        if(!this.container._listeners) {
            this.container._listeners = {};
        }

        this.container._listeners.mouseDragEvt = {
            'on' : function(){
              //  _this.container.addEventListener('mousedown',mDown);
            },
            'off' : function(){
                _this.container.removeEventListener('mousedown',mDown);
            }
        };

        let rect = null;// Rect for docking next to score.

        function mDown(evt) {
            document.body.addEventListener("mousemove", mMove);
            document.body.addEventListener("mouseup", mUp);

            let el = document.querySelector('div[data-qa="score"]');
            if (el){
                rect = el.parentElement.getClientRects()[0]; 
            }

            let bcr = this.getBoundingClientRect();
            let _x = evt.x - bcr.x;
            let _y = evt.y - bcr.y;

            function mUp(e) {
                document.body.removeEventListener("mousemove", mMove);
                document.body.removeEventListener("mouseup", mUp);
                localStorage.setItem("3dContainerY", _this.container.style.top);
                localStorage.setItem("3dContainerX", _this.container.style.left);
            }

            function mMove(e) {

                if ((_this.mouseIsMoving == false && Math.abs(evt.x - e.x) > 2) || Math.abs(evt.y - e.y) > 2) {
                    // Mouse move event fires for no reason in chrome canary.
                    _this.mouseIsMoving = true;
                }

                if (rect && e.clientX > rect.left && e.clientX < rect.right && 
                    e.clientY > rect.top && e.clientY < rect.bottom){
                    _this.readyDockingStation('in');
                } else {
                     _this.readyDockingStation('out');
                }

    //            _this.container.style.top = e.y - _y + "px";
    //            _this.container.style.left = e.x - _x + "px";
            }
        };
    }
    
    setTextResizeEvent(){
            
            document.body.addEventListener('keyup', (e)=>{
                e.preventDefault();

                if (this.dockingState  === "counter is docked") return;

               if (e.ctrlKey === true && e.key === 'ArrowUp'){

                    this.textStyle.size += 20;
                    this.refreshText();
                    this.spotLight.z = this.textStyle.size * 1.5;

                    if (this.dockingState === 'big score'){
                        localStorage['3dBigScoreTextSize'] = this.textStyle.size;
                    } else if (this.dockingState  === "station not built") {
                        localStorage['3dTextSize'] = this.textStyle.size;
                    }

               } else if (e.ctrlKey === true && e.key === 'ArrowDown'){

                    this.textStyle.size -= 20;
                    this.refreshText();
                    this.spotLight.z = this.textStyle.size * 1.5;

                    if (this.dockingState === 'big score'){
                        localStorage['3dBigScoreTextSize'] = this.textStyle.size;
                    } else if (this.dockingState  === "station not built") {
                        localStorage['3dTextSize'] = this.textStyle.size;
                    }

               }
            });
    }

    _setWheelEvt(){
        let _this = this;
        let element = this.renderer.domElement;

        if(!element._listeners) {
            element._listeners = {};
        }

        element._listeners.mouseWheelEvt = {
            'on' : function(){
                element.addEventListener('mousewheel',mWheel);
            },
            'off' : function(){
                element.removeEventListener('mousewheel',mWheel);
            }
        };

        element._listeners.mouseWheelEvt.on();

        function mWheel(x){
            x.preventDefault();	
            let size = _this.renderer.getSize();

            if (x.wheelDelta > 0){
                size.x += 20;
                size.y += 20;
            } else {
                size.x -= 20;
                size.y -= 20;
            }

            _this.camera.aspect = size.x / size.y;
            _this.camera.updateProjectionMatrix();

            _this.renderer.setSize( +size.x, +size.y, true);
            localStorage['3dcontainerSize'] = size.x;
        };
    }
    
    setDockingEvents(){
        let _this = this;

        this.events.push(unsafeWindow._evt.on('endOfRoundScreen', endOfRoundUndocking)); 

        this.events.push(unsafeWindow._evt.on('endOfGameScreen', endOfRoundUndocking));

        function endOfRoundUndocking(){
            let dockingState = localStorage['3dDockingState'] || 'station not built';

            if (dockingState === 'station not built') return;
           
            _this.isDockedMakeBigScore();
        };

        this.events.push(unsafeWindow._evt.on('overlaysRemoved', function(createBtn){
            let dockingState = localStorage['3dDockingState'] || 'station not built';

            if (dockingState == 'station not built') return;

            _this.dockingStation.removeStation();
            _this.dockingStation.createStation();
            _this.dockingStation.dockCounter();
        }));
    }

    menuEvents(){
        let _this = this;

        this.events.push(unsafeWindow._evt.on('openRightClickMenu', function(createBtn){
            let btn = createBtn('Amount of particles', undefined);
            
            let cont = document.createElement('div');
            cont.style.display = 'inline-block';

            let text = document.createElement('span');
            text.innerText = "Amount of 3D particles";

            cont.appendChild(text);

            let input = document.createElement('input');
            input.type = 'number';
            input.style.width = '5em';
            input.value = _this.getParticles();
            
            cont.appendChild(input);
            
            input.addEventListener('change', function(){
                 _this.setParticles(+this.value);
                 _this.particle_amount = +this.value;
            });

            btn.body.innerHTML = '';
            btn.body.appendChild(cont);

            let explodeState = localStorage["3dExplodeState"];
            if (explodeState === undefined || explodeState === 'true'){
                explodeState = true;
            } else {
                explodeState = false;
            }

            btn = createBtn('Exploding score', explodeState);
            btn.checkbox.addEventListener('change', ()=>{
                let explodeState = localStorage["3dExplodeState"];
                if (explodeState === undefined || explodeState === 'true'){
                    explodeState = false;
                } else {
                    explodeState = true;
                }
                localStorage["3dExplodeState"] = explodeState; 
            });

            let flyingState = localStorage["3dFlyingScoreState"];
            if (flyingState === undefined || flyingState === 'true'){
                flyingState = true;
            } else {
                flyingState = false;
            }

            btn = createBtn('Flying score', flyingState);
            btn.checkbox.addEventListener('change', ()=>{
                let flyingState = localStorage["3dFlyingScoreState"];
                if (flyingState === undefined || flyingState === 'true'){
                    flyingState = false;
                } else {
                    flyingState = true;
                }
                localStorage["3dFlyingScoreState"] = flyingState; 
            });

            btn = createBtn('CTRL-UPARROW and CTRL-DOWNARROW to change text size.');

            btn = createBtn('CTRL + mouse, to draw line on screen.');
        }));
    }

    setKeyPressEvts(refreshText){
        let _this = this;

        document.addEventListener( 'keypress', onDocumentKeyPress );
        document.addEventListener( 'keydown', onDocumentKeyDown );

        function onDocumentKeyDown( event ) {
            const keyCode = event.keyCode;
            if ( keyCode == 8 ) {
                // backspace key was pressed.
                event.preventDefault();
                _this.text = _this.text.substring( 0, _this.text.length - 1 );
                _this.refreshText();
                return false;
            }
        }

        function onDocumentKeyPress( event ) {
            const keyCode = event.which;
            if ( keyCode == 8 ) {
                // backspace key was pressed. 
                event.preventDefault();
            } else {
                const ch = String.fromCharCode( keyCode );
                _this.text += ch;
                _this.refreshText();
            }
        }
    }
    
    dockingState = "station not built";

    dockingStation = {
        createStation: ()=> {
             if (this.clonedEl) return false;

             let el = document.querySelector('div[data-qa="round-number"]');
             let isStreaks = /streak/i.test(el?.innerHTML);
             let container = this.renderer.domElement;

             if(!el || isStreaks) return false;

             this.clonedEl = el.cloneNode(true);
             this.clonedEl.firstChild.innerText = "Streak";
             this.clonedEl.id = 'dockedStreak';
             this.clonedEl.firstChild.nextElementSibling.style.visibility = 'hidden';

             el.parentElement.appendChild(this.clonedEl);
             
             this.dockingState = 'station created';
       },
       removeStation : ()=>{
             if(!this.clonedEl) return false;

             this.clonedEl.parentElement.removeChild(this.clonedEl);

             this.clonedEl = null;

            this.textStyle.size = +localStorage['3dTextSize'] || 200;

            this.refreshText();

            this.dockingState = 'station not built';

            localStorage['3dDockingState'] = this.dockingState;
       },
       dockCounter: ()=>{
            if (!this.clonedEl) return false;

            let clonedElRect = this.clonedEl.firstChild.nextElementSibling.getClientRects()[0];

            this.textStyle.size = 16;

            this.refreshText();

            let xy = this.screenToWorldCoords(clonedElRect.x, clonedElRect.y);

            this.group.position.x = xy.x - this.group.children[0]._offSetX + 2;
            this.group.position.y = xy.y + this.group.children[0]._offSetY - 4;
            
            this.spotLight._trackText();                           

            this.spotLight.target._trackText();                           

            this.dockingState = "counter is docked";

            localStorage['3dDockingState'] = this.dockingState;

            unsafeWindow._evt.fire("3d counter is docked", null);

            setTimeout(()=>{
                // Make double sure it's docked.

                if(this.dockingState !== "counter is docked") return;

                this.group.position.x = xy.x - this.group.children[0]._offSetX + 2;
                this.group.position.y = xy.y + this.group.children[0]._offSetY - 4;
                
                this.spotLight._trackText();                           

                this.spotLight.target._trackText();                           

            }, 1000);
       }
    };
    
    
    isDockedMakeBigScore(){
       //  if (this.dockingState !== "counter is docked") return;
         
         this.dockingStation.removeStation();

         this.dockingState = 'big score';
         
         localStorage['3dDockingState'] = this.dockingState; // If Screen gets refreshed.

         let y = null;

         if ( localStorage["3dContainerBigScoreX"]){

             this.group.position.x = +localStorage["3dContainerBigScoreX"];
             y = +localStorage["3dContainerBigScoreY"];
         } else {

             let x = window.innerWidth * 0.80;
             y = window.innerHeight * 0.8;
             
             let xy = this.screenToWorldCoords(x,y);

             this.group.position.x = xy.x;
             y = xy.y + 10;
         }

         let zy = y + 5;
         let zi = 0;

         this.group.position.y = zy;
         this.spotLight.intensity = 0.7;

         let p = setInterval(()=>{
             // Ease down animation becuase it looks good.
             let ease = this.easeOutCubic(zi) ;
          
             this.group.position.y = zy - (ease * 5);
             this.spotLight.target.position.y = this.group.position.y;
             this.spotLight.position.y = this.group.position.y;
             this.spotLight.intensity = 0.8 + (ease * 0.2);

             if (zi >= 1) {
                 clearInterval(p);
                 return;
             }

             zi += 0.015; 
         }, 10);

         this.textStyle.size = +localStorage['3dBigScoreTextSize'] || window.innerHeight * 0.25;

         this.spotLight.target._trackText();                           
        
         this.spotLight._trackText();                           
                                                       
         this.refreshText();
    }

    screenToWorldCoords(X,Y){
       let w = window.innerWidth;
       let h = window.innerHeight;
       
       let ret = {
           x: ((X / w) * 2 - 1) * (w/2),
           y: (-(Y /h) * 2 + 1) * (h/2),
       };

        return ret;
    }
    
    unload() {
        this.container.parentElement.removeChild(this.container);
        if (this.clonedEl){
           this.clonedEl.parentElement.removeChild(this.clonedEl);
        }

        this.events.forEach((evt)=>{
            unsafeWindow._evt.off(evt);
        });

        setTimeout(function(){
            let l = unsafeWindow._evt.on('streakStateChanged', (state)=>{
                if (state === 'on'){
                    app.curCounter = new make3DCounter();
                    unsafeWindow._evt.off(l);
                }
            });
        }, 1000); 
    }

    triggerMouseEvent (node, eventType) {
        //https://stackoverflow.com/questions/24025165/simulating-a-mousedown-click-mouseup-sequence-in-tampermonkey
        var clickEvent = document.createEvent ('MouseEvents');
        clickEvent.initEvent (eventType, true, true);
        node.dispatchEvent (clickEvent);
    }

    getParticles(){
        let ret = +localStorage["3dParticlesAmount"];

        if (isNaN(ret)){
            return 100;
        }

        return ret;
    }

    setParticles(n){
        if (!n || n < 0) n = 0;
        if (/e|E/.test(n)) n = 100;

        localStorage["3dParticlesAmount"] = n;
        this.particle_amount = n;
    }

    async explodeAnimation (){
        // This animation causes stuttering, the promises help most of the time.
        return new Promise(async (res,b) =>{
            let attribPosArray = this.textGeo.attributes.position.array;
            let len = attribPosArray.length;
            let original = new Float32Array(attribPosArray);
            let exploded = new Float32Array(attribPosArray.length);
            let percentFinished = 0;
            let incrementer = 0.19;
            let frames = 0;
            let _this = this;

            let explode = async ()=>{
                return new Promise(function(res,b){
                    setTimeout(()=>{
                        for (let n = 0, r = 0; n < len; n+=9, r += 0.01){
                            let x = Math.sin(n) * _this.group._width/4 + _this.group._width/2;
                            let y = Math.cos(n) * _this.group._width/4 + _this.group._height/2;//(this.group._width/this.group._height);
                            let z = Math.random() * (300);

                            let rand = Math.random();
                            exploded[n+0] = (x + rand * 5) - original[n+0];
                            exploded[n+1] = (y + rand * 5) - original[n+1];
                            exploded[n+2] = (z + rand * 5) - original[n+2];
                                                                        
                            rand = Math.random();        
                            exploded[n+3] = (x + rand * 5) - original[n+3];
                            exploded[n+4] = (y + rand * 5) - original[n+4];
                            exploded[n+5] = (z + rand * 5) - original[n+5];
                                                                        
                            rand = Math.random();        
                            exploded[n+6] = (x + rand * 5) - original[n+6];
                            exploded[n+7] = (y + rand * 5) - original[n+7];
                            exploded[n+8] = (z + rand * 5) - original[n+8];
                        }

                        res();

                    }, 5);
                });
            };

            let t = await explode();

            let p = setInterval(()=>{
                let ease =  this.easeOutCubic(percentFinished);

                if (frames > 40){

                    incrementer = -0.15

                    if (percentFinished < 0){

                        clearInterval(p);

                        if (this.dockingState === "counter is docked"){
                            original = this.textGeo.attributes.position._array; 
                        }

                        this.textGeo.attributes.position.array = original;

                        this.textGeo.attributes.position.needsUpdate = true;

                        res();

                        return;
                    }
                }

		let attribPosArray = this.textGeo.attributes.position.array;

                for (let n = 0; n < len; n+=9){

                    attribPosArray[n+0] = exploded[n+0] * ease + this.textGeo.attributes.position._array[n+0];
                    attribPosArray[n+1] = exploded[n+1] * ease + this.textGeo.attributes.position._array[n+1];
                    attribPosArray[n+2] = exploded[n+2] * ease + this.textGeo.attributes.position._array[n+2];

                    attribPosArray[n+3] = exploded[n+3] * ease + this.textGeo.attributes.position._array[n+3];
                    attribPosArray[n+4] = exploded[n+4] * ease + this.textGeo.attributes.position._array[n+4];
                    attribPosArray[n+5] = exploded[n+5] * ease + this.textGeo.attributes.position._array[n+5];

                    attribPosArray[n+6] = exploded[n+6] * ease + this.textGeo.attributes.position._array[n+6];
                    attribPosArray[n+7] = exploded[n+7] * ease + this.textGeo.attributes.position._array[n+7];
                    attribPosArray[n+8] = exploded[n+8] * ease + this.textGeo.attributes.position._array[n+8];
                }

                percentFinished += incrementer;

                frames += 1;

                this.textGeo.attributes.position.needsUpdate = true;

            }, 10);
        });
    }

    makeParticles(){
    // https://github.com/simondevyoutube/ThreeJS_Tutorial_BlendModes/blob/master/main.js

        const _VS = `
        uniform float pointMultiplier;

        attribute float size;
        attribute float angle;
        attribute float blend;
        attribute vec4 colour;

        varying vec4 vColour;
        varying vec2 vAngle;
        varying float vBlend;

        void main() {
          vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);

          gl_Position = projectionMatrix * mvPosition;
          gl_PointSize = size * pointMultiplier / gl_Position.w;

          vAngle = vec2(cos(angle), sin(angle));
          vColour = colour;
          vBlend = blend;
        }`;

        const _FS = `

        uniform sampler2D diffuseTexture;

        varying vec4 vColour;
        varying vec2 vAngle;
        varying float vBlend;

        void main() {
          vec2 coords = (gl_PointCoord - 0.5) * mat2(vAngle.x, vAngle.y, -vAngle.y, vAngle.x) + 0.5;
          gl_FragColor = texture2D(diffuseTexture, coords) * vColour;
          gl_FragColor.xyz *= gl_FragColor.w;
          gl_FragColor.w *= vBlend;
        }`;

        const loader = new THREE.TextureLoader();
         // this.texture = loader.load('https://127.0.0.1/blueFire1 resized 75% smaller.png'); // Run ./httpServer.py 
         // this.texture = loader.load('https://i.imgur.com/IUNwUGL.png');// Bluefire1 particle full size.
         this.texture = loader.load('https://i.imgur.com/IovTnzu.png'); // Bluefire1 particle 75% smaller.

         const uniforms = {
            diffuseTexture: {
                value: this.texture, //new this.THREE.TextureLoader().load('https://127.0.0.1/starParticle.png'),
            },
            pointMultiplier: {
                value: window.innerHeight / (2.0 * Math.tan(0.5 * 60.0 * Math.PI / 180.0))
            }
        };

        this._material = new THREE.ShaderMaterial({
            uniforms: uniforms,
            vertexShader: _VS,
            fragmentShader: _FS,
            blending: THREE.CustomBlending,
            blendEquation: THREE.AddEquation,
            blendSrc: THREE.OneFactor,
            blendDst: THREE.OneMinusSrcAlphaFactor,
            depthTest: true,
            depthWrite: false,
            transparent: true,
            vertexColors: true
        });

        this._geometry = new THREE.BufferGeometry();

        let particles = [];
      
        this.particle_amount = this.getParticles(); 
        let tempAdditionalAmount = 0;
        let cosOffset = 0; 


        const particlePoints = new THREE.Points(this._geometry, this._material);

        this.scene.add(particlePoints);

        this.particlesPaused = true;

        this.backGroundPulsing = ()=>{
                particles = particles.filter( p => {
                    if (p.x !== this.group.position.x && !p.unload){
                        tempAdditionalAmount += 1;
                        p.unload = true;
                    }

                    if (p.unload){
                        p.life -= 0.23; // Some random number that seemed to work good.
                        p.alphaInc = 0.05; // Some random number that seemed to work good.
                    }

                    let d = Math.sin(p.colour.a);

                    return p.life > 0.00 || d > 0.0;
                });
               
                if (particles.length < this.particle_amount + tempAdditionalAmount && !this.particlesPaused){

                   let nn = this.particle_amount + tempAdditionalAmount - particles.length;

                   for (let n = 0; n < nn; n++){
                       let ran = Math.random();
                       particles.push({
                           x: this.group.position.x,
                           y: this.group.position.y,
                           position: { 
                               x: this.THREE.Math.randFloatSpread(this.group._width) + this.group.position.x, //(ran * 2 - 1) * (this.group._width/2) + this.group.position.x, //- (this.textStyle.size * 0.09),
                               y: this.THREE.Math.randFloatSpread(this.group._height) + this.group.position.y,//(ran * 2 - 1) * 10 + this.group.position.y,// + (this.textStyle.size * 0.09),
                               z: -(ran * 1000),
                           },
                           life: Math.abs(Math.sin(cosOffset++)) * (n % 2 == 0?3: 5),
                           colour: { r:0.5, g: 0.5, b: 0.9, a: 0 },
                           alphaInc: ran * 0.03 + 0.01, // n % 2 ? 0.01: 0.02,
                           size: Math.abs(Math.sin(cosOffset++)) * ((this.textStyle.size/window.innerHeight) * 4), //Math.sin(this.textStyle.size), //0.3,
                           angle: 0,
                       });
                  }
                }

                const positionArray = [];
                const sizes = [];
                const colours = [];
                const angles = [];
                const blends = [];

                for (let p of particles){
                    p.life -= 0.05;

                    positionArray.push(p.position.x, p.position.y, p.position.z);

                    sizes.push(p.size *= 1.001); // Make particle grow.

                    colours.push(p.colour.r, p.colour.g, p.colour.b, Math.sin(p.colour.a += p.alphaInc) * 0.07);

                    angles.push(p.angle -= 0.003); // Make particle spin.

                    blends.push(1.0);// Bigger number == darker.
                }

                this._geometry.setAttribute('position', new THREE.Float32BufferAttribute(positionArray, 3));
                this._geometry.setAttribute('size',     new THREE.Float32BufferAttribute(sizes, 1));
                this._geometry.setAttribute('colour',   new THREE.Float32BufferAttribute(colours, 4));
                this._geometry.setAttribute('angle',    new THREE.Float32BufferAttribute(angles, 1));
                this._geometry.setAttribute('blend',    new THREE.Float32BufferAttribute(blends, 1));

                this._geometry.attributes.position.needsUpdate = true;
                this._geometry.attributes.size.needsUpdate     = true;
                this._geometry.attributes.colour.needsUpdate   = true;
                this._geometry.attributes.angle.needsUpdate    = true;
                this._geometry.attributes.blend.needsUpdate    = true;
 
                tempAdditionalAmount = 0;
         };
    }


    animate() {
        requestAnimationFrame( this.animate.bind(this) );
        this.uniformData.u_time.value += this.clock.getDelta();
        this.render();
    }

    render() {
        this.group.rotation.y += ( this.targetRotation - this.group.rotation.y ) * 0.05;
        this.group.rotation.x += ( this.targetRotationX - this.group.rotation.x ) * 0.05;

        this.raycaster.setFromCamera(this.pointer, this.camera );

        //const intersects = this.raycaster.intersectObjects( this.scene.children[4].children, false );
        const intersects = this.raycaster.intersectObjects( this.group.children, false );

        if ( intersects.length > 0 ) {
            if ( this.INTERSECTED != intersects[ 0 ].object ) {
                this.INTERSECTED = intersects[ 0 ].object;
                this.INTERSECTED.material[0].color.r = 0;   
                this.group.mouseOver = true; 
            }
        } else {
            if ( this.INTERSECTED ){
                this.INTERSECTED.material[0].color.r = 1;   
                this.group.mouseOver = false; 
            }
            this.INTERSECTED = null;
        }

        this.renderer.autoClear = true;

        this.renderer.render( this.scene, this.camera );

        if (this.correctGuessAnimation){

            this.renderer.autoClear = false;

            this.correctGuessAnimation.update();

            this.renderer.render( this.correctGuessAnimation.scene, this.correctGuessAnimation.camera );
        }

        this.backGroundPulsing();
    }

    resetScene(){

        this.makeCamera();

        this.renderer.setSize(window.innerWidth, window.innerHeight);

        this.group.position.x = 0;
        this.group.position.y = 0;
        
        this.spotLight.target.position.x = this.group.position.x;
        this.spotLight.target.position.y = this.group.position.y;
       // this.spotLight.target.position.z = this.group.position.z;

        this.spotLight.position.x = this.group.position.x;
        this.spotLight.position.y = this.group.position.y;
        
        if (this.dockingState === "counter is docked"){
            this.dockingStation.removeStation();
            this.dockingStation.createStation();
            this.dockingStation.dockCounter();
        }
    }

    easeOutCubic(x) {
        return 1 - Math.pow(1 - x, 3);
    }

}
// end class

unsafeWindow.make3DCounter = make3DCounter;


class correctGuessAnimation {
     constructor(font){
      
      this.init(font);
     // this.animate();

     }

    init (font){
        this.THREE = unsafeWindow.THREE;
        this.THREE.Cache.enabled = true;
        this.FontLoader = unsafeWindow.THREE.FontLoader;
        this.TextGeometry = unsafeWindow.THREE.TextGeometry;

        this.text = ''; 
        this.score = app.getCurStreak().num + ''; 
        
        this.num = this.score - 18 < 0? 0 : this.score - 18;

        this.textStyle = {
            size : window.innerHeight/4,
            height: null,
            curveSegments: 4,
            bevelThickness : 2,
            bevelSize : 1.5,
            bevelEnabled : true,
            font : font,
            fontName : 'helvetiker',//'droid/droid_sans';//'optimer', // helvetiker, optimer, gentilis, droid sans, droid serif
            fontWeight : 'bold', // normal bold
        };

        this.container = document.createElement( 'div' );
        this.container.id = 'flyingText';        
        this.container.style.position = 'absolute';
        this.container.style.top = '0px';
        this.container.style.left = '0px';
        this.container.style.zIndex = '9999999';
        this.container.style.userSelect = 'none';
        this.container.style.pointerEvents = 'none';

    //    document.body.appendChild(this.container);

        this.renderer = new this.THREE.WebGLRenderer( { antialias: true, alpha: true, } );
        this.renderer.setPixelRatio( unsafeWindow.devicePixelRatio );
        let w = window.innerWidth;
        let h = window.innerHeight;
        this.renderer.setSize(w , h );

        this.makeCamera();

        this.scene = new this.THREE.Scene();
        this.scene.background = null; //new THREE.Color( 0x000000 );

        this.dirLight = new this.THREE.DirectionalLight( 0xffffff, 1 );
        this.dirLight.position.set( 0, 350, 0 ); //.normalize();
        this.scene.add( this.dirLight );

        this.spotLight = new this.THREE.SpotLight( 0xffffff, 1.0, 0.0, Math.PI/2, 1.0, 1 );
        this.spotLight.position.set( 0, -120, 1000);
        this.spotLight.color.setRGB(0.423, 0.725, 0.157);

        this.scene.add( this.spotLight );
        this.scene.add( this.spotLight.target);

        this.materials = [
            new this.THREE.MeshPhongMaterial( { color: 0xffffff, flatShading: true } ), // front
            new this.THREE.MeshPhongMaterial( { color: 0xffffff ,} ) // side
        ];

        this.group = new this.THREE.Group();
        this.group.position.x = 0;
        this.group.position.y = 0;

        this.scene.add( this.group );
    }


    createText1() {

        this.textGeo = new this.TextGeometry( this.text, {
            font: this.textStyle.font,
            size: this.textStyle.size ,
            height: this.textStyle.size < 20? this.textStyle.size * 0.07: this.textStyle.size*0.15,
            curveSegments: this.textStyle.curveSegments * 4,
            bevelThickness: this.textStyle.bevelThickness,
            bevelSize: 15 * (this.textStyle.size / window.innerHeight), //this.bevelSize * (window.innerHeighth),
            bevelEnabled: this.textStyle.bevelEnabled
        } );

        this.textGeo.computeBoundingBox();

        let centerOffsetX = - 0.5 * ( this.textGeo.boundingBox.max.x - this.textGeo.boundingBox.min.x );
        let centerOffsetY = - 0.5 * ( this.textGeo.boundingBox.max.y - this.textGeo.boundingBox.min.y );

        this.textMesh = new this.THREE.Mesh( this.textGeo, this.materials );

   //     let n = parseInt(this.text);

   //     if (n  === 1){
   //         // The number 1 has to be adjusted in the x direction slightly.
   //         centerOffsetX *= 2.4; 
   //     } else if (n >= 10 && n <= 19){
   //         // The teens have to be adjusted in the x direction slightly.
   //         centerOffsetX *= 1.25; 
   //     } else if (n >= 100 && n < 200){
   //         // The one hundreds have to be adjusted in the x direction slightly.
   //         centerOffsetX -= 10; 
   //     }

        this.textMesh._offSetX = centerOffsetX;
        this.textMesh._offSetY = centerOffsetY;

        this.textMesh.position.x = centerOffsetX;
        this.textMesh.position.y = centerOffsetY;
        this.textMesh.position.z = 0;//-(this.textStyle.size * 0.2 * 0.5);

        this.textMesh.rotation.x = 0;
        this.textMesh.rotation.y = 0;//Math.PI * 2;

        this.group.add( this.textMesh );

        this.spotLight.target.position.x = this.group.position.x;
        this.spotLight.target.position.y = this.group.position.y;
        this.spotLight.target.position.z = this.group.position.z;
         
        this.spotLight.position.x = this.group.position.x;
        this.spotLight.position.y = this.group.position.y;
        this.spotLight.position.z = this.textStyle.size * 1.5;
    }


    makeCamera(){
        this.camera = new this.THREE.PerspectiveCamera( 20, window.innerWidth / window.innerHeight, 1, 6500 );

        this.camera.position.set(0, 0, 2000);

        this.cameraTarget = new this.THREE.Vector3( 0, 0, 0 );
    }

    refreshText(textSize) {
        this.group.remove( this.textMesh );
        this.createText1(textSize);
    }
    
  //  unload(){
  //     this.container.parentElement.removeChild(this.container);

  //  }

    update() {
           
        this.camera.position.z -= 240;

        if (this.camera.position.z < 600){

            this.camera.position.z = 2000;

            this.num++;

            if (this.num > this.score) {
                this.unload();
                return;
            } else {
                this.text = `${this.num}`;
                this.refreshText();
            }
        }
        
        // requestAnimationFrame( this.animate.bind(this) );

        this.renderer.render( this.scene, this.camera );
    }
}


unsafeWindow.correctGuessAnimation = correctGuessAnimation;


//
//
//
// Highlightcountries.js
//
//
//

var callstrk = null;
var olist = [];
var _map = null;
//var showPlayer = localStorage["streakShowPlayer"] == "true" ? true : false;
var usw = unsafeWindow;

let highlightManager = {
    timer: null,
    countries: {},
    timers: {},
    setTimer: function (polygon) {
        clearTimeout(this.timers[polygon.country]);
        if (polygon.map || polygon.prev) {
            return;
        }
        this.timers[polygon.country] = setTimeout(
            function (_this, polygon) {
                polygon.setMap(polygon._map);
                _this.setTimer(polygon);
            },
            1,
            this,
            polygon
        );
    },
    add: async function (polygon, msg) {
        //        console.log(polygon.map);
        polygon.prev = null;
        polygon.next = this.countries[polygon.country] || null;
        polygon._msg = msg;

        if (polygon.next) {
            //console.log(polygon === polygon.next);
            polygon.next.prev = polygon;
            polygon.next.setMap(null);
        }
        this.countries[polygon.country] = polygon;
        //polygon.setMap(polygon._map);

        this.setTimer(polygon);

      //  console.log("add", polygon, polygon.country, polygon.fillColor, highlightManager);
    },
    remove: function (polygon) {
        if (!polygon) return;
        polygon.setMap(null);
        if (this.countries[polygon.country] === polygon) {
            if (polygon.next && polygon.next.prev) {
                polygon.next.prev = null;
                polygon.next.setMap(polygon.next._map);
            }
            this.countries[polygon.country] = polygon.next;
            polygon.next = null;
            return;
        }
        if (polygon.next) polygon.next.prev = polygon.prev;
        if (polygon.prev) polygon.prev.next = polygon.next;
        polygon.prev = null;
        polygon.next = null;
    },
    removeAll: function (msg) {
        let keys = Object.keys(this.countries);
        for (let n = 0; n < keys.length; n++) {
            let p = this.countries[keys[n]];
            for (; p; ) {
                let t = p.next;
                if (msg && p._msg !== msg) {
                    p = t;
                    continue;
                }
                p.setMap(null);
                p.next = null;
                p.prev = null;
                p = t;
            }
            delete this.countries[keys[n]];
        }
    },
};

unsafeWindow.highlightManager = highlightManager;

unsafeWindow._evt.on('openRightClickMenu', function(createBtn){
    console.log('righ click');
    let state = getHighState();
    let txt = '';
    let btn = null;
    btn = createBtn('On click country highlighting', state === 'on'? true: false);
    btn.container.addEventListener('click', function(evt){
        if (evt.target != btn.checkbox) return;
        unsafeWindow._onOff();
    });
    
    state = getMouseOverHighState() === 'on'? 'on': 'off';
    let btn1 = createBtn('Mouse Over country highlighting', state === 'on'? true: false);
    btn1.checkbox.addEventListener('change', function(evt){
        if (getMouseOverHighState() === 'off'){
            setMouseOverHighState('on');
            setMouseOverCountryHighlight();
        } else {
            if (unsafeWindow.google){
                google.maps.event.removeListener(listener);
            }
            listener = null;
            setMouseOverHighState('off');
            highlightManager.removeAll('mouseover');
        }
    }); 
});

unsafeWindow._evt.on('streakStateChanged', function(state){

    setHighState(state);

    if (state === "off") {
        unsafeWindow._off();
	if (unsafeWindow.google){
	    google.maps.event.removeListener(listener);
	}
        listener = null;
    } else {
        unsafeWindow._on();
        if (listener) return;
        setMouseOverCountryHighlight();
    }
});

var lastCountry = null;
var lastTime = Date.now();
var polyList = [];
var listener = null;

var _onload = unsafeWindow._evt.on("onGoogleLoaded", function () {
    if (getMouseOverHighState() == 'on')
        setMouseOverCountryHighlight();
});

function setMouseOverCountryHighlight(){
    if (getMouseOverHighState() == 'off' || listener) return;
   
    let p = setInterval(function(){
        if (!unsafeWindow.__map) return;

        clearInterval(p);

        listener = unsafeWindow.google.maps.event.addListener(unsafeWindow.__map, 'mousemove', (evt) => {
            if (Date.now() - lastTime < 50) return;

            lastTime = Date.now();

            let country = unsafeWindow.sgs.findIt(evt.latLng.lat(), evt.latLng.lng());

            if (country == lastCountry) return;

            lastCountry = country;

            removeOldPolys();

            if (!country) return;

            let polygon = makePoly(country, "#00ff00",unsafeWindow.__map);

            polyList.push(polygon);

            highlightManager.add(polygon, 'mouseover');
        });
    }, 1000);
}

function removeOldPolys(){
    for (let n= 0; n < polyList.length; n++){
        highlightManager.remove(polyList[n]);
    }
}

unsafeWindow._evt.on('endOfRoundScreen', function(state){
    // Fix stuck coutry polygons
    polyList.forEach(function(p){
        highlightManager.remove(p);
    });

    polyList = [];
});

unsafeWindow._onOff = function () {
    let state = getHighState();

    if (state === "off") {
        setHighState('on');
        unsafeWindow._on();
    } else {
        setHighState('off');
        unsafeWindow._off();
    }
};

unsafeWindow._on = function () {
    for (let n = 0; n < currentOverlaysOnScreen.length; n++) {
        currentOverlaysOnScreen[n].setPosition(currentOverlaysOnScreen[n].position);
    }
};

unsafeWindow._off = function (msg) {
    highlightManager.removeAll(msg);

    for (let n = 0; n < currentOverlaysOnScreen.length; n++) {
        if (currentOverlaysOnScreen[n].div.firstChild && currentOverlaysOnScreen[n].div.firstChild.firstChild){
            currentOverlaysOnScreen[n].div.firstChild.firstChild.style.border = "";
        }

        currentOverlaysOnScreen[n].div.style.display = "";
        currentOverlaysOnScreen[n].div.style.visibility = "";
    }
};

unsafeWindow._toggleShowHidePlayer = function () {
    let state = localStorage.getItem("streakShowPlayer") || 'false';
    app.showPlayer = state == "true" ? false : true;

    localStorage.setItem("streakShowPlayer", app.showPlayer);

    state = localStorage.getItem("streakState");
    if (!state || state === "on") {
        highlightManager.removeAll();
        for (let n = 0; n < currentOverlaysOnScreen.length; n++) {
            currentOverlaysOnScreen[n].div.style.display = "";
            currentOverlaysOnScreen[n].setPosition(currentOverlaysOnScreen[n].position);
        }
    }
};

function getHighState(){
    let state = localStorage.getItem("highLightCountriesState");
    state = !state ? "on" : state;
    return state;
}

function setHighState(text){
    localStorage.setItem("highLightCountriesState", text);
}

function getMouseOverHighState(){
    let state = localStorage.getItem("mouseOverHighLightState");
    state = !state ? "on" : state;
    return state;
}

function setMouseOverHighState(text){
    localStorage.setItem("mouseOverHighLightState", text);
}

let _playingGameImmediate = on('playingGameImmediate', async function(args){
    if (getHighState() === 'off') return;

    let _this = args[0]; 
    let country = false;

    if (!_this.from) {
        country = await app.reverseLookupCountryName(args[1].lat(), args[1].lng(), true); //usw.testObj.findIt(args[1].lat(), args[1].lng());
    }

    _this._country = country;
    _this._gameCountry = false;

    if (country !== false) {
        _this._gameCountry = usw.sgs.admin_country_index[_this._country.country.country_code.toUpperCase()];
    }

    _this.isCorrect = /correct/.test(_this.div.innerHTML);

    if (!app.showPlayer && !_this.isCorrect) {
        _this.div.style.display = "none";
    } 

    if (country === false) {
        if (_this.polygon) {
            highlightManager.remove(_this.polygon);
            _this.polygon = null;
        }
        return;
    }

    let polygon = makePoly(_this._gameCountry, "#00ff00", _this.map);

    if (_this.polygon === undefined && !_this.isCorrect) {
        // Assuming player is currently playing. 
    } else {
        if (currentOverlaysOnScreen.length === 1) {
            polygon.fillColor = "#0000ff";
        }
        if (_this.polygon) {
            // If player is playing remove old country from map.
            highlightManager.remove(_this.polygon);
        }

        highlightManager.add(polygon);
    }

    _this.polygon = polygon;

    setTimeout(() => {
        if (!_this.isCorrect && currentOverlaysOnScreen.length > 1) {
            _this.polygon = undefined;
        }
    }, 50);

});

let _playingGame = on('playingGame', function(){

    if (getHighState() === 'off') return;
    if (currentOverlaysOnScreen[0] && currentOverlaysOnScreen[0].polygon && !currentOverlaysOnScreen[0].polygon.map){
        // currentOverlaysOnScreen[0].polygon._map = currentOverlaysOnScreen[0].map;
        currentOverlaysOnScreen[0].polygon.fillColor = "#0000ff";
        highlightManager.add(currentOverlaysOnScreen[0].polygon);
    }

});

//let _currentOverlaysOnScreenFilled = on('arrFilled', function(arr){
//    
//    setTimeout( function _t_() {
//	if (getHighState() === 'off') return;
//
//	for (let n = 0; n < arr.length; n++) {
//	    if (!arr[n].from || !arr[n]._originalSetPosition) continue;
//
//	    let to = [arr[n].to.lat(), arr[n].to.lng()];
//	    let from = [arr[n].from.lat(), arr[n].from.lng()];
//	    let r = []; // TODO: what does r mean?
//
//	    for (let m = 0; m < arr.length; m++) {
//		if (arr[m].from || !arr[m]._originalSetPosition) continue;
//
//	//	if (arr[m]._gameCountry === undefined) return; // Can't do anything right now.
//
//		if (arr[m].div){
//		    arr[m].div.firstChild.firstChild.style.border = "2px solid green";
//		}
//
//		if (arr[m].position.lat() === to[0] && arr[m].position.lng() === to[1]) {
//		    r.push(arr[m]);
//		    continue;
//		}
//
//		if (arr[m].position.lat() === from[0] && arr[m].position.lng() === from[1]) {
//		    r.push(arr[m]);
//		}
//	    }
//
//	    if (r.length == 2 && r[0]._gameCountry !== r[1]._gameCountry) {
//		// Player choose wrong country.
//		let isCorrect = r[0].isCorrect ? r[0] : r[1];
//
//		if (isCorrect.div){
//		    setTimeout(function(_1, _2){
//			// Have to wait to change the border property.
//			_1.div.firstChild.firstChild.style.border = "2px solid red";
//			_2.div.firstChild.firstChild.style.border = "2px solid red";
//		    }, 50, r[0], r[1]);
//		}
//
//		if (!isCorrect._country) continue;
//
//		if (isCorrect.polygon) highlightManager.remove(isCorrect.polygon);
//
//		isCorrect.polygon.fillColor = "#ee0000"; // TODO: fix this.
//
//		highlightManager.add(isCorrect.polygon);
//	    }
//	}
//	console.log(arr);
//    }, 1000);
//});

function makeMarker(country, color, map, opacity){
    let flag = unsafeWindow.countryFlags[country.toUpperCase()];
    flag = flag? flag:  unsafeWindow.countryFlags['UNKNOWN'];

    let image ={
        url: 'data:image/svg+xml;charset=utf-8,' + encodeURIComponent(flag),
        origin: new google.maps.Point(0, 0),
        anchor: new google.maps.Point(21/2, 15/2), // Most SVG Flags are 21 width and 15 height.
    };

    let pos = unsafeWindow.countryCenteroids[country.toUpperCase()];

    const marker = new google.maps.Marker({
        position: {lat: pos.y, lng: pos.x},
        icon: image,
        clickable: false,
    });
    unsafeWindow.abcd = marker;
    let _setMap = marker.setMap;

    marker.setMap = function(map){
        if (map !== null){
            _setMap.call(this, map);
            return;
        }
        let icons = document.querySelectorAll("div:has( > img[src*='tk'])");
        if (icons) icons.forEach(icon => icon.classList.add('shrinkOut'));
        setTimeout(() => _setMap.call(this, map), 1000);
    }
unsafeWindow.mmmm = marker;
    return marker;

}

function makePoly(country, color, map, opacity) {
    //return makeMarker(country, color, map, opacity);
    let coords = [];
    let n = 0;
    let ca = usw.sgs.compiledPolygons;
	
   // let ca = usw.sgs.ggPolygons;

    country = (typeof country === 'string')? country.toLowerCase(): country;

    if (!ca[country]) {
        ca[country] = [[[]]];
    }

    for (; n < /*2*/ ca[country].length; n++) {
        coords.push([]);
        ca[country][n].forEach((a, i) => {
            coords[coords.length - 1].push({
                lat: a[1],
                lng: a[0],
            });
        });
    }

    let p = new google.maps.Polygon({
        paths: coords,
        strokeColor:  "#ffffff",
        strokeOpacity: 0.8,
        strokeWeight: 0.35,
        fillColor: usw.sgs.customBorders[country] ? 'blue' : (color || "#00ff00"),
        fillOpacity: opacity || 0.25,
        clickable: false,
    });

    p._map = map;

    p.country = country;

    p.oldSetMap = p.__proto__.__proto__.setMap.bind(p);

    p.setMap = function (_map_, fromZoomEvt) {
        if (_map_ == null && !fromZoomEvt) {
            google.maps.event.removeListener(this._zoomChangeEvent);
        } else if (_map_ !== null && !this._zoomChangeEvent) {
            this._zoomChangeEvent = _map_.addListener("zoom_changed", zoomchange);
        }

        if (_map_ !== null && app.showPlayer && _map_.zoom > 10) {
            _map_ = null;
        }

        this.oldSetMap.call(this, _map_);
    };

    function zoomchange(evt) {
     //   if (p.map !== null && app.showPlayer && p._map && p._map.zoom > 10) {
     //       p.oldSetMap(null);
     //   } else if (p.map === null && app.showPlayer && p._map && p._map.zoom <= 10) {
     //       p.oldSetMap(p._map);
     //   }
    }

    return p;
}
unsafeWindow.makePoly = makePoly;

let _overlaysRemovedOnce = false;
let _overlaysRemoved = on('overlaysRemoved', function () {
    if (_overlaysRemovedOnce) return;
//currentOverlaysOnScreen
    setTimeout(() => (_overlaysRemovedOnce = false), 500);

    _overlaysRemovedOnce = true;

    highlightManager.removeAll();

    if (olist.length) {
        for (let n = 0; n < olist.length; n++) {
            olist[n].setMap(null);
        }
        olist = [];
    }
});

unsafeWindow._evt.on('showLocationsOnWrongAnswer', function(list){
    olist = list;
});

// ==UserScript==
// @name         Country Streak Counter (Automated) version 5.8
// @version      5.8
// @include      /^(https?)?(\:)?(\/\/)?([^\/]*\.)?geoguessr\.com($|\/.*)/
// @description  Adds a country streak counter to the GeoGuessr website
// @grant        GM_addStyle
// @run-at       document-start
// ==/UserScript==

var /*has to be var not let*/ usw = unsafeWindow;

let app = {};
usw.app = app;

app.openMapOnWrongAnswer = true; // Change this on commit to false and delete this comment.

app.showPlayer = localStorage["streakShowPlayer"] == "true" ? true : false;
app.wrongAnswerlist = [];
app.lastGuess = [0, 0];
app.lastClickPos = {lat: 0, lng: 0};
app.sd = JSON.parse(sessionStorage.getItem("streakData")) || { s: [[]] };

app.baseColor = "#00ee00";
app.wrongAnswerColor = "#ee0000";

app.onlyCountCorrectAnswers = false;

app.counters = [make3DCounter];
app.countersx = localStorage["streakCounterIDX"] || 1;
app.curCounter = null;

app.init = function () {
    if (sessionStorage.getItem("streakData") == null) {
        sessionStorage.setItem("streakData", JSON.stringify(app.sd));
    }

   // app.sd = JSON.parse(sessionStorage.getItem("streakData"));

    app.appendCSS();
    app.makeEvents();
};

app.getCurStreak = function () {
    let ret = { num: 0, streakNum: 0 };

    ret.num = app.sd.s[app.sd.s.length - 1].length;
    ret.streakNum = app.sd.s.length - 1;

    return ret;
};

app.getMaxStreak = function () {
    let ret = { max: 0, streakNum: 0 };

    for (let n = 0; n < app.sd.s.length; n++) {
        let len = app.sd.s[n].length;

        if (len > 0 && app.sd.s[n][len - 1].guess.country == app.sd.s[n][len - 1].location.country) {
            // Game hasn't ended yet of player zeroed out the streak and started a new one.
            if (len > ret.max) {
                ret.max = len;
                ret.streakNum = n;
            }
            continue;
        }

        if (len - 1 >= ret.max) {
            // Game probably ended.
            ret.max = len - 1;
            ret.streakNum = n;
        }

        if (n === app.sd.s.length - 1 && len >= ret.max) {
            // The player may be continueing the streak even with a wrong answer.
            ret.max = len;
            ret.streakNum = n;
        }
    }

    return ret;
};

app.getPrevStreak = function () {
    let ret = { num: 0, streakNum: -1 };

    if (app.sd.s.length > 1) {
        let t = app.sd.s[app.sd.s.length - 2];
        if (t[t.length - 1].guess.country == t[t.length - 1].location.country) {
            // The person may have ended the round early.
            ret.num = t.length;
        } else {
            ret.num = t.length - 1;
        }
        ret.streakNum = app.sd.s.length - 2;
    }

    return ret;
};

app.getCorrectAnswersOnly = function () {
    let num = 0;
    let streak = app.sd.s[app.sd.s.length - 1];

    for (n = 0; n < streak.length; n++) {
        let t = streak[n];
        if (t.guess.country === t.location.country) {
            num += 1;
        }
    }

    return num;
};

app.createRightClickMenu = function (x, y) {
    let that = this;

    if (document.querySelector('.RightClickMenu_cont')){
        let el = document.querySelector('.RightClickMenu_cont');
        el.parentElement.removeChild(el);
        return;
    }

    console.log("createRightClickMenu");
    let idNum = 0;
    let stateShowPlayer = localStorage.getItem("streakShowPlayer") || "false";

    let cont = document.createElement("div");
    cont.className = "RightClickMenu_cont";
    cont.style.cssText = "position: absolute; max-height: 50vh; overflow-y: scroll;box-shadow: 0px 0px 0px 1px rgb(128 128 128 / 50%);";
    cont.style.left = x + 10 + "px";
    cont.style.top = y - 10 + "px";

    let closeBtn = document.createElement('div');
    closeBtn.innerText = 'x';
    closeBtn.style.cssText = 'position: absolute; right: 0px; top : 0px;height: 20px; width: 20px; background: white;';
    closeBtn.addEventListener('click', function(e){
        cont.parentElement.removeChild(cont);
    });

    cont.appendChild(closeBtn);
 
    let ul = document.createElement("ul");
    ul.className = "RightClickMenu_ul";

    function createBtn(html, checkboxState) {
        let li = document.createElement("li");
        let checkbox = document.createElement('input');

        if (checkboxState != undefined){ 
            checkbox.type = "checkbox";
            checkbox.name = "name";
            // checkbox.value = checkboxState;
            checkbox.checked = checkboxState;  
            checkbox.id = 'l'+idNum + 'h';

            li.appendChild(checkbox);
        }

        let label = document.createElement('label');
        label.htmlFor = 'l' + idNum++ + 'h';
        label.innerHTML = html;
        label.style.marginLeft = '10px';

        li.appendChild(label);

        li.className = "RightClickMenu_li";

        ul.appendChild(li);

        return {
           container: li,
           checkbox: checkbox,
           body: label
        }; 
    }
    
    let continueGame = createBtn("Continue last streak");

    continueGame.container.addEventListener("click", function () {
        let streakArray = app.sd.s;

        if (streakArray.length === 0) return;

        let ans = confirm("\nYou are about to delete the current streak?\n\nOK: Yes\nCancel: No");
             
        if (!ans) {
            return;
        }

        if (streakArray.length === 1){

            ans = confirm("\nOnly one streak saved. Do you want to delete the current streak, including this round?\n\nOK: Yes\nCancel: No");
             
            if (ans) {
                streakArray.pop();
            }

        } else {

            streakArray.pop(); // Remove current game.

            let len = streakArray[streakArray.length - 1].length;
            let lastCountry = streakArray[streakArray.length - 1][len-1].location.country.country_name;

            ans = confirm(`\nDo you want to keep the last round in the streak? ${lastCountry}?\n\nOK: Yes\nCancel: No`);

            if (!ans) {
                app.sd.s[app.sd.s.length - 1].pop();
            }
        }
        
        sessionStorage.setItem("streakData", JSON.stringify(app.sd));

        usw._evt.fire("keep streak going", true);
    });

    let plusOne = createBtn("Increase streak by one");
    let plusMinusOneCont = document.createElement('div');
    plusMinusOneCont.style.display = "inline-block";

    let plusMinusOne_plus = document.createElement('span');
        plusMinusOne_plus.innerText = "+1";
        plusMinusOne_plus.style.cssText = "padding: 5px; border: 1px solid grey;margin:0px 1em 0px 1em; border-radius: 5px;cursor: pointer; background-color: white;";
    
    let plusMinusOne_minus = document.createElement('span');
        plusMinusOne_minus.innerText = "-1";
        plusMinusOne_minus.style.cssText = "padding: 5px; border: 1px solid grey; border-radius: 5px;cursor: pointer; background-color: white;";

    plusMinusOneCont.appendChild(plusMinusOne_plus);
    plusMinusOneCont.appendChild(plusMinusOne_minus);
    plusOne.body.innerHTML = '';
    plusOne.body.appendChild(plusMinusOneCont);

    plusMinusOne_plus.addEventListener("click", function () {
        let streakArray = app.sd.s;

        let res = { location: { lng: 0, lat: -82 , country: { country_name: "Plus 1!", country_code: "zz", admin_country_name: "Plus 1!", admin_country_code: "UNKNOWN" }},
                    guess: { lng: 0, lat: -82 , country: { country_name: "Plus 1!", country_code: "zz", admin_country_name: "Plus 1!", admin_country_code: "UNKNOWN" }}};

         streakArray[streakArray.length - 1].push(res); 

         sessionStorage.setItem("streakData", JSON.stringify(app.sd));

         usw._evt.fire("update streak", {
                onlyCountCorrectAnswers: app.onlyCountCorrectAnswers,
                isWrongAnswer: false,
         });
    });

  //  let minusOne = createBtn("Decrease streak by one");

    plusMinusOne_minus.addEventListener("click", function () {
        let streakArray = app.sd.s;

         streakArray[streakArray.length - 1].pop(); 

         sessionStorage.setItem("streakData", JSON.stringify(app.sd));

         usw._evt.fire("update streak", {
                onlyCountCorrectAnswers: app.onlyCountCorrectAnswers,
                isWrongAnswer: false,
         });
    });

    let streakState = app.getStreakState(); //localStorage.getItem('streakState') || 'on';
    let li1 = createBtn('Show streak counter', streakState == "on" ? true: false);
    li1.checkbox.addEventListener("change", function (evt) {
        // if (evt.target != li1.checkbox) return;
        let state = localStorage["streakState"];

        if (state === "on") {
            state = "off";
        } else {
            state = "on";
        }

        localStorage["streakState"] = state;

        usw._evt.fire("streakStateChanged", state);

        if (state == "on" && !app.curCounter){
            app._addCounterOnRefresh();
        } 
    });

    let li3 = createBtn("Only Count Correct Answers", app.onlyCountCorrectAnswers);
    li3.checkbox.addEventListener("click", function () {
        //  if (evt.target != li3.checkbox) return;
        // do something here.
        if (app.onlyCountCorrectAnswers === true){
            app.onlyCountCorrectAnswers = false ;
        } else {
            app.onlyCountCorrectAnswers = true;
        }

        usw._evt.fire("onlyCountCorrectAnswers");
    });

    cont.appendChild(ul);

    usw._evt.fire("openRightClickMenu", createBtn);

    document.body.appendChild(cont);

    setTimeout(function () {
        let bc = cont.getBoundingClientRect();
        let width = usw.innerWidth;
        if (bc.right >= (width-30)) {
        cont.style.left = '';
        cont.style.right = 30+'px';
        }
    }, 50);

    return cont;
};

app._addCounterOnRefresh = function () {
    //  let _3d = new make3DCounter();
    //let norm = new normalCounter();

    app.curCounter = new app.counters[app.countersx % app.counters.length]();

    return;
};

app.clearList = function (list) {
    for (let n = 0; n < list.length; n++) {
        list[n].setMap(null);
        
    }
    list.length = 0;
};

app.getStreakState = function () {
    let state = localStorage["streakState"];
    state = !state ? "on" : state;
    return state;
};

app.callstreak = async function (arr) {
    let map = arr[0].map;

    let locationInfo = await app.getLocationInfo(arr);

    if (locationInfo.error){
        alert('There was an error finding locations.');
        return false;
    }

    let checkIt = await app.isCorrectGuess(locationInfo); 
    let isWrongAnswer = false;

    app.sd.s[app.sd.s.length - 1].push(locationInfo);

    if (checkIt === true){
        // Guess was correct.

        if (!app.showPlayer) {
            // Override the normal geuguessr zoom if the player isn't shown.

            let coord = locationInfo.location.coord;
            let n = 7;
            var bounds = new google.maps.LatLngBounds();
            bounds.extend(/*sw*/ { lat: coord.lat - n, lng: coord.lng - n });
            bounds.extend(/*ne*/ { lat: coord.lat + n, lng: coord.lat + n });
            map.fitBounds(bounds, true, true);
            map.setCenter(coord);
        }

    } else if (!app.onlyCountCorrectAnswers){
        // Guess was wrong.

        isWrongAnswer = true;

        app.sd.s.push([]);

        app.addKeepStreakGoingMsg();

        if (app.openMapOnWrongAnswer) {
            app.clearList(app.wrongAnswerlist);

            app._createMap(app.sd.s[app.sd.s.length - 2], map, app.wrongAnswerlist);

            usw._evt.fire("showLocationsOnWrongAnswer", app.wrongAnswerlist);

            // Open to full extent on wrong answer
            var bounds = new google.maps.LatLngBounds({ lat: 72.122088, lng: -166.088906 }, { lat: -55.414493, lng: 153.429345 });
            map.fitBounds(bounds, true, false);
        }
    }

    sessionStorage.setItem("streakData", JSON.stringify(app.sd));

    usw._evt.fire("update streak", {
        arrOfRoundLocations: arr,
        onlyCountCorrectAnswers: app.onlyCountCorrectAnswers,
        isWrongAnswer: isWrongAnswer,
    });

    return;
};

app.getLocationInfo = async function (a) {
    let res = {
        guess: { coord: {}, code: "Error", country: "Error" },
        location: { coord: {}, code: "Error", country: "Error" },
    };
    if (!app?.lasClickPos?.lat && !app?.lastClickPos?.lng){
        return { error: "Last click variable invalid"};
    }

    let guessedCountry = await app.reverseLookupCountryName(app.lastClickPos.lat, app.lastClickPos.lng);

    res.guess = guessedCountry;

    app.lastClickPos = {lat: 0, lng: 0};

    for (let n = 0; n < a.length; n++){
        let b = a[n];

        if (b.from) {
            //b.from is the correct location.
            //console.log("to lat:", b.to.lat(),"lng:", b.to.lng());
            //console.log("from lat:", b.from.lat(),"lng:", b.from.lng());
            continue;
        }

        if (!b._country) {
            b._country = await app.reverseLookupCountryName(b.position.lat(), b.position.lng());
        }

        if (/correct/.test(b.div.innerHTML)) {
            res.location = b._country;
        }
    }

    return res;
};

app.isCorrectGuess = async function (obj) {
    if (obj.guess.error || obj.location.error){
        alert('There was an error, could not locate one or more countries.');
        return false;
    }

    let guessCoord = [obj.guess.lat, obj.guess.lng];
    let locationCoord = [obj.location.lat, obj.location.lng];

    let locationCountry = obj.location.country.admin_country_name;
    let locationCountryCode = obj.location.country.admin_country_code;

    let guessCountry = obj.guess.country.admin_country_name;
    let guessCountryCode = obj.guess.country.admin_country_code;

    if ((guessCountryCode !== locationCountryCode || (guessCountry === "Error" && locationCountry === "Error"))) {
        // Player didn't guess correct country.
        return false;
    }

    return true;
};

app.reverseLookupCountryName = async function(lat, lng){

    // First try built in reverse lookup "server".
    //let country = usw.testObj.findIt(lat, lng);
    let country = usw.sgs.reverse({lat,lng});

    return country;
};

app._createMap = function (coords, _map, list) {
    let map = _map || usw.__map;
    let overlay = null;

    if (!map) {
        alert("Can't find the map.");
        return;
    }

    coords.forEach((coord, i) => {
        let location = coord.location;
        let same = coord?.guess?.country?.admin_country_code === location.country.admin_country_code;
        let isLast = i == coords.length - 1;
        let color = !same ? app.wrongAnswerColor : app.baseColor; // TODO: make correct and incorrect color variables.
        let polyColor = !same && isLast ? app.wrongAnswerColor : app.baseColor;

        overlay = new app.createOverlay(location, i + 1, location.country.country_code, color, polyColor, !same && isLast);

        overlay.setMap(map || null);

        setTimeout(
            function (overlay, location, same, coord) {
                if (!overlay.div) return;

                let msg = `
            <div style="color: black; text-align: center;" class="styleFont">
               <div>
               ${location.country.country_name}
               </div>
               ${same ? "" : `You clicked - ${coord.guess.country.country_name}`}
           </div>
        `;

                overlay.div.addEventListener("mouseover", function _mouseover() {
                    // Open infoWindow when mousing over overlay that shows countries.

                    overlay.div.removeEventListener("mouseover", _mouseover);

                    const infowindow = new google.maps.InfoWindow({
                        position: { lat: overlay.y, lng: overlay.x },
                        content: msg,
                        pixelOffset: new google.maps.Size(0, -25),
                    });

                    infowindow.open({
                        map: overlay.map,
                        shouldFocus: false,
                    });

                    overlay.div.addEventListener("mouseout", function _mouseout() {
                        infowindow.close();
                        overlay.div.removeEventListener("mouseout", _mouseout);
                        overlay.div.addEventListener("mouseover", _mouseover);
                    });
                });

                overlay.div.addEventListener("click", function () {
                    let anchor = document.createElement("a");

                    anchor.href = `https://www.google.com/maps?q&layer=c&cbll=${overlay.y},${overlay.x}`;
                    anchor.target = "_blank";
                    anchor.click();
                });
            },
            100,
            overlay,
            location,
            same,
            coord
        );

        if (list) list.push(overlay);
    });
};

app.addKeepStreakGoingMsg = function (msg1) {
    let msgCont = document.createElement("div");
    msgCont.id = "titleBarMsg";
    msgCont.className = "titleBarMsg";
    msgCont.style.cssText =
        "padding-left: 10%; transition: top 1s ease; position: absolute; top: -50px; left: 30%; z-index: 9999; padding: 10px; border-radius: 3px;";
    msgCont.classList.add("boxShadow", "styleFont", "purpleGeoTheme");

    let msg = document.createElement("a");
    msg.innerText = msg1 || "Keep the streak going?";
    msg.href = "javascript:void(0)";
    msg.onclick = "return false;";
    msg.style.cssText = "color: inherit";
    msg.classList.add("styleFont");

    let del = document.createElement("div");
    del.innerText = "x";
    del.style.cssText = "display: inline; padding-left: 10px; cursor: pointer;";
    del.classList.add("styleFont", "blue_closeBtn");
    del.addEventListener("click", removeMsg);

    msgCont.appendChild(msg);
    msgCont.appendChild(del);

    document.body.appendChild(msgCont);

    setTimeout(() => (msgCont.style.top = "0px"), 100);

    msg.addEventListener("click", function () {
        if (app.sd.s[app.sd.s.length - 1].length == 0) {
            app.sd.s.pop();
        } else {
            // The player has already started another round.
            alert("Oops, not sure what happened but the curent streak must go on!");
            removeMsg();
            return;
        }

        let ans = confirm("\nDo you want to keep this round?\n\nOK: Yes\nCancel: No");

        if (!ans) {
            app.sd.s[app.sd.s.length - 1].pop();
        }

        sessionStorage.setItem("streakData", JSON.stringify(app.sd));

        usw._evt.fire("keep streak going", ans);
        //updateStreak();
        removeMsg();
    });

    let timer = setInterval(function (e) {
        let geoBtn = document.querySelectorAll("button");
        if (!geoBtn) return;

        geoBtn.forEach((el) => {
            if (el.__removeMsg) return;
            el.addEventListener("click", removeMsg);
        });
    }, 1000);

    function removeMsg() {
        clearInterval(timer);
        document.querySelectorAll(".titleBarMsg").forEach((msg) => msg.parentElement.removeChild(msg));
        usw._evt.fire("remove keep streak going message");
    }
};

app.makeEvents = function () {
    app._lastClickPos = on('playingGame', function(arr){
        if (app.getStreakState() === "off") return;
        app.lastClickPos = {lat: arr[0].position.lat(), lng: arr[0].position.lng()};
    });

    app._callstreak = on("endOfRoundScreen", function (arr) {
        if (app.getStreakState() === "off") return;
        usw.app.callstreak(arr);
    });

    app._eor = on("overlaysRemoved", function () {
        console.log("end of round eor");
        app.haltFitBounds = false;
        app.clearList(app.wrongAnswerlist);
    });

    app._onload = on("onGoogleLoaded", function () {
        app.modifyfitBounds();
        app.createOverlyYo();
    });

    document.addEventListener('keydown',OpenMenuKeyPress);

    function OpenMenuKeyPress(e){
        if (e.keyCode != '27') return;

        let state = localStorage.getItem('streakState');
        app.createRightClickMenu(10, 20, state=='on'? true: false, true);
    }
};

app.createOverlyYo = function () {

    let createOverlay = function (location, num, countryCode, overlayColor, polyColor, forcePoly) {
        this.x = location.lng;
        this.y = location.lat;
        this.h = 28;
        this.w = 28;
        this.streak = true;
        this.num = num;
        this.countryCode = countryCode;
        this.color = overlayColor;
        this.polyColor = polyColor;
        this.forcePoly = forcePoly;
        this.dontAddToArr = true;
        this.point = new google.maps.LatLng(location.lat, location.lng);
        window._overlay = this; // TODO: fix this.
        console.log(_overlay, window, google);

        return this;
    };

    createOverlay.prototype = new google.maps.OverlayView();

    createOverlay.prototype.constructor = createOverlay;

    createOverlay.prototype.onAdd = function () {
        this.div = document.createElement("div");
        this.div.style.border = "5px solid " + (this.color || rgb(250, 250, 250));
        this.div.style.position = "absolute";
        this.div.style.background = "black";
        this.div.style.fontSize = "1rem";
        this.div.style.marginLeft = "-5px";
        this.div.style.marginTop = "-5px";
        this.div.style.display = "flex";
        this.div.style.alignItems = "center";
        this.div.style.fontWeight = "700";
        this.div.style.fontFamily = "var(--countryStreakFont)";
        this.div.style.width = this.w + "px";
        this.div.style.height = this.h + "px";
        this.div.style.cursor = "pointer";
        this.div.style.borderRadius = "50px";
        this.div.innerHTML = `<div style="text-align:center; width:100%;color:rgb(250,250,250);">${this.num}</div>`;
        this.div.classList.add("expando");

        const panes = this.getPanes();
        panes.overlayMouseTarget.appendChild(this.div);

        this._map = this.map;

        if (this.countryCode !== "Error") {
        //    this.polygon = makePoly(this.countryCode, this.polyColor, this.map);
        //    highlightManager.add(this.polygon);
        }
    };

    createOverlay.prototype.onRemove = function () {
        if (this.polygon) highlightManager.remove(this.polygon);
        this.div.parentElement.removeChild(this.div);
    };

    // createOverlay.prototype.setPosition = function(point){
    //     //Probably not ever called.
    //     console.log('overlay setPosition w;as called');
    //     this.draw();
    // }

    createOverlay.prototype.draw = function () {
        let proj = this.getProjection();
        let c = proj.fromLatLngToDivPixel(this.point);
        this.div.style.left = c.x - this.w / 2 + "px";
        this.div.style.top = c.y - this.h / 2 + "px";
    };

    app.createOverlay = createOverlay;
};

usw.app.modifyfitBounds = function () {
    let _fitBounds = google.maps.Map.prototype.fitBounds;
    let timer = null;
    let eor = false;
    app.haltFitBounds = false;

    google.maps.Map.prototype.fitBounds = function (a, force, dozoom) {
        //    console.log("Modified fit bounds",this, a, force);
        if (force) {
            console.log("forced to set zoom");

            clearTimeout(timer);

            if (dozoom) {
                setTimeout(() => {
                    this.setZoom(4);
                }, 100);
            } else {
                _fitBounds.call(this, a, 0);
            }

            app.haltFitBounds = true;

            return;
        }

        if (app.haltFitBounds) return;

        console.log("not halted");

        timer = setTimeout(
            function (a) {
                console.log("not halted called");
                _fitBounds.call(this, a, 0);
            }.bind(this),
            100,
            a
        );
    };
};

(function start() {
    let streakState = app.getStreakState(); //localStorage.getItem('streakState') || 'on';
    if (streakState == 'off') return;
    app._addCounterOnRefresh();
})();

app.appendCSS = function () {
    let css = `

    :root {
        --countryStreakFont:'neo-sans','sans-serif';
    }

    .boxShadow {
        box-shadow: 0px 2px 0 0px hsl(0deg 0% 100% / 15%),
                    0px 1px 0 0arrpx rgb(0 0 0 / 25%),
                    2px 0px 0 0px hsl(0deg 0% 100% / 15%),
                    1px 0px #f1df980 0px rgb(0 0 0 / 25%),
                    -2px 0px 0 0px hsl(0deg 0% 100% / 15%),
                    -1px 0px 0 0px rgb(0 0 0 / 25%);
    }

    .styleFont {
         font-family: var(--countryStreakFont);
         font-weight:700;
         z-index:9999;
    }

    .header {
        font-size: 0.6em;
        font-style: italic;
        font-weight: 700;
        color: #fecd19;
    }

    .header:hover {
        color: white;
    }

    .streakNum{
        font-size: 1.2em;
        color: rgb(240,240,240);
    }

    #streak_container {
      position: absolute;
      top: 0px;
      left: 0px;
      height: auto;
      width: auto;
      text-align: center;
    }

    #left_before {
        bottom: 0;
        overflow: hidden;
        position: absolute;
        top: 0;
        left: 0;
        width: 50%;
        z-index: -1;
    }

    #left_before::before {
        transform-origin: top;
        transform: skewX(-12deg);
        left: 12px;
        padding-right: 3px;
        width: 100%;
        background: linear-gradient(180deg,#647fa6 0%,
                    rgba(161,155,217,0) 50%,                    
                    rgba(161,155,217,0) 50%),                    
                    #57668c;        
        box-shadow: inset 0 1px 0 hsla(0,0%,100%,0.15),
                    inset 0 -1px 0 rgba(0,0,0,0.25);
        bottom: 0;
        content: "";
        position: absolute;
        top: 0;
        z-index: -1;
        border-radius: 3px;
    }

    #right_before{
        left: 50%;
        bottom: 0;
        overflow: hidden;
        position: absolute;
        top: 0;
        width: 50%;
        z-index: -1;
    }

    #right_before::before {
        padding-left: 3px;
        transform-origin:bottom;
        transform: skewX(-12deg);
        right: 12px;
        width: 100%;
        background: linear-gradient(180deg,#647fa6 0%,
                    rgba(161,155,217,0) 50%,                    
                    rgba(161,155,217,0) 50%),                    
                    #57668c;        
        box-shadow: inset 0 1px 0 hsla(0,0%,100%,0.15),
                    inset 0 -1px 0 rgba(0,0,0,0.25);
        bottom: 0;
        content: "";
        position: absolute;
        top: 0;
        z-index: -1;
        border-radius: 3px;
    }

    #info {
        align-items: center;
        display: flex;
        padding: 0.5rem 0 0.5rem 1.5rem;
        width: auto;
    }

    .marginright15 {
        margin-right: 1.5rem;
        display:inline-block;
    }

    #add_cont {
        display:inline-block;
        overflow: hidden;
    }

    #margin_ani_cont{
        transition: margin 300ms ease-out, opacity 1s ease;
        margin-left: -11em;
        opacity: 1;
    }

    #streak_container {
        position: absolute;
        user-select: none;
        z-index: 9999999;
        cursor: pointer;
        font-size: 4em;
        color: rgb(50,50,70);
        font-weight: bold;
        font-family: var(--countryStreakFont);
        transition: background 200ms ease;
    }

    .blue_closeBtn:hover {
        color: grey;
    }

    .purpleGeoTheme {
        background : linear-gradient(180deg,rgba(161,155,217,0.6) 0%,
                     rgba(161,155,217,0) 50%,
                      rgba(161,155,217,0) 50%),
                      #563b9a;
        color: rgb(240,240,240);
    }

    .expando:hover{
        transform: scale(1.2);
    }

   .RightClickMenu_cont {
       position: absolute;
       padding: 10px;
       background-color: white;
       z-index: 9999999;
       cursor: pointer;
       font-size: 1em;
       color: rgb(50,50,70);
       font-weight: bold;
       font-family: var(--countryStreakFont);
    }

   .RightClickMenu_ul {
        list-style: none;
        padding: 0px;
   }

   .RightClickMenu_ul li {
       padding: 5px;
   }

   .RightClickMenu_ul li:hover {
       background: rgba(200, 0, 0, 0.3);
   }
`;

    let style1 = document.createElement("style");
    style1.appendChild(document.createTextNode(css));
    document.body.appendChild(style1);
};

app.init();



function countryLabels(){
    GM_addStyle(`
        div:has(.streakWindow)::after {
            background: transparent !important;
            box-shadow: none !important;
        }
        .gm-ui-hover-effect {
            opacity: 0;
        }
    `
    );

    let popupArray = [];
    let dup_coords = {};
    let overlayArray = [];

    _evt.on('arrFilled', function(a){
        if (a.length === 1) return;
        overlayArray = a;
        if (getCountryNameLabelState() === true){
            createPopups();
        }
    });

    function createPopups(){
        overlayArray.forEach((overlay)=>{
            let countryFlags = unsafeWindow.sgs.countryFlags;

            if (overlay.position) return;

            let to = sgs.reverse({lat: overlay.to.lat(), lng: overlay.to.lng()});
            let from = sgs.reverse({lat: overlay.from.lat(), lng: overlay.from.lng()});
            let same = null; //to.country.admin_country_code == from.country.admin_country_code;
            let color = null;

            if (to.error || from.error){
                same = false; // They could be the same....
                color = 'red';
            } else {
                same = to.country.admin_country_code == from.country.admin_country_code;
                color = same? 'green': 'red';
            }
            
            let c = from.error?'UNKNOWN': from.country.country_code; 
            let r = countryFlags[c]? countryFlags[c]: countryFlags['UNKNOWN'];
            r = r.replace('tk', '');// Inserting "tk" into the svg was for a different script.

            if (!dup_coords[overlay.from]){
                let infoWindow = new google.maps.InfoWindow({
                        content: `<div class="streakWindow" style="align-items: center; font-size: var(--font-size-16); font-weight: 700; line-height: var(--line-height-16); display: inline-flex;">
                                      <img style="outline: 1px solid rgb(241 241 241);" src="data:image/svg+xml;charset=utf-8,${encodeURIComponent(r)}">
                                      <span style="color: ${color};font-family: var(--font-neo-sans);margin-left:0.4em;">${from.error? "Unavailable": from.country.country_name}</span>
                                  <div>`,
                        position: overlay.from,
                        pixelOffset: new google.maps.Size(0, -6),
                    });
                 
                infoWindow.open({
                    map: overlay.map,
                });

                popupArray.push(infoWindow);
                dup_coords[overlay.from] = true;
            }

            if (!same && !dup_coords[overlay.to]){
                let c = to.error?'UNKNOWN': to.country.country_code; 
                let s = countryFlags[c]? countryFlags[c]: countryFlags['UNKNOWN'];
                s = s.replace('tk', '');// Inserting "tk" into the svg was for a different script.

                infoWindow = new google.maps.InfoWindow({
                    content: `<div class="streakWindow" style="align-items: center; font-size: var(--font-size-16);  font-weight: 700;  line-height: var(--line-height-16); display: inline-flex;">
                                  <img style="outline: 1px solid rgb(241 241 241);" src="data:image/svg+xml;charset=utf-8,${encodeURIComponent(s)}">
                                  <span style="color: ${color};font-family: var(--font-neo-sans);margin-left:0.4em;">${to.error? "Unavailable": to.country.country_name}</span>
                              <div>`,
                    position: overlay.to,
                    pixelOffset: new google.maps.Size(0, -5),
                });

                infoWindow.open({
                    map: overlay.map,
                });

                popupArray.push(infoWindow);
                dup_coords[overlay.to] = true;
            }
        });
    }
    
    function getCountryNameLabelState(){
        let state = localStorage['showCountryNamePopups'];
        if (state === undefined || state === 'true'){
            state = true;
        } else {
            state = false;
        }
        return state;
    }

    function setCountryNameLabelState(state){
        localStorage['showCountryNamePopups'] = state;
    }

    function removePopups(){
        popupArray.forEach(el => el.setMap(null));
        popupArray = [];
        dup_coords = {};
    }

    _evt.on('overlaysRemoved', function(arg){
        removePopups();
    });

    _evt.on('openRightClickMenu', function(createBtn){
       let state = getCountryNameLabelState();
       let btn = createBtn('Show country name popups', state);
       btn.checkbox.addEventListener('change', (e)=>{
           setCountryNameLabelState(e.target.checked);

           removePopups();

           if (e.target.checked === true){
               createPopups();
           } 
           
       });
       
    });
}

countryLabels();
